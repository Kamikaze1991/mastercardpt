/*
 * Pay with Rewards APIs
 *
 * Pay with Rewards allows cardholders to redeem points for purchases made with an enrolled Mastercard card. The following APIs create the Pay with Rewards user experience, and can be used inside a banking app or other mobile apps.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: paywithrewards@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Pbo.App.MastercardApi.Client.Api;
using Pbo.App.MastercardApi.Client.Model;
using Pbo.App.MastercardApi.Client.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Pbo.App.MastercardApi.Client.Test.Model
{
    /// <summary>
    ///  Class for testing UserAddress
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class UserAddressTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for UserAddress
        //private UserAddress instance;

        public UserAddressTests()
        {
            // TODO uncomment below to create an instance of UserAddress
            //instance = new UserAddress();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of UserAddress
        /// </summary>
        [Fact]
        public void UserAddressInstanceTest()
        {
            // TODO uncomment below to test "IsType" UserAddress
            //Assert.IsType<UserAddress>(instance);
        }


        /// <summary>
        /// Test the property 'AddressLine1'
        /// </summary>
        [Fact]
        public void AddressLine1Test()
        {
            // TODO unit test for the property 'AddressLine1'
        }
        /// <summary>
        /// Test the property 'AddressLine2'
        /// </summary>
        [Fact]
        public void AddressLine2Test()
        {
            // TODO unit test for the property 'AddressLine2'
        }
        /// <summary>
        /// Test the property 'AddressLine3'
        /// </summary>
        [Fact]
        public void AddressLine3Test()
        {
            // TODO unit test for the property 'AddressLine3'
        }
        /// <summary>
        /// Test the property 'AddressLine4'
        /// </summary>
        [Fact]
        public void AddressLine4Test()
        {
            // TODO unit test for the property 'AddressLine4'
        }
        /// <summary>
        /// Test the property 'City'
        /// </summary>
        [Fact]
        public void CityTest()
        {
            // TODO unit test for the property 'City'
        }
        /// <summary>
        /// Test the property 'CountryCode'
        /// </summary>
        [Fact]
        public void CountryCodeTest()
        {
            // TODO unit test for the property 'CountryCode'
        }
        /// <summary>
        /// Test the property 'PostalCode'
        /// </summary>
        [Fact]
        public void PostalCodeTest()
        {
            // TODO unit test for the property 'PostalCode'
        }
        /// <summary>
        /// Test the property 'StateProvinceCode'
        /// </summary>
        [Fact]
        public void StateProvinceCodeTest()
        {
            // TODO unit test for the property 'StateProvinceCode'
        }

    }

}
