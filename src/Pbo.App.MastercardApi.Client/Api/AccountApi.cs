/*
 * Pay with Rewards APIs
 *
 * Pay with Rewards allows cardholders to redeem points for purchases made with an enrolled Mastercard card. The following APIs create the Pay with Rewards user experience, and can be used inside a banking app or other mobile apps.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: paywithrewards@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Pbo.App.MastercardApi.Client.Client;
using Pbo.App.MastercardApi.Client.Model;

namespace Pbo.App.MastercardApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Enrolls a new account for an existing User. An Account is a unique card, as compared to a User which is a unique cardholder. Each User can have multiple Accounts.
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountEnrollRequest">accountEnrollRequest</param>
        /// <returns>AccountEnrollResponse</returns>
        AccountEnrollResponse EnrollAccount(AccountEnrollRequest accountEnrollRequest);

        /// <summary>
        /// Enrolls a new account for an existing User. An Account is a unique card, as compared to a User which is a unique cardholder. Each User can have multiple Accounts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountEnrollRequest">accountEnrollRequest</param>
        /// <returns>ApiResponse of AccountEnrollResponse</returns>
        ApiResponse<AccountEnrollResponse> EnrollAccountWithHttpInfo(AccountEnrollRequest accountEnrollRequest);
        /// <summary>
        /// Retrieves Account details using the Account Id, including the Account standing, enrollment date, and more.&lt;br/&gt;&lt;br/&gt; An Account is a unique card, as compared to a User which is a unique cardholder. Each User can have multiple Accounts.
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A system generated unique identifier for the User such as RANAC</param>
        /// <param name="accountIdType">Account identifier type (optional)</param>
        /// <param name="userIdType">User identifier type (optional)</param>
        /// <returns>AccountSearchResponse</returns>
        AccountSearchResponse FindAccount(string id, string accountIdType = default(string), string userIdType = default(string));

        /// <summary>
        /// Retrieves Account details using the Account Id, including the Account standing, enrollment date, and more.&lt;br/&gt;&lt;br/&gt; An Account is a unique card, as compared to a User which is a unique cardholder. Each User can have multiple Accounts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A system generated unique identifier for the User such as RANAC</param>
        /// <param name="accountIdType">Account identifier type (optional)</param>
        /// <param name="userIdType">User identifier type (optional)</param>
        /// <returns>ApiResponse of AccountSearchResponse</returns>
        ApiResponse<AccountSearchResponse> FindAccountWithHttpInfo(string id, string accountIdType = default(string), string userIdType = default(string));
        /// <summary>
        /// Updates the Account status for currently enrolled Accounts.&lt;br/&gt;&lt;br/&gt; An Account is a unique card, as compared to a User which is a unique cardholder. Each User can have multiple Accounts.
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountUpdateRequest">accountUpdateRequest</param>
        /// <returns></returns>
        void UpdateAccount(AccountUpdateRequest accountUpdateRequest);

        /// <summary>
        /// Updates the Account status for currently enrolled Accounts.&lt;br/&gt;&lt;br/&gt; An Account is a unique card, as compared to a User which is a unique cardholder. Each User can have multiple Accounts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountUpdateRequest">accountUpdateRequest</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateAccountWithHttpInfo(AccountUpdateRequest accountUpdateRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Enrolls a new account for an existing User. An Account is a unique card, as compared to a User which is a unique cardholder. Each User can have multiple Accounts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountEnrollRequest">accountEnrollRequest</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountEnrollResponse</returns>
        System.Threading.Tasks.Task<AccountEnrollResponse> EnrollAccountAsync(AccountEnrollRequest accountEnrollRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Enrolls a new account for an existing User. An Account is a unique card, as compared to a User which is a unique cardholder. Each User can have multiple Accounts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountEnrollRequest">accountEnrollRequest</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountEnrollResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountEnrollResponse>> EnrollAccountWithHttpInfoAsync(AccountEnrollRequest accountEnrollRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves Account details using the Account Id, including the Account standing, enrollment date, and more.&lt;br/&gt;&lt;br/&gt; An Account is a unique card, as compared to a User which is a unique cardholder. Each User can have multiple Accounts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A system generated unique identifier for the User such as RANAC</param>
        /// <param name="accountIdType">Account identifier type (optional)</param>
        /// <param name="userIdType">User identifier type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountSearchResponse</returns>
        System.Threading.Tasks.Task<AccountSearchResponse> FindAccountAsync(string id, string accountIdType = default(string), string userIdType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves Account details using the Account Id, including the Account standing, enrollment date, and more.&lt;br/&gt;&lt;br/&gt; An Account is a unique card, as compared to a User which is a unique cardholder. Each User can have multiple Accounts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A system generated unique identifier for the User such as RANAC</param>
        /// <param name="accountIdType">Account identifier type (optional)</param>
        /// <param name="userIdType">User identifier type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountSearchResponse>> FindAccountWithHttpInfoAsync(string id, string accountIdType = default(string), string userIdType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates the Account status for currently enrolled Accounts.&lt;br/&gt;&lt;br/&gt; An Account is a unique card, as compared to a User which is a unique cardholder. Each User can have multiple Accounts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountUpdateRequest">accountUpdateRequest</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateAccountAsync(AccountUpdateRequest accountUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates the Account status for currently enrolled Accounts.&lt;br/&gt;&lt;br/&gt; An Account is a unique card, as compared to a User which is a unique cardholder. Each User can have multiple Accounts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountUpdateRequest">accountUpdateRequest</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAccountWithHttpInfoAsync(AccountUpdateRequest accountUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountApi : IAccountApiSync, IAccountApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccountApi : IAccountApi
    {
        private Pbo.App.MastercardApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountApi(String basePath)
        {
            this.Configuration = Pbo.App.MastercardApi.Client.Client.Configuration.MergeConfigurations(
                Pbo.App.MastercardApi.Client.Client.GlobalConfiguration.Instance,
                new Pbo.App.MastercardApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Pbo.App.MastercardApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Pbo.App.MastercardApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Pbo.App.MastercardApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountApi(Pbo.App.MastercardApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Pbo.App.MastercardApi.Client.Client.Configuration.MergeConfigurations(
                Pbo.App.MastercardApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Pbo.App.MastercardApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Pbo.App.MastercardApi.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Pbo.App.MastercardApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AccountApi(Pbo.App.MastercardApi.Client.Client.ISynchronousClient client, Pbo.App.MastercardApi.Client.Client.IAsynchronousClient asyncClient, Pbo.App.MastercardApi.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Pbo.App.MastercardApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Pbo.App.MastercardApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Pbo.App.MastercardApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Pbo.App.MastercardApi.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Pbo.App.MastercardApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Enrolls a new account for an existing User. An Account is a unique card, as compared to a User which is a unique cardholder. Each User can have multiple Accounts. 
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountEnrollRequest">accountEnrollRequest</param>
        /// <returns>AccountEnrollResponse</returns>
        public AccountEnrollResponse EnrollAccount(AccountEnrollRequest accountEnrollRequest)
        {
            Pbo.App.MastercardApi.Client.Client.ApiResponse<AccountEnrollResponse> localVarResponse = EnrollAccountWithHttpInfo(accountEnrollRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Enrolls a new account for an existing User. An Account is a unique card, as compared to a User which is a unique cardholder. Each User can have multiple Accounts. 
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountEnrollRequest">accountEnrollRequest</param>
        /// <returns>ApiResponse of AccountEnrollResponse</returns>
        public Pbo.App.MastercardApi.Client.Client.ApiResponse<AccountEnrollResponse> EnrollAccountWithHttpInfo(AccountEnrollRequest accountEnrollRequest)
        {
            // verify the required parameter 'accountEnrollRequest' is set
            if (accountEnrollRequest == null)
                throw new Pbo.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'accountEnrollRequest' when calling AccountApi->EnrollAccount");

            Pbo.App.MastercardApi.Client.Client.RequestOptions localVarRequestOptions = new Pbo.App.MastercardApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = accountEnrollRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AccountEnrollResponse>("/mrs/accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EnrollAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enrolls a new account for an existing User. An Account is a unique card, as compared to a User which is a unique cardholder. Each User can have multiple Accounts. 
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountEnrollRequest">accountEnrollRequest</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountEnrollResponse</returns>
        public async System.Threading.Tasks.Task<AccountEnrollResponse> EnrollAccountAsync(AccountEnrollRequest accountEnrollRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pbo.App.MastercardApi.Client.Client.ApiResponse<AccountEnrollResponse> localVarResponse = await EnrollAccountWithHttpInfoAsync(accountEnrollRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Enrolls a new account for an existing User. An Account is a unique card, as compared to a User which is a unique cardholder. Each User can have multiple Accounts. 
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountEnrollRequest">accountEnrollRequest</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountEnrollResponse)</returns>
        public async System.Threading.Tasks.Task<Pbo.App.MastercardApi.Client.Client.ApiResponse<AccountEnrollResponse>> EnrollAccountWithHttpInfoAsync(AccountEnrollRequest accountEnrollRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountEnrollRequest' is set
            if (accountEnrollRequest == null)
                throw new Pbo.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'accountEnrollRequest' when calling AccountApi->EnrollAccount");


            Pbo.App.MastercardApi.Client.Client.RequestOptions localVarRequestOptions = new Pbo.App.MastercardApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = accountEnrollRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AccountEnrollResponse>("/mrs/accounts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EnrollAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves Account details using the Account Id, including the Account standing, enrollment date, and more.&lt;br/&gt;&lt;br/&gt; An Account is a unique card, as compared to a User which is a unique cardholder. Each User can have multiple Accounts. 
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A system generated unique identifier for the User such as RANAC</param>
        /// <param name="accountIdType">Account identifier type (optional)</param>
        /// <param name="userIdType">User identifier type (optional)</param>
        /// <returns>AccountSearchResponse</returns>
        public AccountSearchResponse FindAccount(string id, string accountIdType = default(string), string userIdType = default(string))
        {
            Pbo.App.MastercardApi.Client.Client.ApiResponse<AccountSearchResponse> localVarResponse = FindAccountWithHttpInfo(id, accountIdType, userIdType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves Account details using the Account Id, including the Account standing, enrollment date, and more.&lt;br/&gt;&lt;br/&gt; An Account is a unique card, as compared to a User which is a unique cardholder. Each User can have multiple Accounts. 
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A system generated unique identifier for the User such as RANAC</param>
        /// <param name="accountIdType">Account identifier type (optional)</param>
        /// <param name="userIdType">User identifier type (optional)</param>
        /// <returns>ApiResponse of AccountSearchResponse</returns>
        public Pbo.App.MastercardApi.Client.Client.ApiResponse<AccountSearchResponse> FindAccountWithHttpInfo(string id, string accountIdType = default(string), string userIdType = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Pbo.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling AccountApi->FindAccount");

            Pbo.App.MastercardApi.Client.Client.RequestOptions localVarRequestOptions = new Pbo.App.MastercardApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Pbo.App.MastercardApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (accountIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pbo.App.MastercardApi.Client.Client.ClientUtils.ParameterToMultiMap("", "account_id_type", accountIdType));
            }
            if (userIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pbo.App.MastercardApi.Client.Client.ClientUtils.ParameterToMultiMap("", "user_id_type", userIdType));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<AccountSearchResponse>("/mrs/accounts/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves Account details using the Account Id, including the Account standing, enrollment date, and more.&lt;br/&gt;&lt;br/&gt; An Account is a unique card, as compared to a User which is a unique cardholder. Each User can have multiple Accounts. 
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A system generated unique identifier for the User such as RANAC</param>
        /// <param name="accountIdType">Account identifier type (optional)</param>
        /// <param name="userIdType">User identifier type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountSearchResponse</returns>
        public async System.Threading.Tasks.Task<AccountSearchResponse> FindAccountAsync(string id, string accountIdType = default(string), string userIdType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pbo.App.MastercardApi.Client.Client.ApiResponse<AccountSearchResponse> localVarResponse = await FindAccountWithHttpInfoAsync(id, accountIdType, userIdType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves Account details using the Account Id, including the Account standing, enrollment date, and more.&lt;br/&gt;&lt;br/&gt; An Account is a unique card, as compared to a User which is a unique cardholder. Each User can have multiple Accounts. 
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A system generated unique identifier for the User such as RANAC</param>
        /// <param name="accountIdType">Account identifier type (optional)</param>
        /// <param name="userIdType">User identifier type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountSearchResponse)</returns>
        public async System.Threading.Tasks.Task<Pbo.App.MastercardApi.Client.Client.ApiResponse<AccountSearchResponse>> FindAccountWithHttpInfoAsync(string id, string accountIdType = default(string), string userIdType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Pbo.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling AccountApi->FindAccount");


            Pbo.App.MastercardApi.Client.Client.RequestOptions localVarRequestOptions = new Pbo.App.MastercardApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Pbo.App.MastercardApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (accountIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pbo.App.MastercardApi.Client.Client.ClientUtils.ParameterToMultiMap("", "account_id_type", accountIdType));
            }
            if (userIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pbo.App.MastercardApi.Client.Client.ClientUtils.ParameterToMultiMap("", "user_id_type", userIdType));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AccountSearchResponse>("/mrs/accounts/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the Account status for currently enrolled Accounts.&lt;br/&gt;&lt;br/&gt; An Account is a unique card, as compared to a User which is a unique cardholder. Each User can have multiple Accounts. 
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountUpdateRequest">accountUpdateRequest</param>
        /// <returns></returns>
        public void UpdateAccount(AccountUpdateRequest accountUpdateRequest)
        {
            UpdateAccountWithHttpInfo(accountUpdateRequest);
        }

        /// <summary>
        /// Updates the Account status for currently enrolled Accounts.&lt;br/&gt;&lt;br/&gt; An Account is a unique card, as compared to a User which is a unique cardholder. Each User can have multiple Accounts. 
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountUpdateRequest">accountUpdateRequest</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Pbo.App.MastercardApi.Client.Client.ApiResponse<Object> UpdateAccountWithHttpInfo(AccountUpdateRequest accountUpdateRequest)
        {
            // verify the required parameter 'accountUpdateRequest' is set
            if (accountUpdateRequest == null)
                throw new Pbo.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'accountUpdateRequest' when calling AccountApi->UpdateAccount");

            Pbo.App.MastercardApi.Client.Client.RequestOptions localVarRequestOptions = new Pbo.App.MastercardApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = accountUpdateRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/mrs/accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the Account status for currently enrolled Accounts.&lt;br/&gt;&lt;br/&gt; An Account is a unique card, as compared to a User which is a unique cardholder. Each User can have multiple Accounts. 
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountUpdateRequest">accountUpdateRequest</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateAccountAsync(AccountUpdateRequest accountUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateAccountWithHttpInfoAsync(accountUpdateRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Updates the Account status for currently enrolled Accounts.&lt;br/&gt;&lt;br/&gt; An Account is a unique card, as compared to a User which is a unique cardholder. Each User can have multiple Accounts. 
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountUpdateRequest">accountUpdateRequest</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Pbo.App.MastercardApi.Client.Client.ApiResponse<Object>> UpdateAccountWithHttpInfoAsync(AccountUpdateRequest accountUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountUpdateRequest' is set
            if (accountUpdateRequest == null)
                throw new Pbo.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'accountUpdateRequest' when calling AccountApi->UpdateAccount");


            Pbo.App.MastercardApi.Client.Client.RequestOptions localVarRequestOptions = new Pbo.App.MastercardApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = accountUpdateRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/mrs/accounts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
