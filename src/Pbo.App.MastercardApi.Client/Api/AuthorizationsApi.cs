/*
 * Pay with Rewards APIs
 *
 * Pay with Rewards allows cardholders to redeem points for purchases made with an enrolled Mastercard card. The following APIs create the Pay with Rewards user experience, and can be used inside a banking app or other mobile apps.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: paywithrewards@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Pbo.App.MastercardApi.Client.Client;
using Pbo.App.MastercardApi.Client.Model;
using Authorization = Pbo.App.MastercardApi.Client.Model.Authorization;

namespace Pbo.App.MastercardApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthorizationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a cardholder&#39;s recent transactions based on filtering criteria. Each transaction is returned along with a response code which identifies the result of its processing through Pay with Rewards. This can be used to display a transaction history with a status indicator for each transaction. For example- redeemed, eligible for redemption, ineligible for redemption. Results from this can be limited by status code depending on the requirements of the client&#39;s UI. This call uses RANAC as the user_id_type. &lt;br&gt; NOTE- This API returns many data elements about each transaction. Typically, PWR UI displays a few key data elements required for a cardholder to identify a transaction. (For example - date, amount, and merchant)
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique identifier of the user.</param>
        /// <param name="fromDate">Start date (YYYY-MM-DD) for the transactions required. Required.</param>
        /// <param name="toDate">End date (YYYY-MM-DD) for the transactions required. Required.</param>
        /// <param name="includeReprocessed">Indicates whether or not authorizations that were reprocessed (redeemed post-purchase by the cardholder) should be included.</param>
        /// <param name="userIdType">Identifier type for the given user such as RANAC. Optional. (optional)</param>
        /// <param name="externalId">Reference number provided by processing network (Mastercard or other). Optional. (optional)</param>
        /// <param name="pwrFilterCategories">Provides capability to filter the transactions based on the authorization response reason code provided by Mastercard. R indicates successfully redeemed which includes authorizations that has response code 60. E indicates eligible transactions which includes authorizations that has response code 59. I indicates ineligible transacations which includes authorizations that has response codes 59,60,72, and 70. Please &lt;a href&#x3D;\&quot;/pay-with-rewards/documentation/api-reference/application-response-codes/\&quot;&gt;click here&lt;/a&gt; to understand what these codes mean. Optional. (optional)</param>
        /// <returns>List&lt;Authorization&gt;</returns>
        List<Authorization> GetAuthorizationsUsingGET(string userId, DateTime fromDate, DateTime toDate, bool includeReprocessed, string userIdType = default(string), string externalId = default(string), List<string> pwrFilterCategories = default(List<string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a cardholder&#39;s recent transactions based on filtering criteria. Each transaction is returned along with a response code which identifies the result of its processing through Pay with Rewards. This can be used to display a transaction history with a status indicator for each transaction. For example- redeemed, eligible for redemption, ineligible for redemption. Results from this can be limited by status code depending on the requirements of the client&#39;s UI. This call uses RANAC as the user_id_type. &lt;br&gt; NOTE- This API returns many data elements about each transaction. Typically, PWR UI displays a few key data elements required for a cardholder to identify a transaction. (For example - date, amount, and merchant)
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique identifier of the user.</param>
        /// <param name="fromDate">Start date (YYYY-MM-DD) for the transactions required. Required.</param>
        /// <param name="toDate">End date (YYYY-MM-DD) for the transactions required. Required.</param>
        /// <param name="includeReprocessed">Indicates whether or not authorizations that were reprocessed (redeemed post-purchase by the cardholder) should be included.</param>
        /// <param name="userIdType">Identifier type for the given user such as RANAC. Optional. (optional)</param>
        /// <param name="externalId">Reference number provided by processing network (Mastercard or other). Optional. (optional)</param>
        /// <param name="pwrFilterCategories">Provides capability to filter the transactions based on the authorization response reason code provided by Mastercard. R indicates successfully redeemed which includes authorizations that has response code 60. E indicates eligible transactions which includes authorizations that has response code 59. I indicates ineligible transacations which includes authorizations that has response codes 59,60,72, and 70. Please &lt;a href&#x3D;\&quot;/pay-with-rewards/documentation/api-reference/application-response-codes/\&quot;&gt;click here&lt;/a&gt; to understand what these codes mean. Optional. (optional)</param>
        /// <returns>ApiResponse of List&lt;Authorization&gt;</returns>
        ApiResponse<List<Authorization>> GetAuthorizationsUsingGETWithHttpInfo(string userId, DateTime fromDate, DateTime toDate, bool includeReprocessed, string userIdType = default(string), string externalId = default(string), List<string> pwrFilterCategories = default(List<string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sends a new transaction to be processed by Pay with Rewards. This can be used for transactions not processed by the Mastercard network. Supported accountIdType is BAN. Use queueTransaction&#x3D;&#39;Y&#39; if you want to send the transaction to Pay with Rewards without waiting for the completion of processing. When queueTransaction&#x3D;&#39;Y&#39; the only field populated in the response will be responseMessage. Most parameters in this API are optional. Required elements are noted as such.
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizationRequest">request</param>
        /// <returns>List&lt;AuthorizationPostResponse&gt;</returns>
        List<AuthorizationPostResponse> PostAuthorizationsUsingPOST(AuthorizationRequest authorizationRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sends a new transaction to be processed by Pay with Rewards. This can be used for transactions not processed by the Mastercard network. Supported accountIdType is BAN. Use queueTransaction&#x3D;&#39;Y&#39; if you want to send the transaction to Pay with Rewards without waiting for the completion of processing. When queueTransaction&#x3D;&#39;Y&#39; the only field populated in the response will be responseMessage. Most parameters in this API are optional. Required elements are noted as such.
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizationRequest">request</param>
        /// <returns>ApiResponse of List&lt;AuthorizationPostResponse&gt;</returns>
        ApiResponse<List<AuthorizationPostResponse>> PostAuthorizationsUsingPOSTWithHttpInfo(AuthorizationRequest authorizationRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthorizationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a cardholder&#39;s recent transactions based on filtering criteria. Each transaction is returned along with a response code which identifies the result of its processing through Pay with Rewards. This can be used to display a transaction history with a status indicator for each transaction. For example- redeemed, eligible for redemption, ineligible for redemption. Results from this can be limited by status code depending on the requirements of the client&#39;s UI. This call uses RANAC as the user_id_type. &lt;br&gt; NOTE- This API returns many data elements about each transaction. Typically, PWR UI displays a few key data elements required for a cardholder to identify a transaction. (For example - date, amount, and merchant)
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique identifier of the user.</param>
        /// <param name="fromDate">Start date (YYYY-MM-DD) for the transactions required. Required.</param>
        /// <param name="toDate">End date (YYYY-MM-DD) for the transactions required. Required.</param>
        /// <param name="includeReprocessed">Indicates whether or not authorizations that were reprocessed (redeemed post-purchase by the cardholder) should be included.</param>
        /// <param name="userIdType">Identifier type for the given user such as RANAC. Optional. (optional)</param>
        /// <param name="externalId">Reference number provided by processing network (Mastercard or other). Optional. (optional)</param>
        /// <param name="pwrFilterCategories">Provides capability to filter the transactions based on the authorization response reason code provided by Mastercard. R indicates successfully redeemed which includes authorizations that has response code 60. E indicates eligible transactions which includes authorizations that has response code 59. I indicates ineligible transacations which includes authorizations that has response codes 59,60,72, and 70. Please &lt;a href&#x3D;\&quot;/pay-with-rewards/documentation/api-reference/application-response-codes/\&quot;&gt;click here&lt;/a&gt; to understand what these codes mean. Optional. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Authorization&gt;</returns>
        System.Threading.Tasks.Task<List<Authorization>> GetAuthorizationsUsingGETAsync(string userId, DateTime fromDate, DateTime toDate, bool includeReprocessed, string userIdType = default(string), string externalId = default(string), List<string> pwrFilterCategories = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a cardholder&#39;s recent transactions based on filtering criteria. Each transaction is returned along with a response code which identifies the result of its processing through Pay with Rewards. This can be used to display a transaction history with a status indicator for each transaction. For example- redeemed, eligible for redemption, ineligible for redemption. Results from this can be limited by status code depending on the requirements of the client&#39;s UI. This call uses RANAC as the user_id_type. &lt;br&gt; NOTE- This API returns many data elements about each transaction. Typically, PWR UI displays a few key data elements required for a cardholder to identify a transaction. (For example - date, amount, and merchant)
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique identifier of the user.</param>
        /// <param name="fromDate">Start date (YYYY-MM-DD) for the transactions required. Required.</param>
        /// <param name="toDate">End date (YYYY-MM-DD) for the transactions required. Required.</param>
        /// <param name="includeReprocessed">Indicates whether or not authorizations that were reprocessed (redeemed post-purchase by the cardholder) should be included.</param>
        /// <param name="userIdType">Identifier type for the given user such as RANAC. Optional. (optional)</param>
        /// <param name="externalId">Reference number provided by processing network (Mastercard or other). Optional. (optional)</param>
        /// <param name="pwrFilterCategories">Provides capability to filter the transactions based on the authorization response reason code provided by Mastercard. R indicates successfully redeemed which includes authorizations that has response code 60. E indicates eligible transactions which includes authorizations that has response code 59. I indicates ineligible transacations which includes authorizations that has response codes 59,60,72, and 70. Please &lt;a href&#x3D;\&quot;/pay-with-rewards/documentation/api-reference/application-response-codes/\&quot;&gt;click here&lt;/a&gt; to understand what these codes mean. Optional. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Authorization&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Authorization>>> GetAuthorizationsUsingGETWithHttpInfoAsync(string userId, DateTime fromDate, DateTime toDate, bool includeReprocessed, string userIdType = default(string), string externalId = default(string), List<string> pwrFilterCategories = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sends a new transaction to be processed by Pay with Rewards. This can be used for transactions not processed by the Mastercard network. Supported accountIdType is BAN. Use queueTransaction&#x3D;&#39;Y&#39; if you want to send the transaction to Pay with Rewards without waiting for the completion of processing. When queueTransaction&#x3D;&#39;Y&#39; the only field populated in the response will be responseMessage. Most parameters in this API are optional. Required elements are noted as such.
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizationRequest">request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AuthorizationPostResponse&gt;</returns>
        System.Threading.Tasks.Task<List<AuthorizationPostResponse>> PostAuthorizationsUsingPOSTAsync(AuthorizationRequest authorizationRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sends a new transaction to be processed by Pay with Rewards. This can be used for transactions not processed by the Mastercard network. Supported accountIdType is BAN. Use queueTransaction&#x3D;&#39;Y&#39; if you want to send the transaction to Pay with Rewards without waiting for the completion of processing. When queueTransaction&#x3D;&#39;Y&#39; the only field populated in the response will be responseMessage. Most parameters in this API are optional. Required elements are noted as such.
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizationRequest">request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AuthorizationPostResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AuthorizationPostResponse>>> PostAuthorizationsUsingPOSTWithHttpInfoAsync(AuthorizationRequest authorizationRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthorizationsApi : IAuthorizationsApiSync, IAuthorizationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuthorizationsApi : IAuthorizationsApi
    {
        private Pbo.App.MastercardApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthorizationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthorizationsApi(String basePath)
        {
            this.Configuration = Pbo.App.MastercardApi.Client.Client.Configuration.MergeConfigurations(
                Pbo.App.MastercardApi.Client.Client.GlobalConfiguration.Instance,
                new Pbo.App.MastercardApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Pbo.App.MastercardApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Pbo.App.MastercardApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Pbo.App.MastercardApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuthorizationsApi(Pbo.App.MastercardApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Pbo.App.MastercardApi.Client.Client.Configuration.MergeConfigurations(
                Pbo.App.MastercardApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Pbo.App.MastercardApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Pbo.App.MastercardApi.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Pbo.App.MastercardApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AuthorizationsApi(Pbo.App.MastercardApi.Client.Client.ISynchronousClient client, Pbo.App.MastercardApi.Client.Client.IAsynchronousClient asyncClient, Pbo.App.MastercardApi.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Pbo.App.MastercardApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Pbo.App.MastercardApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Pbo.App.MastercardApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Pbo.App.MastercardApi.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Pbo.App.MastercardApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Retrieves a cardholder&#39;s recent transactions based on filtering criteria. Each transaction is returned along with a response code which identifies the result of its processing through Pay with Rewards. This can be used to display a transaction history with a status indicator for each transaction. For example- redeemed, eligible for redemption, ineligible for redemption. Results from this can be limited by status code depending on the requirements of the client&#39;s UI. This call uses RANAC as the user_id_type. &lt;br&gt; NOTE- This API returns many data elements about each transaction. Typically, PWR UI displays a few key data elements required for a cardholder to identify a transaction. (For example - date, amount, and merchant)
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique identifier of the user.</param>
        /// <param name="fromDate">Start date (YYYY-MM-DD) for the transactions required. Required.</param>
        /// <param name="toDate">End date (YYYY-MM-DD) for the transactions required. Required.</param>
        /// <param name="includeReprocessed">Indicates whether or not authorizations that were reprocessed (redeemed post-purchase by the cardholder) should be included.</param>
        /// <param name="userIdType">Identifier type for the given user such as RANAC. Optional. (optional)</param>
        /// <param name="externalId">Reference number provided by processing network (Mastercard or other). Optional. (optional)</param>
        /// <param name="pwrFilterCategories">Provides capability to filter the transactions based on the authorization response reason code provided by Mastercard. R indicates successfully redeemed which includes authorizations that has response code 60. E indicates eligible transactions which includes authorizations that has response code 59. I indicates ineligible transacations which includes authorizations that has response codes 59,60,72, and 70. Please &lt;a href&#x3D;\&quot;/pay-with-rewards/documentation/api-reference/application-response-codes/\&quot;&gt;click here&lt;/a&gt; to understand what these codes mean. Optional. (optional)</param>
        /// <returns>List&lt;Authorization&gt;</returns>
        public List<Authorization> GetAuthorizationsUsingGET(string userId, DateTime fromDate, DateTime toDate, bool includeReprocessed, string userIdType = default(string), string externalId = default(string), List<string> pwrFilterCategories = default(List<string>))
        {
            Pbo.App.MastercardApi.Client.Client.ApiResponse<List<Authorization>> localVarResponse = GetAuthorizationsUsingGETWithHttpInfo(userId, fromDate, toDate, includeReprocessed, userIdType, externalId, pwrFilterCategories);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves a cardholder&#39;s recent transactions based on filtering criteria. Each transaction is returned along with a response code which identifies the result of its processing through Pay with Rewards. This can be used to display a transaction history with a status indicator for each transaction. For example- redeemed, eligible for redemption, ineligible for redemption. Results from this can be limited by status code depending on the requirements of the client&#39;s UI. This call uses RANAC as the user_id_type. &lt;br&gt; NOTE- This API returns many data elements about each transaction. Typically, PWR UI displays a few key data elements required for a cardholder to identify a transaction. (For example - date, amount, and merchant)
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique identifier of the user.</param>
        /// <param name="fromDate">Start date (YYYY-MM-DD) for the transactions required. Required.</param>
        /// <param name="toDate">End date (YYYY-MM-DD) for the transactions required. Required.</param>
        /// <param name="includeReprocessed">Indicates whether or not authorizations that were reprocessed (redeemed post-purchase by the cardholder) should be included.</param>
        /// <param name="userIdType">Identifier type for the given user such as RANAC. Optional. (optional)</param>
        /// <param name="externalId">Reference number provided by processing network (Mastercard or other). Optional. (optional)</param>
        /// <param name="pwrFilterCategories">Provides capability to filter the transactions based on the authorization response reason code provided by Mastercard. R indicates successfully redeemed which includes authorizations that has response code 60. E indicates eligible transactions which includes authorizations that has response code 59. I indicates ineligible transacations which includes authorizations that has response codes 59,60,72, and 70. Please &lt;a href&#x3D;\&quot;/pay-with-rewards/documentation/api-reference/application-response-codes/\&quot;&gt;click here&lt;/a&gt; to understand what these codes mean. Optional. (optional)</param>
        /// <returns>ApiResponse of List&lt;Authorization&gt;</returns>
        public Pbo.App.MastercardApi.Client.Client.ApiResponse<List<Authorization>> GetAuthorizationsUsingGETWithHttpInfo(string userId, DateTime fromDate, DateTime toDate, bool includeReprocessed, string userIdType = default(string), string externalId = default(string), List<string> pwrFilterCategories = default(List<string>))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Pbo.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'userId' when calling AuthorizationsApi->GetAuthorizationsUsingGET");

            Pbo.App.MastercardApi.Client.Client.RequestOptions localVarRequestOptions = new Pbo.App.MastercardApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Pbo.App.MastercardApi.Client.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));
            if (userIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pbo.App.MastercardApi.Client.Client.ClientUtils.ParameterToMultiMap("", "user_id_type", userIdType));
            }
            if (externalId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pbo.App.MastercardApi.Client.Client.ClientUtils.ParameterToMultiMap("", "external_id", externalId));
            }
            localVarRequestOptions.QueryParameters.Add(Pbo.App.MastercardApi.Client.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            localVarRequestOptions.QueryParameters.Add(Pbo.App.MastercardApi.Client.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            localVarRequestOptions.QueryParameters.Add(Pbo.App.MastercardApi.Client.Client.ClientUtils.ParameterToMultiMap("", "include_reprocessed", includeReprocessed));
            if (pwrFilterCategories != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pbo.App.MastercardApi.Client.Client.ClientUtils.ParameterToMultiMap("csv", "pwr_filter_categories", pwrFilterCategories));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Authorization>>("/authorizations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthorizationsUsingGET", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves a cardholder&#39;s recent transactions based on filtering criteria. Each transaction is returned along with a response code which identifies the result of its processing through Pay with Rewards. This can be used to display a transaction history with a status indicator for each transaction. For example- redeemed, eligible for redemption, ineligible for redemption. Results from this can be limited by status code depending on the requirements of the client&#39;s UI. This call uses RANAC as the user_id_type. &lt;br&gt; NOTE- This API returns many data elements about each transaction. Typically, PWR UI displays a few key data elements required for a cardholder to identify a transaction. (For example - date, amount, and merchant)
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique identifier of the user.</param>
        /// <param name="fromDate">Start date (YYYY-MM-DD) for the transactions required. Required.</param>
        /// <param name="toDate">End date (YYYY-MM-DD) for the transactions required. Required.</param>
        /// <param name="includeReprocessed">Indicates whether or not authorizations that were reprocessed (redeemed post-purchase by the cardholder) should be included.</param>
        /// <param name="userIdType">Identifier type for the given user such as RANAC. Optional. (optional)</param>
        /// <param name="externalId">Reference number provided by processing network (Mastercard or other). Optional. (optional)</param>
        /// <param name="pwrFilterCategories">Provides capability to filter the transactions based on the authorization response reason code provided by Mastercard. R indicates successfully redeemed which includes authorizations that has response code 60. E indicates eligible transactions which includes authorizations that has response code 59. I indicates ineligible transacations which includes authorizations that has response codes 59,60,72, and 70. Please &lt;a href&#x3D;\&quot;/pay-with-rewards/documentation/api-reference/application-response-codes/\&quot;&gt;click here&lt;/a&gt; to understand what these codes mean. Optional. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Authorization&gt;</returns>
        public async System.Threading.Tasks.Task<List<Authorization>> GetAuthorizationsUsingGETAsync(string userId, DateTime fromDate, DateTime toDate, bool includeReprocessed, string userIdType = default(string), string externalId = default(string), List<string> pwrFilterCategories = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pbo.App.MastercardApi.Client.Client.ApiResponse<List<Authorization>> localVarResponse = await GetAuthorizationsUsingGETWithHttpInfoAsync(userId, fromDate, toDate, includeReprocessed, userIdType, externalId, pwrFilterCategories, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves a cardholder&#39;s recent transactions based on filtering criteria. Each transaction is returned along with a response code which identifies the result of its processing through Pay with Rewards. This can be used to display a transaction history with a status indicator for each transaction. For example- redeemed, eligible for redemption, ineligible for redemption. Results from this can be limited by status code depending on the requirements of the client&#39;s UI. This call uses RANAC as the user_id_type. &lt;br&gt; NOTE- This API returns many data elements about each transaction. Typically, PWR UI displays a few key data elements required for a cardholder to identify a transaction. (For example - date, amount, and merchant)
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique identifier of the user.</param>
        /// <param name="fromDate">Start date (YYYY-MM-DD) for the transactions required. Required.</param>
        /// <param name="toDate">End date (YYYY-MM-DD) for the transactions required. Required.</param>
        /// <param name="includeReprocessed">Indicates whether or not authorizations that were reprocessed (redeemed post-purchase by the cardholder) should be included.</param>
        /// <param name="userIdType">Identifier type for the given user such as RANAC. Optional. (optional)</param>
        /// <param name="externalId">Reference number provided by processing network (Mastercard or other). Optional. (optional)</param>
        /// <param name="pwrFilterCategories">Provides capability to filter the transactions based on the authorization response reason code provided by Mastercard. R indicates successfully redeemed which includes authorizations that has response code 60. E indicates eligible transactions which includes authorizations that has response code 59. I indicates ineligible transacations which includes authorizations that has response codes 59,60,72, and 70. Please &lt;a href&#x3D;\&quot;/pay-with-rewards/documentation/api-reference/application-response-codes/\&quot;&gt;click here&lt;/a&gt; to understand what these codes mean. Optional. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Authorization&gt;)</returns>
        public async System.Threading.Tasks.Task<Pbo.App.MastercardApi.Client.Client.ApiResponse<List<Authorization>>> GetAuthorizationsUsingGETWithHttpInfoAsync(string userId, DateTime fromDate, DateTime toDate, bool includeReprocessed, string userIdType = default(string), string externalId = default(string), List<string> pwrFilterCategories = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Pbo.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'userId' when calling AuthorizationsApi->GetAuthorizationsUsingGET");


            Pbo.App.MastercardApi.Client.Client.RequestOptions localVarRequestOptions = new Pbo.App.MastercardApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Pbo.App.MastercardApi.Client.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));
            if (userIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pbo.App.MastercardApi.Client.Client.ClientUtils.ParameterToMultiMap("", "user_id_type", userIdType));
            }
            if (externalId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pbo.App.MastercardApi.Client.Client.ClientUtils.ParameterToMultiMap("", "external_id", externalId));
            }
            localVarRequestOptions.QueryParameters.Add(Pbo.App.MastercardApi.Client.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            localVarRequestOptions.QueryParameters.Add(Pbo.App.MastercardApi.Client.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            localVarRequestOptions.QueryParameters.Add(Pbo.App.MastercardApi.Client.Client.ClientUtils.ParameterToMultiMap("", "include_reprocessed", includeReprocessed));
            if (pwrFilterCategories != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pbo.App.MastercardApi.Client.Client.ClientUtils.ParameterToMultiMap("csv", "pwr_filter_categories", pwrFilterCategories));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Authorization>>("/authorizations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthorizationsUsingGET", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Sends a new transaction to be processed by Pay with Rewards. This can be used for transactions not processed by the Mastercard network. Supported accountIdType is BAN. Use queueTransaction&#x3D;&#39;Y&#39; if you want to send the transaction to Pay with Rewards without waiting for the completion of processing. When queueTransaction&#x3D;&#39;Y&#39; the only field populated in the response will be responseMessage. Most parameters in this API are optional. Required elements are noted as such.
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizationRequest">request</param>
        /// <returns>List&lt;AuthorizationPostResponse&gt;</returns>
        public List<AuthorizationPostResponse> PostAuthorizationsUsingPOST(AuthorizationRequest authorizationRequest)
        {
            Pbo.App.MastercardApi.Client.Client.ApiResponse<List<AuthorizationPostResponse>> localVarResponse = PostAuthorizationsUsingPOSTWithHttpInfo(authorizationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Sends a new transaction to be processed by Pay with Rewards. This can be used for transactions not processed by the Mastercard network. Supported accountIdType is BAN. Use queueTransaction&#x3D;&#39;Y&#39; if you want to send the transaction to Pay with Rewards without waiting for the completion of processing. When queueTransaction&#x3D;&#39;Y&#39; the only field populated in the response will be responseMessage. Most parameters in this API are optional. Required elements are noted as such.
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizationRequest">request</param>
        /// <returns>ApiResponse of List&lt;AuthorizationPostResponse&gt;</returns>
        public Pbo.App.MastercardApi.Client.Client.ApiResponse<List<AuthorizationPostResponse>> PostAuthorizationsUsingPOSTWithHttpInfo(AuthorizationRequest authorizationRequest)
        {
            // verify the required parameter 'authorizationRequest' is set
            if (authorizationRequest == null)
                throw new Pbo.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'authorizationRequest' when calling AuthorizationsApi->PostAuthorizationsUsingPOST");

            Pbo.App.MastercardApi.Client.Client.RequestOptions localVarRequestOptions = new Pbo.App.MastercardApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = authorizationRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<AuthorizationPostResponse>>("/authorizations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthorizationsUsingPOST", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Sends a new transaction to be processed by Pay with Rewards. This can be used for transactions not processed by the Mastercard network. Supported accountIdType is BAN. Use queueTransaction&#x3D;&#39;Y&#39; if you want to send the transaction to Pay with Rewards without waiting for the completion of processing. When queueTransaction&#x3D;&#39;Y&#39; the only field populated in the response will be responseMessage. Most parameters in this API are optional. Required elements are noted as such.
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizationRequest">request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AuthorizationPostResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<AuthorizationPostResponse>> PostAuthorizationsUsingPOSTAsync(AuthorizationRequest authorizationRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pbo.App.MastercardApi.Client.Client.ApiResponse<List<AuthorizationPostResponse>> localVarResponse = await PostAuthorizationsUsingPOSTWithHttpInfoAsync(authorizationRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Sends a new transaction to be processed by Pay with Rewards. This can be used for transactions not processed by the Mastercard network. Supported accountIdType is BAN. Use queueTransaction&#x3D;&#39;Y&#39; if you want to send the transaction to Pay with Rewards without waiting for the completion of processing. When queueTransaction&#x3D;&#39;Y&#39; the only field populated in the response will be responseMessage. Most parameters in this API are optional. Required elements are noted as such.
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizationRequest">request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AuthorizationPostResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<Pbo.App.MastercardApi.Client.Client.ApiResponse<List<AuthorizationPostResponse>>> PostAuthorizationsUsingPOSTWithHttpInfoAsync(AuthorizationRequest authorizationRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorizationRequest' is set
            if (authorizationRequest == null)
                throw new Pbo.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'authorizationRequest' when calling AuthorizationsApi->PostAuthorizationsUsingPOST");


            Pbo.App.MastercardApi.Client.Client.RequestOptions localVarRequestOptions = new Pbo.App.MastercardApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = authorizationRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<AuthorizationPostResponse>>("/authorizations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthorizationsUsingPOST", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
