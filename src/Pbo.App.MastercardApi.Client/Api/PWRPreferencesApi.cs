/*
 * Pay with Rewards APIs
 *
 * Pay with Rewards allows cardholders to redeem points for purchases made with an enrolled Mastercard card. The following APIs create the Pay with Rewards user experience, and can be used inside a banking app or other mobile apps.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: paywithrewards@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Pbo.App.MastercardApi.Client.Client;
using Pbo.App.MastercardApi.Client.Model;

namespace Pbo.App.MastercardApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPWRPreferencesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a cardholder&#39;s Pay with Rewards contact information and communication preferences. This endpoint is a lighter-weight version of GET /redeemers as it returns fewer data elements.
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the user.</param>
        /// <param name="redemptionType">Redemption type should be PWR. Required.</param>
        /// <param name="userIdType">Type of identifier sent in user_id. Optional. (optional)</param>
        /// <returns>Preferences</returns>
        Preferences GetPreferencesUsingGET(string id, string redemptionType, string userIdType = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a cardholder&#39;s Pay with Rewards contact information and communication preferences. This endpoint is a lighter-weight version of GET /redeemers as it returns fewer data elements.
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the user.</param>
        /// <param name="redemptionType">Redemption type should be PWR. Required.</param>
        /// <param name="userIdType">Type of identifier sent in user_id. Optional. (optional)</param>
        /// <returns>ApiResponse of Preferences</returns>
        ApiResponse<Preferences> GetPreferencesUsingGETWithHttpInfo(string id, string redemptionType, string userIdType = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets a cardholder&#39;s Pay with Rewards preferences, then returns the updated settings as confirmation. Updates are done in real-time.
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the user.</param>
        /// <param name="redemptionType">Redemption type should be PWR.</param>
        /// <param name="setPreferencesRequest">setPreferencesRequest</param>
        /// <returns></returns>
        void SetPreferencesUsingPUT(string id, string redemptionType, SetPreferencesRequest setPreferencesRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets a cardholder&#39;s Pay with Rewards preferences, then returns the updated settings as confirmation. Updates are done in real-time.
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the user.</param>
        /// <param name="redemptionType">Redemption type should be PWR.</param>
        /// <param name="setPreferencesRequest">setPreferencesRequest</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetPreferencesUsingPUTWithHttpInfo(string id, string redemptionType, SetPreferencesRequest setPreferencesRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPWRPreferencesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a cardholder&#39;s Pay with Rewards contact information and communication preferences. This endpoint is a lighter-weight version of GET /redeemers as it returns fewer data elements.
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the user.</param>
        /// <param name="redemptionType">Redemption type should be PWR. Required.</param>
        /// <param name="userIdType">Type of identifier sent in user_id. Optional. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Preferences</returns>
        System.Threading.Tasks.Task<Preferences> GetPreferencesUsingGETAsync(string id, string redemptionType, string userIdType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a cardholder&#39;s Pay with Rewards contact information and communication preferences. This endpoint is a lighter-weight version of GET /redeemers as it returns fewer data elements.
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the user.</param>
        /// <param name="redemptionType">Redemption type should be PWR. Required.</param>
        /// <param name="userIdType">Type of identifier sent in user_id. Optional. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Preferences)</returns>
        System.Threading.Tasks.Task<ApiResponse<Preferences>> GetPreferencesUsingGETWithHttpInfoAsync(string id, string redemptionType, string userIdType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets a cardholder&#39;s Pay with Rewards preferences, then returns the updated settings as confirmation. Updates are done in real-time.
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the user.</param>
        /// <param name="redemptionType">Redemption type should be PWR.</param>
        /// <param name="setPreferencesRequest">setPreferencesRequest</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetPreferencesUsingPUTAsync(string id, string redemptionType, SetPreferencesRequest setPreferencesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets a cardholder&#39;s Pay with Rewards preferences, then returns the updated settings as confirmation. Updates are done in real-time.
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the user.</param>
        /// <param name="redemptionType">Redemption type should be PWR.</param>
        /// <param name="setPreferencesRequest">setPreferencesRequest</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetPreferencesUsingPUTWithHttpInfoAsync(string id, string redemptionType, SetPreferencesRequest setPreferencesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPWRPreferencesApi : IPWRPreferencesApiSync, IPWRPreferencesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PWRPreferencesApi : IPWRPreferencesApi
    {
        private Pbo.App.MastercardApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PWRPreferencesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PWRPreferencesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PWRPreferencesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PWRPreferencesApi(String basePath)
        {
            this.Configuration = Pbo.App.MastercardApi.Client.Client.Configuration.MergeConfigurations(
                Pbo.App.MastercardApi.Client.Client.GlobalConfiguration.Instance,
                new Pbo.App.MastercardApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Pbo.App.MastercardApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Pbo.App.MastercardApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Pbo.App.MastercardApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PWRPreferencesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PWRPreferencesApi(Pbo.App.MastercardApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Pbo.App.MastercardApi.Client.Client.Configuration.MergeConfigurations(
                Pbo.App.MastercardApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Pbo.App.MastercardApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Pbo.App.MastercardApi.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Pbo.App.MastercardApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PWRPreferencesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PWRPreferencesApi(Pbo.App.MastercardApi.Client.Client.ISynchronousClient client, Pbo.App.MastercardApi.Client.Client.IAsynchronousClient asyncClient, Pbo.App.MastercardApi.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Pbo.App.MastercardApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Pbo.App.MastercardApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Pbo.App.MastercardApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Pbo.App.MastercardApi.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Pbo.App.MastercardApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Retrieves a cardholder&#39;s Pay with Rewards contact information and communication preferences. This endpoint is a lighter-weight version of GET /redeemers as it returns fewer data elements.
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the user.</param>
        /// <param name="redemptionType">Redemption type should be PWR. Required.</param>
        /// <param name="userIdType">Type of identifier sent in user_id. Optional. (optional)</param>
        /// <returns>Preferences</returns>
        public Preferences GetPreferencesUsingGET(string id, string redemptionType, string userIdType = default(string))
        {
            Pbo.App.MastercardApi.Client.Client.ApiResponse<Preferences> localVarResponse = GetPreferencesUsingGETWithHttpInfo(id, redemptionType, userIdType);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves a cardholder&#39;s Pay with Rewards contact information and communication preferences. This endpoint is a lighter-weight version of GET /redeemers as it returns fewer data elements.
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the user.</param>
        /// <param name="redemptionType">Redemption type should be PWR. Required.</param>
        /// <param name="userIdType">Type of identifier sent in user_id. Optional. (optional)</param>
        /// <returns>ApiResponse of Preferences</returns>
        public Pbo.App.MastercardApi.Client.Client.ApiResponse<Preferences> GetPreferencesUsingGETWithHttpInfo(string id, string redemptionType, string userIdType = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Pbo.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling PWRPreferencesApi->GetPreferencesUsingGET");

            // verify the required parameter 'redemptionType' is set
            if (redemptionType == null)
                throw new Pbo.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'redemptionType' when calling PWRPreferencesApi->GetPreferencesUsingGET");

            Pbo.App.MastercardApi.Client.Client.RequestOptions localVarRequestOptions = new Pbo.App.MastercardApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Pbo.App.MastercardApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (userIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pbo.App.MastercardApi.Client.Client.ClientUtils.ParameterToMultiMap("", "user_id_type", userIdType));
            }
            localVarRequestOptions.QueryParameters.Add(Pbo.App.MastercardApi.Client.Client.ClientUtils.ParameterToMultiMap("", "redemption_type", redemptionType));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Preferences>("/redeemers/{id}/preferences", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPreferencesUsingGET", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves a cardholder&#39;s Pay with Rewards contact information and communication preferences. This endpoint is a lighter-weight version of GET /redeemers as it returns fewer data elements.
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the user.</param>
        /// <param name="redemptionType">Redemption type should be PWR. Required.</param>
        /// <param name="userIdType">Type of identifier sent in user_id. Optional. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Preferences</returns>
        public async System.Threading.Tasks.Task<Preferences> GetPreferencesUsingGETAsync(string id, string redemptionType, string userIdType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pbo.App.MastercardApi.Client.Client.ApiResponse<Preferences> localVarResponse = await GetPreferencesUsingGETWithHttpInfoAsync(id, redemptionType, userIdType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves a cardholder&#39;s Pay with Rewards contact information and communication preferences. This endpoint is a lighter-weight version of GET /redeemers as it returns fewer data elements.
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the user.</param>
        /// <param name="redemptionType">Redemption type should be PWR. Required.</param>
        /// <param name="userIdType">Type of identifier sent in user_id. Optional. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Preferences)</returns>
        public async System.Threading.Tasks.Task<Pbo.App.MastercardApi.Client.Client.ApiResponse<Preferences>> GetPreferencesUsingGETWithHttpInfoAsync(string id, string redemptionType, string userIdType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Pbo.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling PWRPreferencesApi->GetPreferencesUsingGET");

            // verify the required parameter 'redemptionType' is set
            if (redemptionType == null)
                throw new Pbo.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'redemptionType' when calling PWRPreferencesApi->GetPreferencesUsingGET");


            Pbo.App.MastercardApi.Client.Client.RequestOptions localVarRequestOptions = new Pbo.App.MastercardApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Pbo.App.MastercardApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (userIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pbo.App.MastercardApi.Client.Client.ClientUtils.ParameterToMultiMap("", "user_id_type", userIdType));
            }
            localVarRequestOptions.QueryParameters.Add(Pbo.App.MastercardApi.Client.Client.ClientUtils.ParameterToMultiMap("", "redemption_type", redemptionType));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Preferences>("/redeemers/{id}/preferences", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPreferencesUsingGET", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Sets a cardholder&#39;s Pay with Rewards preferences, then returns the updated settings as confirmation. Updates are done in real-time.
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the user.</param>
        /// <param name="redemptionType">Redemption type should be PWR.</param>
        /// <param name="setPreferencesRequest">setPreferencesRequest</param>
        /// <returns></returns>
        public void SetPreferencesUsingPUT(string id, string redemptionType, SetPreferencesRequest setPreferencesRequest)
        {
            SetPreferencesUsingPUTWithHttpInfo(id, redemptionType, setPreferencesRequest);
        }

        /// <summary>
        ///  Sets a cardholder&#39;s Pay with Rewards preferences, then returns the updated settings as confirmation. Updates are done in real-time.
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the user.</param>
        /// <param name="redemptionType">Redemption type should be PWR.</param>
        /// <param name="setPreferencesRequest">setPreferencesRequest</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Pbo.App.MastercardApi.Client.Client.ApiResponse<Object> SetPreferencesUsingPUTWithHttpInfo(string id, string redemptionType, SetPreferencesRequest setPreferencesRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Pbo.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling PWRPreferencesApi->SetPreferencesUsingPUT");

            // verify the required parameter 'redemptionType' is set
            if (redemptionType == null)
                throw new Pbo.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'redemptionType' when calling PWRPreferencesApi->SetPreferencesUsingPUT");

            // verify the required parameter 'setPreferencesRequest' is set
            if (setPreferencesRequest == null)
                throw new Pbo.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'setPreferencesRequest' when calling PWRPreferencesApi->SetPreferencesUsingPUT");

            Pbo.App.MastercardApi.Client.Client.RequestOptions localVarRequestOptions = new Pbo.App.MastercardApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Pbo.App.MastercardApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Pbo.App.MastercardApi.Client.Client.ClientUtils.ParameterToMultiMap("", "redemption_type", redemptionType));
            localVarRequestOptions.Data = setPreferencesRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/redeemers/{id}/preferences", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetPreferencesUsingPUT", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Sets a cardholder&#39;s Pay with Rewards preferences, then returns the updated settings as confirmation. Updates are done in real-time.
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the user.</param>
        /// <param name="redemptionType">Redemption type should be PWR.</param>
        /// <param name="setPreferencesRequest">setPreferencesRequest</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetPreferencesUsingPUTAsync(string id, string redemptionType, SetPreferencesRequest setPreferencesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SetPreferencesUsingPUTWithHttpInfoAsync(id, redemptionType, setPreferencesRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Sets a cardholder&#39;s Pay with Rewards preferences, then returns the updated settings as confirmation. Updates are done in real-time.
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the user.</param>
        /// <param name="redemptionType">Redemption type should be PWR.</param>
        /// <param name="setPreferencesRequest">setPreferencesRequest</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Pbo.App.MastercardApi.Client.Client.ApiResponse<Object>> SetPreferencesUsingPUTWithHttpInfoAsync(string id, string redemptionType, SetPreferencesRequest setPreferencesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Pbo.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling PWRPreferencesApi->SetPreferencesUsingPUT");

            // verify the required parameter 'redemptionType' is set
            if (redemptionType == null)
                throw new Pbo.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'redemptionType' when calling PWRPreferencesApi->SetPreferencesUsingPUT");

            // verify the required parameter 'setPreferencesRequest' is set
            if (setPreferencesRequest == null)
                throw new Pbo.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'setPreferencesRequest' when calling PWRPreferencesApi->SetPreferencesUsingPUT");


            Pbo.App.MastercardApi.Client.Client.RequestOptions localVarRequestOptions = new Pbo.App.MastercardApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Pbo.App.MastercardApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Pbo.App.MastercardApi.Client.Client.ClientUtils.ParameterToMultiMap("", "redemption_type", redemptionType));
            localVarRequestOptions.Data = setPreferencesRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/redeemers/{id}/preferences", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetPreferencesUsingPUT", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
