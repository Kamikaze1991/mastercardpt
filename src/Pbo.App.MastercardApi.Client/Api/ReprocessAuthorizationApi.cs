/*
 * Pay with Rewards APIs
 *
 * Pay with Rewards allows cardholders to redeem points for purchases made with an enrolled Mastercard card. The following APIs create the Pay with Rewards user experience, and can be used inside a banking app or other mobile apps.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: paywithrewards@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Pbo.App.MastercardApi.Client.Client;
using Pbo.App.MastercardApi.Client.Model;

namespace Pbo.App.MastercardApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReprocessAuthorizationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Re-processes a specific past failed transaction through Pay with Rewards rules. For each program, only transactions with specific response reason codes are eligible for re-processing. Using this call enables a cardholder to redeem points on an past failed transaction.
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique transaction identifier created by Mastercard Rewards System. Required.</param>
        /// <param name="reprocessRequest">request</param>
        /// <returns>ReprocessResponse</returns>
        ReprocessResponse ReprocessAuthorizationsUsingPOST(string id, ReprocessRequest reprocessRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Re-processes a specific past failed transaction through Pay with Rewards rules. For each program, only transactions with specific response reason codes are eligible for re-processing. Using this call enables a cardholder to redeem points on an past failed transaction.
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique transaction identifier created by Mastercard Rewards System. Required.</param>
        /// <param name="reprocessRequest">request</param>
        /// <returns>ApiResponse of ReprocessResponse</returns>
        ApiResponse<ReprocessResponse> ReprocessAuthorizationsUsingPOSTWithHttpInfo(string id, ReprocessRequest reprocessRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReprocessAuthorizationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Re-processes a specific past failed transaction through Pay with Rewards rules. For each program, only transactions with specific response reason codes are eligible for re-processing. Using this call enables a cardholder to redeem points on an past failed transaction.
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique transaction identifier created by Mastercard Rewards System. Required.</param>
        /// <param name="reprocessRequest">request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReprocessResponse</returns>
        System.Threading.Tasks.Task<ReprocessResponse> ReprocessAuthorizationsUsingPOSTAsync(string id, ReprocessRequest reprocessRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Re-processes a specific past failed transaction through Pay with Rewards rules. For each program, only transactions with specific response reason codes are eligible for re-processing. Using this call enables a cardholder to redeem points on an past failed transaction.
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique transaction identifier created by Mastercard Rewards System. Required.</param>
        /// <param name="reprocessRequest">request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReprocessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReprocessResponse>> ReprocessAuthorizationsUsingPOSTWithHttpInfoAsync(string id, ReprocessRequest reprocessRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReprocessAuthorizationApi : IReprocessAuthorizationApiSync, IReprocessAuthorizationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReprocessAuthorizationApi : IReprocessAuthorizationApi
    {
        private Pbo.App.MastercardApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReprocessAuthorizationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReprocessAuthorizationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReprocessAuthorizationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReprocessAuthorizationApi(String basePath)
        {
            this.Configuration = Pbo.App.MastercardApi.Client.Client.Configuration.MergeConfigurations(
                Pbo.App.MastercardApi.Client.Client.GlobalConfiguration.Instance,
                new Pbo.App.MastercardApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Pbo.App.MastercardApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Pbo.App.MastercardApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Pbo.App.MastercardApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReprocessAuthorizationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReprocessAuthorizationApi(Pbo.App.MastercardApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Pbo.App.MastercardApi.Client.Client.Configuration.MergeConfigurations(
                Pbo.App.MastercardApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Pbo.App.MastercardApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Pbo.App.MastercardApi.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Pbo.App.MastercardApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReprocessAuthorizationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ReprocessAuthorizationApi(Pbo.App.MastercardApi.Client.Client.ISynchronousClient client, Pbo.App.MastercardApi.Client.Client.IAsynchronousClient asyncClient, Pbo.App.MastercardApi.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Pbo.App.MastercardApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Pbo.App.MastercardApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Pbo.App.MastercardApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Pbo.App.MastercardApi.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Pbo.App.MastercardApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Re-processes a specific past failed transaction through Pay with Rewards rules. For each program, only transactions with specific response reason codes are eligible for re-processing. Using this call enables a cardholder to redeem points on an past failed transaction.
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique transaction identifier created by Mastercard Rewards System. Required.</param>
        /// <param name="reprocessRequest">request</param>
        /// <returns>ReprocessResponse</returns>
        public ReprocessResponse ReprocessAuthorizationsUsingPOST(string id, ReprocessRequest reprocessRequest)
        {
            Pbo.App.MastercardApi.Client.Client.ApiResponse<ReprocessResponse> localVarResponse = ReprocessAuthorizationsUsingPOSTWithHttpInfo(id, reprocessRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Re-processes a specific past failed transaction through Pay with Rewards rules. For each program, only transactions with specific response reason codes are eligible for re-processing. Using this call enables a cardholder to redeem points on an past failed transaction.
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique transaction identifier created by Mastercard Rewards System. Required.</param>
        /// <param name="reprocessRequest">request</param>
        /// <returns>ApiResponse of ReprocessResponse</returns>
        public Pbo.App.MastercardApi.Client.Client.ApiResponse<ReprocessResponse> ReprocessAuthorizationsUsingPOSTWithHttpInfo(string id, ReprocessRequest reprocessRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Pbo.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ReprocessAuthorizationApi->ReprocessAuthorizationsUsingPOST");

            // verify the required parameter 'reprocessRequest' is set
            if (reprocessRequest == null)
                throw new Pbo.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'reprocessRequest' when calling ReprocessAuthorizationApi->ReprocessAuthorizationsUsingPOST");

            Pbo.App.MastercardApi.Client.Client.RequestOptions localVarRequestOptions = new Pbo.App.MastercardApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Pbo.App.MastercardApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = reprocessRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ReprocessResponse>("/authorizations/{id}/reprocess", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReprocessAuthorizationsUsingPOST", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Re-processes a specific past failed transaction through Pay with Rewards rules. For each program, only transactions with specific response reason codes are eligible for re-processing. Using this call enables a cardholder to redeem points on an past failed transaction.
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique transaction identifier created by Mastercard Rewards System. Required.</param>
        /// <param name="reprocessRequest">request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReprocessResponse</returns>
        public async System.Threading.Tasks.Task<ReprocessResponse> ReprocessAuthorizationsUsingPOSTAsync(string id, ReprocessRequest reprocessRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pbo.App.MastercardApi.Client.Client.ApiResponse<ReprocessResponse> localVarResponse = await ReprocessAuthorizationsUsingPOSTWithHttpInfoAsync(id, reprocessRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Re-processes a specific past failed transaction through Pay with Rewards rules. For each program, only transactions with specific response reason codes are eligible for re-processing. Using this call enables a cardholder to redeem points on an past failed transaction.
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique transaction identifier created by Mastercard Rewards System. Required.</param>
        /// <param name="reprocessRequest">request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReprocessResponse)</returns>
        public async System.Threading.Tasks.Task<Pbo.App.MastercardApi.Client.Client.ApiResponse<ReprocessResponse>> ReprocessAuthorizationsUsingPOSTWithHttpInfoAsync(string id, ReprocessRequest reprocessRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Pbo.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ReprocessAuthorizationApi->ReprocessAuthorizationsUsingPOST");

            // verify the required parameter 'reprocessRequest' is set
            if (reprocessRequest == null)
                throw new Pbo.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'reprocessRequest' when calling ReprocessAuthorizationApi->ReprocessAuthorizationsUsingPOST");


            Pbo.App.MastercardApi.Client.Client.RequestOptions localVarRequestOptions = new Pbo.App.MastercardApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Pbo.App.MastercardApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = reprocessRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ReprocessResponse>("/authorizations/{id}/reprocess", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReprocessAuthorizationsUsingPOST", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
