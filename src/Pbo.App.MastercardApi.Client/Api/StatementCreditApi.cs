/*
 * Pay with Rewards APIs
 *
 * Pay with Rewards allows cardholders to redeem points for purchases made with an enrolled Mastercard card. The following APIs create the Pay with Rewards user experience, and can be used inside a banking app or other mobile apps.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: paywithrewards@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Pbo.App.MastercardApi.Client.Client;
using Pbo.App.MastercardApi.Client.Model;

namespace Pbo.App.MastercardApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStatementCreditApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sends a statement credit to a cardholder based on a Pay with Rewards transaction and/or updates the status of a past transaction. This method must be used together with the outbound &lt;a href &#x3D; \&quot;/pay-with-rewards/documentation/api-reference/auth-notifier/\&quot;&gt;Auth Notifier&lt;/a&gt;. A statement credit can only be applied based on an existing transaction that was processed by Pay with Rewards. This API can be used to update the status of an authorization (for example, from eligible to redeemed) even without sending a statement credit. Only clients with an external points bank who codes to the Mastercard API for points processing need to use this API.
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redemptionRequest">request</param>
        /// <returns>RedemptionResponse</returns>
        RedemptionResponse ApplyStatementCreditUsingPOST(RedemptionRequest redemptionRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sends a statement credit to a cardholder based on a Pay with Rewards transaction and/or updates the status of a past transaction. This method must be used together with the outbound &lt;a href &#x3D; \&quot;/pay-with-rewards/documentation/api-reference/auth-notifier/\&quot;&gt;Auth Notifier&lt;/a&gt;. A statement credit can only be applied based on an existing transaction that was processed by Pay with Rewards. This API can be used to update the status of an authorization (for example, from eligible to redeemed) even without sending a statement credit. Only clients with an external points bank who codes to the Mastercard API for points processing need to use this API.
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redemptionRequest">request</param>
        /// <returns>ApiResponse of RedemptionResponse</returns>
        ApiResponse<RedemptionResponse> ApplyStatementCreditUsingPOSTWithHttpInfo(RedemptionRequest redemptionRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStatementCreditApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sends a statement credit to a cardholder based on a Pay with Rewards transaction and/or updates the status of a past transaction. This method must be used together with the outbound &lt;a href &#x3D; \&quot;/pay-with-rewards/documentation/api-reference/auth-notifier/\&quot;&gt;Auth Notifier&lt;/a&gt;. A statement credit can only be applied based on an existing transaction that was processed by Pay with Rewards. This API can be used to update the status of an authorization (for example, from eligible to redeemed) even without sending a statement credit. Only clients with an external points bank who codes to the Mastercard API for points processing need to use this API.
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redemptionRequest">request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RedemptionResponse</returns>
        System.Threading.Tasks.Task<RedemptionResponse> ApplyStatementCreditUsingPOSTAsync(RedemptionRequest redemptionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sends a statement credit to a cardholder based on a Pay with Rewards transaction and/or updates the status of a past transaction. This method must be used together with the outbound &lt;a href &#x3D; \&quot;/pay-with-rewards/documentation/api-reference/auth-notifier/\&quot;&gt;Auth Notifier&lt;/a&gt;. A statement credit can only be applied based on an existing transaction that was processed by Pay with Rewards. This API can be used to update the status of an authorization (for example, from eligible to redeemed) even without sending a statement credit. Only clients with an external points bank who codes to the Mastercard API for points processing need to use this API.
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redemptionRequest">request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RedemptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RedemptionResponse>> ApplyStatementCreditUsingPOSTWithHttpInfoAsync(RedemptionRequest redemptionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStatementCreditApi : IStatementCreditApiSync, IStatementCreditApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StatementCreditApi : IStatementCreditApi
    {
        private Pbo.App.MastercardApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StatementCreditApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StatementCreditApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatementCreditApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StatementCreditApi(String basePath)
        {
            this.Configuration = Pbo.App.MastercardApi.Client.Client.Configuration.MergeConfigurations(
                Pbo.App.MastercardApi.Client.Client.GlobalConfiguration.Instance,
                new Pbo.App.MastercardApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Pbo.App.MastercardApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Pbo.App.MastercardApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Pbo.App.MastercardApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatementCreditApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StatementCreditApi(Pbo.App.MastercardApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Pbo.App.MastercardApi.Client.Client.Configuration.MergeConfigurations(
                Pbo.App.MastercardApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Pbo.App.MastercardApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Pbo.App.MastercardApi.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Pbo.App.MastercardApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatementCreditApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public StatementCreditApi(Pbo.App.MastercardApi.Client.Client.ISynchronousClient client, Pbo.App.MastercardApi.Client.Client.IAsynchronousClient asyncClient, Pbo.App.MastercardApi.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Pbo.App.MastercardApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Pbo.App.MastercardApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Pbo.App.MastercardApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Pbo.App.MastercardApi.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Pbo.App.MastercardApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Sends a statement credit to a cardholder based on a Pay with Rewards transaction and/or updates the status of a past transaction. This method must be used together with the outbound &lt;a href &#x3D; \&quot;/pay-with-rewards/documentation/api-reference/auth-notifier/\&quot;&gt;Auth Notifier&lt;/a&gt;. A statement credit can only be applied based on an existing transaction that was processed by Pay with Rewards. This API can be used to update the status of an authorization (for example, from eligible to redeemed) even without sending a statement credit. Only clients with an external points bank who codes to the Mastercard API for points processing need to use this API.
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redemptionRequest">request</param>
        /// <returns>RedemptionResponse</returns>
        public RedemptionResponse ApplyStatementCreditUsingPOST(RedemptionRequest redemptionRequest)
        {
            Pbo.App.MastercardApi.Client.Client.ApiResponse<RedemptionResponse> localVarResponse = ApplyStatementCreditUsingPOSTWithHttpInfo(redemptionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Sends a statement credit to a cardholder based on a Pay with Rewards transaction and/or updates the status of a past transaction. This method must be used together with the outbound &lt;a href &#x3D; \&quot;/pay-with-rewards/documentation/api-reference/auth-notifier/\&quot;&gt;Auth Notifier&lt;/a&gt;. A statement credit can only be applied based on an existing transaction that was processed by Pay with Rewards. This API can be used to update the status of an authorization (for example, from eligible to redeemed) even without sending a statement credit. Only clients with an external points bank who codes to the Mastercard API for points processing need to use this API.
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redemptionRequest">request</param>
        /// <returns>ApiResponse of RedemptionResponse</returns>
        public Pbo.App.MastercardApi.Client.Client.ApiResponse<RedemptionResponse> ApplyStatementCreditUsingPOSTWithHttpInfo(RedemptionRequest redemptionRequest)
        {
            // verify the required parameter 'redemptionRequest' is set
            if (redemptionRequest == null)
                throw new Pbo.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'redemptionRequest' when calling StatementCreditApi->ApplyStatementCreditUsingPOST");

            Pbo.App.MastercardApi.Client.Client.RequestOptions localVarRequestOptions = new Pbo.App.MastercardApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = redemptionRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RedemptionResponse>("/redemptions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplyStatementCreditUsingPOST", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Sends a statement credit to a cardholder based on a Pay with Rewards transaction and/or updates the status of a past transaction. This method must be used together with the outbound &lt;a href &#x3D; \&quot;/pay-with-rewards/documentation/api-reference/auth-notifier/\&quot;&gt;Auth Notifier&lt;/a&gt;. A statement credit can only be applied based on an existing transaction that was processed by Pay with Rewards. This API can be used to update the status of an authorization (for example, from eligible to redeemed) even without sending a statement credit. Only clients with an external points bank who codes to the Mastercard API for points processing need to use this API.
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redemptionRequest">request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RedemptionResponse</returns>
        public async System.Threading.Tasks.Task<RedemptionResponse> ApplyStatementCreditUsingPOSTAsync(RedemptionRequest redemptionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pbo.App.MastercardApi.Client.Client.ApiResponse<RedemptionResponse> localVarResponse = await ApplyStatementCreditUsingPOSTWithHttpInfoAsync(redemptionRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Sends a statement credit to a cardholder based on a Pay with Rewards transaction and/or updates the status of a past transaction. This method must be used together with the outbound &lt;a href &#x3D; \&quot;/pay-with-rewards/documentation/api-reference/auth-notifier/\&quot;&gt;Auth Notifier&lt;/a&gt;. A statement credit can only be applied based on an existing transaction that was processed by Pay with Rewards. This API can be used to update the status of an authorization (for example, from eligible to redeemed) even without sending a statement credit. Only clients with an external points bank who codes to the Mastercard API for points processing need to use this API.
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redemptionRequest">request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RedemptionResponse)</returns>
        public async System.Threading.Tasks.Task<Pbo.App.MastercardApi.Client.Client.ApiResponse<RedemptionResponse>> ApplyStatementCreditUsingPOSTWithHttpInfoAsync(RedemptionRequest redemptionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'redemptionRequest' is set
            if (redemptionRequest == null)
                throw new Pbo.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'redemptionRequest' when calling StatementCreditApi->ApplyStatementCreditUsingPOST");


            Pbo.App.MastercardApi.Client.Client.RequestOptions localVarRequestOptions = new Pbo.App.MastercardApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = redemptionRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<RedemptionResponse>("/redemptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplyStatementCreditUsingPOST", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
