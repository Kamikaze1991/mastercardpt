/*
 * Pay with Rewards APIs
 *
 * Pay with Rewards allows cardholders to redeem points for purchases made with an enrolled Mastercard card. The following APIs create the Pay with Rewards user experience, and can be used inside a banking app or other mobile apps.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: paywithrewards@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Pbo.App.MastercardApi.Client.Client;
using Pbo.App.MastercardApi.Client.Model;

namespace Pbo.App.MastercardApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieves a cardholder&#39;s information, including their name, address, communication preferences, and more.&lt;br&gt;&lt;br/&gt; Users are unique cardholders, as compared to Accounts which are unique cards. Each User can have multiple Accounts.
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A system generated unique identifier for the User such as RANCU</param>
        /// <param name="userIdType">Identifier type for the given user or account.The default value is RANCU. (optional)</param>
        /// <returns>UserSearchResponse</returns>
        UserSearchResponse FindUser(string id, string userIdType = default(string));

        /// <summary>
        /// Retrieves a cardholder&#39;s information, including their name, address, communication preferences, and more.&lt;br&gt;&lt;br/&gt; Users are unique cardholders, as compared to Accounts which are unique cards. Each User can have multiple Accounts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A system generated unique identifier for the User such as RANCU</param>
        /// <param name="userIdType">Identifier type for the given user or account.The default value is RANCU. (optional)</param>
        /// <returns>ApiResponse of UserSearchResponse</returns>
        ApiResponse<UserSearchResponse> FindUserWithHttpInfo(string id, string userIdType = default(string));
        /// <summary>
        /// Enrolls a new cardholder and their account. &lt;br/&gt;&lt;br&gt;Users are unique cardholders, as compared to Accounts which are unique cards. Each User can have multiple Accounts.
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEnrollRequest">userEnrollRequest</param>
        /// <returns>UserEnrollResponse</returns>
        UserEnrollResponse MrsUsersPost(UserEnrollRequest userEnrollRequest);

        /// <summary>
        /// Enrolls a new cardholder and their account. &lt;br/&gt;&lt;br&gt;Users are unique cardholders, as compared to Accounts which are unique cards. Each User can have multiple Accounts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEnrollRequest">userEnrollRequest</param>
        /// <returns>ApiResponse of UserEnrollResponse</returns>
        ApiResponse<UserEnrollResponse> MrsUsersPostWithHttpInfo(UserEnrollRequest userEnrollRequest);
        /// <summary>
        /// Updates personal information for currently enrolled cardholders, including their name, contact information, security question, and more.&lt;br/&gt;&lt;br/&gt; &lt;bold&gt;NOTE&amp;#58;&lt;/bold&gt; When calling the endpoint, please ensure that all the attributes are provided with values in the payload even if only a few attributes need to be updated.
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUpdateRequest">userUpdateRequest</param>
        /// <returns></returns>
        void UpdateUser(UserUpdateRequest userUpdateRequest);

        /// <summary>
        /// Updates personal information for currently enrolled cardholders, including their name, contact information, security question, and more.&lt;br/&gt;&lt;br/&gt; &lt;bold&gt;NOTE&amp;#58;&lt;/bold&gt; When calling the endpoint, please ensure that all the attributes are provided with values in the payload even if only a few attributes need to be updated.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUpdateRequest">userUpdateRequest</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateUserWithHttpInfo(UserUpdateRequest userUpdateRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieves a cardholder&#39;s information, including their name, address, communication preferences, and more.&lt;br&gt;&lt;br/&gt; Users are unique cardholders, as compared to Accounts which are unique cards. Each User can have multiple Accounts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A system generated unique identifier for the User such as RANCU</param>
        /// <param name="userIdType">Identifier type for the given user or account.The default value is RANCU. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserSearchResponse</returns>
        System.Threading.Tasks.Task<UserSearchResponse> FindUserAsync(string id, string userIdType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a cardholder&#39;s information, including their name, address, communication preferences, and more.&lt;br&gt;&lt;br/&gt; Users are unique cardholders, as compared to Accounts which are unique cards. Each User can have multiple Accounts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A system generated unique identifier for the User such as RANCU</param>
        /// <param name="userIdType">Identifier type for the given user or account.The default value is RANCU. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSearchResponse>> FindUserWithHttpInfoAsync(string id, string userIdType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Enrolls a new cardholder and their account. &lt;br/&gt;&lt;br&gt;Users are unique cardholders, as compared to Accounts which are unique cards. Each User can have multiple Accounts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEnrollRequest">userEnrollRequest</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserEnrollResponse</returns>
        System.Threading.Tasks.Task<UserEnrollResponse> MrsUsersPostAsync(UserEnrollRequest userEnrollRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Enrolls a new cardholder and their account. &lt;br/&gt;&lt;br&gt;Users are unique cardholders, as compared to Accounts which are unique cards. Each User can have multiple Accounts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEnrollRequest">userEnrollRequest</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserEnrollResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserEnrollResponse>> MrsUsersPostWithHttpInfoAsync(UserEnrollRequest userEnrollRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates personal information for currently enrolled cardholders, including their name, contact information, security question, and more.&lt;br/&gt;&lt;br/&gt; &lt;bold&gt;NOTE&amp;#58;&lt;/bold&gt; When calling the endpoint, please ensure that all the attributes are provided with values in the payload even if only a few attributes need to be updated.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUpdateRequest">userUpdateRequest</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateUserAsync(UserUpdateRequest userUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates personal information for currently enrolled cardholders, including their name, contact information, security question, and more.&lt;br/&gt;&lt;br/&gt; &lt;bold&gt;NOTE&amp;#58;&lt;/bold&gt; When calling the endpoint, please ensure that all the attributes are provided with values in the payload even if only a few attributes need to be updated.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUpdateRequest">userUpdateRequest</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateUserWithHttpInfoAsync(UserUpdateRequest userUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApi : IUserApiSync, IUserApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserApi : IUserApi
    {
        private Pbo.App.MastercardApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserApi(String basePath)
        {
            this.Configuration = Pbo.App.MastercardApi.Client.Client.Configuration.MergeConfigurations(
                Pbo.App.MastercardApi.Client.Client.GlobalConfiguration.Instance,
                new Pbo.App.MastercardApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Pbo.App.MastercardApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Pbo.App.MastercardApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Pbo.App.MastercardApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserApi(Pbo.App.MastercardApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Pbo.App.MastercardApi.Client.Client.Configuration.MergeConfigurations(
                Pbo.App.MastercardApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Pbo.App.MastercardApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Pbo.App.MastercardApi.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Pbo.App.MastercardApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UserApi(Pbo.App.MastercardApi.Client.Client.ISynchronousClient client, Pbo.App.MastercardApi.Client.Client.IAsynchronousClient asyncClient, Pbo.App.MastercardApi.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Pbo.App.MastercardApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Pbo.App.MastercardApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Pbo.App.MastercardApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Pbo.App.MastercardApi.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Pbo.App.MastercardApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieves a cardholder&#39;s information, including their name, address, communication preferences, and more.&lt;br&gt;&lt;br/&gt; Users are unique cardholders, as compared to Accounts which are unique cards. Each User can have multiple Accounts. 
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A system generated unique identifier for the User such as RANCU</param>
        /// <param name="userIdType">Identifier type for the given user or account.The default value is RANCU. (optional)</param>
        /// <returns>UserSearchResponse</returns>
        public UserSearchResponse FindUser(string id, string userIdType = default(string))
        {
            Pbo.App.MastercardApi.Client.Client.ApiResponse<UserSearchResponse> localVarResponse = FindUserWithHttpInfo(id, userIdType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a cardholder&#39;s information, including their name, address, communication preferences, and more.&lt;br&gt;&lt;br/&gt; Users are unique cardholders, as compared to Accounts which are unique cards. Each User can have multiple Accounts. 
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A system generated unique identifier for the User such as RANCU</param>
        /// <param name="userIdType">Identifier type for the given user or account.The default value is RANCU. (optional)</param>
        /// <returns>ApiResponse of UserSearchResponse</returns>
        public Pbo.App.MastercardApi.Client.Client.ApiResponse<UserSearchResponse> FindUserWithHttpInfo(string id, string userIdType = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Pbo.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling UserApi->FindUser");

            Pbo.App.MastercardApi.Client.Client.RequestOptions localVarRequestOptions = new Pbo.App.MastercardApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Pbo.App.MastercardApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (userIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pbo.App.MastercardApi.Client.Client.ClientUtils.ParameterToMultiMap("", "user_id_type", userIdType));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<UserSearchResponse>("/mrs/users/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a cardholder&#39;s information, including their name, address, communication preferences, and more.&lt;br&gt;&lt;br/&gt; Users are unique cardholders, as compared to Accounts which are unique cards. Each User can have multiple Accounts. 
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A system generated unique identifier for the User such as RANCU</param>
        /// <param name="userIdType">Identifier type for the given user or account.The default value is RANCU. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserSearchResponse</returns>
        public async System.Threading.Tasks.Task<UserSearchResponse> FindUserAsync(string id, string userIdType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pbo.App.MastercardApi.Client.Client.ApiResponse<UserSearchResponse> localVarResponse = await FindUserWithHttpInfoAsync(id, userIdType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a cardholder&#39;s information, including their name, address, communication preferences, and more.&lt;br&gt;&lt;br/&gt; Users are unique cardholders, as compared to Accounts which are unique cards. Each User can have multiple Accounts. 
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A system generated unique identifier for the User such as RANCU</param>
        /// <param name="userIdType">Identifier type for the given user or account.The default value is RANCU. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserSearchResponse)</returns>
        public async System.Threading.Tasks.Task<Pbo.App.MastercardApi.Client.Client.ApiResponse<UserSearchResponse>> FindUserWithHttpInfoAsync(string id, string userIdType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Pbo.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling UserApi->FindUser");


            Pbo.App.MastercardApi.Client.Client.RequestOptions localVarRequestOptions = new Pbo.App.MastercardApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Pbo.App.MastercardApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (userIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pbo.App.MastercardApi.Client.Client.ClientUtils.ParameterToMultiMap("", "user_id_type", userIdType));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UserSearchResponse>("/mrs/users/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enrolls a new cardholder and their account. &lt;br/&gt;&lt;br&gt;Users are unique cardholders, as compared to Accounts which are unique cards. Each User can have multiple Accounts. 
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEnrollRequest">userEnrollRequest</param>
        /// <returns>UserEnrollResponse</returns>
        public UserEnrollResponse MrsUsersPost(UserEnrollRequest userEnrollRequest)
        {
            Pbo.App.MastercardApi.Client.Client.ApiResponse<UserEnrollResponse> localVarResponse = MrsUsersPostWithHttpInfo(userEnrollRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Enrolls a new cardholder and their account. &lt;br/&gt;&lt;br&gt;Users are unique cardholders, as compared to Accounts which are unique cards. Each User can have multiple Accounts. 
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEnrollRequest">userEnrollRequest</param>
        /// <returns>ApiResponse of UserEnrollResponse</returns>
        public Pbo.App.MastercardApi.Client.Client.ApiResponse<UserEnrollResponse> MrsUsersPostWithHttpInfo(UserEnrollRequest userEnrollRequest)
        {
            // verify the required parameter 'userEnrollRequest' is set
            if (userEnrollRequest == null)
                throw new Pbo.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'userEnrollRequest' when calling UserApi->MrsUsersPost");

            Pbo.App.MastercardApi.Client.Client.RequestOptions localVarRequestOptions = new Pbo.App.MastercardApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = userEnrollRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UserEnrollResponse>("/mrs/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MrsUsersPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enrolls a new cardholder and their account. &lt;br/&gt;&lt;br&gt;Users are unique cardholders, as compared to Accounts which are unique cards. Each User can have multiple Accounts. 
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEnrollRequest">userEnrollRequest</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserEnrollResponse</returns>
        public async System.Threading.Tasks.Task<UserEnrollResponse> MrsUsersPostAsync(UserEnrollRequest userEnrollRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pbo.App.MastercardApi.Client.Client.ApiResponse<UserEnrollResponse> localVarResponse = await MrsUsersPostWithHttpInfoAsync(userEnrollRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Enrolls a new cardholder and their account. &lt;br/&gt;&lt;br&gt;Users are unique cardholders, as compared to Accounts which are unique cards. Each User can have multiple Accounts. 
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEnrollRequest">userEnrollRequest</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserEnrollResponse)</returns>
        public async System.Threading.Tasks.Task<Pbo.App.MastercardApi.Client.Client.ApiResponse<UserEnrollResponse>> MrsUsersPostWithHttpInfoAsync(UserEnrollRequest userEnrollRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userEnrollRequest' is set
            if (userEnrollRequest == null)
                throw new Pbo.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'userEnrollRequest' when calling UserApi->MrsUsersPost");


            Pbo.App.MastercardApi.Client.Client.RequestOptions localVarRequestOptions = new Pbo.App.MastercardApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = userEnrollRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UserEnrollResponse>("/mrs/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MrsUsersPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates personal information for currently enrolled cardholders, including their name, contact information, security question, and more.&lt;br/&gt;&lt;br/&gt; &lt;bold&gt;NOTE&amp;#58;&lt;/bold&gt; When calling the endpoint, please ensure that all the attributes are provided with values in the payload even if only a few attributes need to be updated. 
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUpdateRequest">userUpdateRequest</param>
        /// <returns></returns>
        public void UpdateUser(UserUpdateRequest userUpdateRequest)
        {
            UpdateUserWithHttpInfo(userUpdateRequest);
        }

        /// <summary>
        /// Updates personal information for currently enrolled cardholders, including their name, contact information, security question, and more.&lt;br/&gt;&lt;br/&gt; &lt;bold&gt;NOTE&amp;#58;&lt;/bold&gt; When calling the endpoint, please ensure that all the attributes are provided with values in the payload even if only a few attributes need to be updated. 
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUpdateRequest">userUpdateRequest</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Pbo.App.MastercardApi.Client.Client.ApiResponse<Object> UpdateUserWithHttpInfo(UserUpdateRequest userUpdateRequest)
        {
            // verify the required parameter 'userUpdateRequest' is set
            if (userUpdateRequest == null)
                throw new Pbo.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'userUpdateRequest' when calling UserApi->UpdateUser");

            Pbo.App.MastercardApi.Client.Client.RequestOptions localVarRequestOptions = new Pbo.App.MastercardApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = userUpdateRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/mrs/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates personal information for currently enrolled cardholders, including their name, contact information, security question, and more.&lt;br/&gt;&lt;br/&gt; &lt;bold&gt;NOTE&amp;#58;&lt;/bold&gt; When calling the endpoint, please ensure that all the attributes are provided with values in the payload even if only a few attributes need to be updated. 
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUpdateRequest">userUpdateRequest</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateUserAsync(UserUpdateRequest userUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateUserWithHttpInfoAsync(userUpdateRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Updates personal information for currently enrolled cardholders, including their name, contact information, security question, and more.&lt;br/&gt;&lt;br/&gt; &lt;bold&gt;NOTE&amp;#58;&lt;/bold&gt; When calling the endpoint, please ensure that all the attributes are provided with values in the payload even if only a few attributes need to be updated. 
        /// </summary>
        /// <exception cref="Pbo.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUpdateRequest">userUpdateRequest</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Pbo.App.MastercardApi.Client.Client.ApiResponse<Object>> UpdateUserWithHttpInfoAsync(UserUpdateRequest userUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userUpdateRequest' is set
            if (userUpdateRequest == null)
                throw new Pbo.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'userUpdateRequest' when calling UserApi->UpdateUser");


            Pbo.App.MastercardApi.Client.Client.RequestOptions localVarRequestOptions = new Pbo.App.MastercardApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pbo.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = userUpdateRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/mrs/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
