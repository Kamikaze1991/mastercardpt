/*
 * Pay with Rewards APIs
 *
 * Pay with Rewards allows cardholders to redeem points for purchases made with an enrolled Mastercard card. The following APIs create the Pay with Rewards user experience, and can be used inside a banking app or other mobile apps.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: paywithrewards@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Pbo.App.MastercardApi.Client.Client.OpenAPIDateConverter;

namespace Pbo.App.MastercardApi.Client.Model
{
    /// <summary>
    /// Account
    /// </summary>
    [DataContract(Name = "Account")]
    public partial class Account : IEquatable<Account>, IValidatableObject
    {
        /// <summary>
        /// Status of the user&#39;s account. Valid values are GOOD_STANDING, REDEEM_ONLY, NEW, ON_HOLD, CANCELLED, INACTIVE.
        /// </summary>
        /// <value>Status of the user&#39;s account. Valid values are GOOD_STANDING, REDEEM_ONLY, NEW, ON_HOLD, CANCELLED, INACTIVE.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PcloAccountStatusCodeEnum
        {
            /// <summary>
            /// Enum NEW for value: NEW
            /// </summary>
            [EnumMember(Value = "NEW")]
            NEW = 1,

            /// <summary>
            /// Enum GOODSTANDING for value: GOOD_STANDING
            /// </summary>
            [EnumMember(Value = "GOOD_STANDING")]
            GOODSTANDING = 2,

            /// <summary>
            /// Enum REDEEMONLY for value: REDEEM_ONLY
            /// </summary>
            [EnumMember(Value = "REDEEM_ONLY")]
            REDEEMONLY = 3,

            /// <summary>
            /// Enum CANCELLED for value: CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLED = 4,

            /// <summary>
            /// Enum ONHOLD for value: ON_HOLD
            /// </summary>
            [EnumMember(Value = "ON_HOLD")]
            ONHOLD = 5,

            /// <summary>
            /// Enum INACTIVE for value: INACTIVE
            /// </summary>
            [EnumMember(Value = "INACTIVE")]
            INACTIVE = 6

        }

        /// <summary>
        /// Status of the user&#39;s account. Valid values are GOOD_STANDING, REDEEM_ONLY, NEW, ON_HOLD, CANCELLED, INACTIVE.
        /// </summary>
        /// <value>Status of the user&#39;s account. Valid values are GOOD_STANDING, REDEEM_ONLY, NEW, ON_HOLD, CANCELLED, INACTIVE.</value>
        [DataMember(Name = "pcloAccountStatusCode", EmitDefaultValue = false)]
        public PcloAccountStatusCodeEnum? PcloAccountStatusCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Account" /> class.
        /// </summary>
        /// <param name="accountId">The unique identifier for the given account..</param>
        /// <param name="accountIdType">Identifier type for the given account. Possible values are BAN (the Bank Account Number) and RANAC (the unique account identifier assigned by Mastercard and provided to the client in the account enrollment).</param>
        /// <param name="status">Status of the user&#39;s account. Valid values are GOOD_STANDING, REDEEM_ONLY, NEW, ON_HOLD, CANCELLED, INACTIVE..</param>
        /// <param name="productCode">The account’s associated card product type as configured during the implementation of the program..</param>
        /// <param name="programIdentifier">Program identifier for the program in which the cardholder is enrolled. The Program ID is created by Mastercard Rewards System..</param>
        /// <param name="openDate">The date of account opening as defined by the client..</param>
        /// <param name="enrollmentDate">The date for when the account becomes eligible for rewards program. If undefined, enrollment date is defaulted to the date when Mastercard processes the enrollment..</param>
        /// <param name="accruePoints">This specifies if the account can accrue points. It is used in conjunction with Account Status to define earn and burn behavior for the account..</param>
        /// <param name="householdToken">This field ties together multiple User accounts into one household.  This value is typically assigned by the Client and sent with the batch enrollment file.  To use this field, an MRS Program must be configured to support a Household Token value that is externally provided by the Client..</param>
        /// <param name="primaryAccount">Identifies if the account is primary for the User. A User may only have 1 primary account.  In situations where householding is used, there may only be 1 primary account in the household, regardless of how many User accounts make up that household.  A value of true indicates that the account is primary for the User or the household..</param>
        /// <param name="companyIca">Interbank Card Association number assigned by Mastercard to the financial institution..</param>
        /// <param name="accountFirstFour">The first 4 digits of the account number..</param>
        /// <param name="accountLastFour">The last 4 digits of the account number..</param>
        /// <param name="pcloAccountStatusCode">Status of the user&#39;s account. Valid values are GOOD_STANDING, REDEEM_ONLY, NEW, ON_HOLD, CANCELLED, INACTIVE..</param>
        /// <param name="userDefined1">Custom fields defined by the user..</param>
        /// <param name="userDefined2">Custom fields defined by the user..</param>
        /// <param name="userDefined3">Custom fields defined by the user..</param>
        /// <param name="userDefined4">Custom fields defined by the user..</param>
        /// <param name="userDefined5">Custom fields defined by the user..</param>
        /// <param name="userDefined6">Custom fields defined by the user..</param>
        /// <param name="userDefined7">Custom fields defined by the user..</param>
        /// <param name="userDefined8">Custom fields defined by the user..</param>
        public Account(string accountId = default(string), string accountIdType = default(string), string status = default(string), string productCode = default(string), string programIdentifier = default(string), DateTime openDate = default(DateTime), DateTime enrollmentDate = default(DateTime), bool accruePoints = default(bool), string householdToken = default(string), bool primaryAccount = default(bool), long companyIca = default(long), string accountFirstFour = default(string), string accountLastFour = default(string), PcloAccountStatusCodeEnum? pcloAccountStatusCode = default(PcloAccountStatusCodeEnum?), string userDefined1 = default(string), string userDefined2 = default(string), string userDefined3 = default(string), string userDefined4 = default(string), string userDefined5 = default(string), string userDefined6 = default(string), string userDefined7 = default(string), string userDefined8 = default(string))
        {
            this.AccountId = accountId;
            this.AccountIdType = accountIdType;
            this.Status = status;
            this.ProductCode = productCode;
            this.ProgramIdentifier = programIdentifier;
            this.OpenDate = openDate;
            this.EnrollmentDate = enrollmentDate;
            this.AccruePoints = accruePoints;
            this.HouseholdToken = householdToken;
            this.PrimaryAccount = primaryAccount;
            this.CompanyIca = companyIca;
            this.AccountFirstFour = accountFirstFour;
            this.AccountLastFour = accountLastFour;
            this.PcloAccountStatusCode = pcloAccountStatusCode;
            this.UserDefined1 = userDefined1;
            this.UserDefined2 = userDefined2;
            this.UserDefined3 = userDefined3;
            this.UserDefined4 = userDefined4;
            this.UserDefined5 = userDefined5;
            this.UserDefined6 = userDefined6;
            this.UserDefined7 = userDefined7;
            this.UserDefined8 = userDefined8;
        }

        /// <summary>
        /// The unique identifier for the given account.
        /// </summary>
        /// <value>The unique identifier for the given account.</value>
        [DataMember(Name = "accountId", EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Identifier type for the given account. Possible values are BAN (the Bank Account Number) and RANAC (the unique account identifier assigned by Mastercard and provided to the client in the account enrollment)
        /// </summary>
        /// <value>Identifier type for the given account. Possible values are BAN (the Bank Account Number) and RANAC (the unique account identifier assigned by Mastercard and provided to the client in the account enrollment)</value>
        [DataMember(Name = "accountIdType", EmitDefaultValue = false)]
        public string AccountIdType { get; set; }

        /// <summary>
        /// Status of the user&#39;s account. Valid values are GOOD_STANDING, REDEEM_ONLY, NEW, ON_HOLD, CANCELLED, INACTIVE.
        /// </summary>
        /// <value>Status of the user&#39;s account. Valid values are GOOD_STANDING, REDEEM_ONLY, NEW, ON_HOLD, CANCELLED, INACTIVE.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// The account’s associated card product type as configured during the implementation of the program.
        /// </summary>
        /// <value>The account’s associated card product type as configured during the implementation of the program.</value>
        [DataMember(Name = "productCode", EmitDefaultValue = false)]
        public string ProductCode { get; set; }

        /// <summary>
        /// Program identifier for the program in which the cardholder is enrolled. The Program ID is created by Mastercard Rewards System.
        /// </summary>
        /// <value>Program identifier for the program in which the cardholder is enrolled. The Program ID is created by Mastercard Rewards System.</value>
        [DataMember(Name = "programIdentifier", EmitDefaultValue = false)]
        public string ProgramIdentifier { get; set; }

        /// <summary>
        /// The date of account opening as defined by the client.
        /// </summary>
        /// <value>The date of account opening as defined by the client.</value>
        [DataMember(Name = "openDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime OpenDate { get; set; }

        /// <summary>
        /// The date for when the account becomes eligible for rewards program. If undefined, enrollment date is defaulted to the date when Mastercard processes the enrollment.
        /// </summary>
        /// <value>The date for when the account becomes eligible for rewards program. If undefined, enrollment date is defaulted to the date when Mastercard processes the enrollment.</value>
        [DataMember(Name = "enrollmentDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime EnrollmentDate { get; set; }

        /// <summary>
        /// This specifies if the account can accrue points. It is used in conjunction with Account Status to define earn and burn behavior for the account.
        /// </summary>
        /// <value>This specifies if the account can accrue points. It is used in conjunction with Account Status to define earn and burn behavior for the account.</value>
        [DataMember(Name = "accruePoints", EmitDefaultValue = false)]
        public bool AccruePoints { get; set; }

        /// <summary>
        /// This field ties together multiple User accounts into one household.  This value is typically assigned by the Client and sent with the batch enrollment file.  To use this field, an MRS Program must be configured to support a Household Token value that is externally provided by the Client.
        /// </summary>
        /// <value>This field ties together multiple User accounts into one household.  This value is typically assigned by the Client and sent with the batch enrollment file.  To use this field, an MRS Program must be configured to support a Household Token value that is externally provided by the Client.</value>
        [DataMember(Name = "householdToken", EmitDefaultValue = false)]
        public string HouseholdToken { get; set; }

        /// <summary>
        /// Identifies if the account is primary for the User. A User may only have 1 primary account.  In situations where householding is used, there may only be 1 primary account in the household, regardless of how many User accounts make up that household.  A value of true indicates that the account is primary for the User or the household.
        /// </summary>
        /// <value>Identifies if the account is primary for the User. A User may only have 1 primary account.  In situations where householding is used, there may only be 1 primary account in the household, regardless of how many User accounts make up that household.  A value of true indicates that the account is primary for the User or the household.</value>
        [DataMember(Name = "primaryAccount", EmitDefaultValue = false)]
        public bool PrimaryAccount { get; set; }

        /// <summary>
        /// Interbank Card Association number assigned by Mastercard to the financial institution.
        /// </summary>
        /// <value>Interbank Card Association number assigned by Mastercard to the financial institution.</value>
        [DataMember(Name = "companyIca", EmitDefaultValue = false)]
        public long CompanyIca { get; set; }

        /// <summary>
        /// The first 4 digits of the account number.
        /// </summary>
        /// <value>The first 4 digits of the account number.</value>
        [DataMember(Name = "accountFirstFour", EmitDefaultValue = false)]
        public string AccountFirstFour { get; set; }

        /// <summary>
        /// The last 4 digits of the account number.
        /// </summary>
        /// <value>The last 4 digits of the account number.</value>
        [DataMember(Name = "accountLastFour", EmitDefaultValue = false)]
        public string AccountLastFour { get; set; }

        /// <summary>
        /// Custom fields defined by the user.
        /// </summary>
        /// <value>Custom fields defined by the user.</value>
        [DataMember(Name = "userDefined1", EmitDefaultValue = false)]
        public string UserDefined1 { get; set; }

        /// <summary>
        /// Custom fields defined by the user.
        /// </summary>
        /// <value>Custom fields defined by the user.</value>
        [DataMember(Name = "userDefined2", EmitDefaultValue = false)]
        public string UserDefined2 { get; set; }

        /// <summary>
        /// Custom fields defined by the user.
        /// </summary>
        /// <value>Custom fields defined by the user.</value>
        [DataMember(Name = "userDefined3", EmitDefaultValue = false)]
        public string UserDefined3 { get; set; }

        /// <summary>
        /// Custom fields defined by the user.
        /// </summary>
        /// <value>Custom fields defined by the user.</value>
        [DataMember(Name = "userDefined4", EmitDefaultValue = false)]
        public string UserDefined4 { get; set; }

        /// <summary>
        /// Custom fields defined by the user.
        /// </summary>
        /// <value>Custom fields defined by the user.</value>
        [DataMember(Name = "userDefined5", EmitDefaultValue = false)]
        public string UserDefined5 { get; set; }

        /// <summary>
        /// Custom fields defined by the user.
        /// </summary>
        /// <value>Custom fields defined by the user.</value>
        [DataMember(Name = "userDefined6", EmitDefaultValue = false)]
        public string UserDefined6 { get; set; }

        /// <summary>
        /// Custom fields defined by the user.
        /// </summary>
        /// <value>Custom fields defined by the user.</value>
        [DataMember(Name = "userDefined7", EmitDefaultValue = false)]
        public string UserDefined7 { get; set; }

        /// <summary>
        /// Custom fields defined by the user.
        /// </summary>
        /// <value>Custom fields defined by the user.</value>
        [DataMember(Name = "userDefined8", EmitDefaultValue = false)]
        public string UserDefined8 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Account {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountIdType: ").Append(AccountIdType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  ProgramIdentifier: ").Append(ProgramIdentifier).Append("\n");
            sb.Append("  OpenDate: ").Append(OpenDate).Append("\n");
            sb.Append("  EnrollmentDate: ").Append(EnrollmentDate).Append("\n");
            sb.Append("  AccruePoints: ").Append(AccruePoints).Append("\n");
            sb.Append("  HouseholdToken: ").Append(HouseholdToken).Append("\n");
            sb.Append("  PrimaryAccount: ").Append(PrimaryAccount).Append("\n");
            sb.Append("  CompanyIca: ").Append(CompanyIca).Append("\n");
            sb.Append("  AccountFirstFour: ").Append(AccountFirstFour).Append("\n");
            sb.Append("  AccountLastFour: ").Append(AccountLastFour).Append("\n");
            sb.Append("  PcloAccountStatusCode: ").Append(PcloAccountStatusCode).Append("\n");
            sb.Append("  UserDefined1: ").Append(UserDefined1).Append("\n");
            sb.Append("  UserDefined2: ").Append(UserDefined2).Append("\n");
            sb.Append("  UserDefined3: ").Append(UserDefined3).Append("\n");
            sb.Append("  UserDefined4: ").Append(UserDefined4).Append("\n");
            sb.Append("  UserDefined5: ").Append(UserDefined5).Append("\n");
            sb.Append("  UserDefined6: ").Append(UserDefined6).Append("\n");
            sb.Append("  UserDefined7: ").Append(UserDefined7).Append("\n");
            sb.Append("  UserDefined8: ").Append(UserDefined8).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Account);
        }

        /// <summary>
        /// Returns true if Account instances are equal
        /// </summary>
        /// <param name="input">Instance of Account to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Account input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.AccountIdType == input.AccountIdType ||
                    (this.AccountIdType != null &&
                    this.AccountIdType.Equals(input.AccountIdType))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.ProductCode == input.ProductCode ||
                    (this.ProductCode != null &&
                    this.ProductCode.Equals(input.ProductCode))
                ) && 
                (
                    this.ProgramIdentifier == input.ProgramIdentifier ||
                    (this.ProgramIdentifier != null &&
                    this.ProgramIdentifier.Equals(input.ProgramIdentifier))
                ) && 
                (
                    this.OpenDate == input.OpenDate ||
                    (this.OpenDate != null &&
                    this.OpenDate.Equals(input.OpenDate))
                ) && 
                (
                    this.EnrollmentDate == input.EnrollmentDate ||
                    (this.EnrollmentDate != null &&
                    this.EnrollmentDate.Equals(input.EnrollmentDate))
                ) && 
                (
                    this.AccruePoints == input.AccruePoints ||
                    this.AccruePoints.Equals(input.AccruePoints)
                ) && 
                (
                    this.HouseholdToken == input.HouseholdToken ||
                    (this.HouseholdToken != null &&
                    this.HouseholdToken.Equals(input.HouseholdToken))
                ) && 
                (
                    this.PrimaryAccount == input.PrimaryAccount ||
                    this.PrimaryAccount.Equals(input.PrimaryAccount)
                ) && 
                (
                    this.CompanyIca == input.CompanyIca ||
                    this.CompanyIca.Equals(input.CompanyIca)
                ) && 
                (
                    this.AccountFirstFour == input.AccountFirstFour ||
                    (this.AccountFirstFour != null &&
                    this.AccountFirstFour.Equals(input.AccountFirstFour))
                ) && 
                (
                    this.AccountLastFour == input.AccountLastFour ||
                    (this.AccountLastFour != null &&
                    this.AccountLastFour.Equals(input.AccountLastFour))
                ) && 
                (
                    this.PcloAccountStatusCode == input.PcloAccountStatusCode ||
                    this.PcloAccountStatusCode.Equals(input.PcloAccountStatusCode)
                ) && 
                (
                    this.UserDefined1 == input.UserDefined1 ||
                    (this.UserDefined1 != null &&
                    this.UserDefined1.Equals(input.UserDefined1))
                ) && 
                (
                    this.UserDefined2 == input.UserDefined2 ||
                    (this.UserDefined2 != null &&
                    this.UserDefined2.Equals(input.UserDefined2))
                ) && 
                (
                    this.UserDefined3 == input.UserDefined3 ||
                    (this.UserDefined3 != null &&
                    this.UserDefined3.Equals(input.UserDefined3))
                ) && 
                (
                    this.UserDefined4 == input.UserDefined4 ||
                    (this.UserDefined4 != null &&
                    this.UserDefined4.Equals(input.UserDefined4))
                ) && 
                (
                    this.UserDefined5 == input.UserDefined5 ||
                    (this.UserDefined5 != null &&
                    this.UserDefined5.Equals(input.UserDefined5))
                ) && 
                (
                    this.UserDefined6 == input.UserDefined6 ||
                    (this.UserDefined6 != null &&
                    this.UserDefined6.Equals(input.UserDefined6))
                ) && 
                (
                    this.UserDefined7 == input.UserDefined7 ||
                    (this.UserDefined7 != null &&
                    this.UserDefined7.Equals(input.UserDefined7))
                ) && 
                (
                    this.UserDefined8 == input.UserDefined8 ||
                    (this.UserDefined8 != null &&
                    this.UserDefined8.Equals(input.UserDefined8))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.AccountIdType != null)
                    hashCode = hashCode * 59 + this.AccountIdType.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.ProductCode != null)
                    hashCode = hashCode * 59 + this.ProductCode.GetHashCode();
                if (this.ProgramIdentifier != null)
                    hashCode = hashCode * 59 + this.ProgramIdentifier.GetHashCode();
                if (this.OpenDate != null)
                    hashCode = hashCode * 59 + this.OpenDate.GetHashCode();
                if (this.EnrollmentDate != null)
                    hashCode = hashCode * 59 + this.EnrollmentDate.GetHashCode();
                hashCode = hashCode * 59 + this.AccruePoints.GetHashCode();
                if (this.HouseholdToken != null)
                    hashCode = hashCode * 59 + this.HouseholdToken.GetHashCode();
                hashCode = hashCode * 59 + this.PrimaryAccount.GetHashCode();
                hashCode = hashCode * 59 + this.CompanyIca.GetHashCode();
                if (this.AccountFirstFour != null)
                    hashCode = hashCode * 59 + this.AccountFirstFour.GetHashCode();
                if (this.AccountLastFour != null)
                    hashCode = hashCode * 59 + this.AccountLastFour.GetHashCode();
                hashCode = hashCode * 59 + this.PcloAccountStatusCode.GetHashCode();
                if (this.UserDefined1 != null)
                    hashCode = hashCode * 59 + this.UserDefined1.GetHashCode();
                if (this.UserDefined2 != null)
                    hashCode = hashCode * 59 + this.UserDefined2.GetHashCode();
                if (this.UserDefined3 != null)
                    hashCode = hashCode * 59 + this.UserDefined3.GetHashCode();
                if (this.UserDefined4 != null)
                    hashCode = hashCode * 59 + this.UserDefined4.GetHashCode();
                if (this.UserDefined5 != null)
                    hashCode = hashCode * 59 + this.UserDefined5.GetHashCode();
                if (this.UserDefined6 != null)
                    hashCode = hashCode * 59 + this.UserDefined6.GetHashCode();
                if (this.UserDefined7 != null)
                    hashCode = hashCode * 59 + this.UserDefined7.GetHashCode();
                if (this.UserDefined8 != null)
                    hashCode = hashCode * 59 + this.UserDefined8.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AccountId (string) maxLength
            if(this.AccountId != null && this.AccountId.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountId, length must be less than 30.", new [] { "AccountId" });
            }

            // AccountId (string) minLength
            if(this.AccountId != null && this.AccountId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountId, length must be greater than 1.", new [] { "AccountId" });
            }

            // AccountIdType (string) maxLength
            if(this.AccountIdType != null && this.AccountIdType.Length > 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountIdType, length must be less than 5.", new [] { "AccountIdType" });
            }

            // AccountIdType (string) minLength
            if(this.AccountIdType != null && this.AccountIdType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountIdType, length must be greater than 1.", new [] { "AccountIdType" });
            }

            // Status (string) maxLength
            if(this.Status != null && this.Status.Length > 13)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Status, length must be less than 13.", new [] { "Status" });
            }

            // Status (string) minLength
            if(this.Status != null && this.Status.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Status, length must be greater than 3.", new [] { "Status" });
            }

            // ProductCode (string) maxLength
            if(this.ProductCode != null && this.ProductCode.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProductCode, length must be less than 20.", new [] { "ProductCode" });
            }

            // ProductCode (string) minLength
            if(this.ProductCode != null && this.ProductCode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProductCode, length must be greater than 1.", new [] { "ProductCode" });
            }

            // ProgramIdentifier (string) maxLength
            if(this.ProgramIdentifier != null && this.ProgramIdentifier.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProgramIdentifier, length must be less than 40.", new [] { "ProgramIdentifier" });
            }

            // ProgramIdentifier (string) minLength
            if(this.ProgramIdentifier != null && this.ProgramIdentifier.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProgramIdentifier, length must be greater than 1.", new [] { "ProgramIdentifier" });
            }

            // HouseholdToken (string) maxLength
            if(this.HouseholdToken != null && this.HouseholdToken.Length > 140)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HouseholdToken, length must be less than 140.", new [] { "HouseholdToken" });
            }

            // HouseholdToken (string) minLength
            if(this.HouseholdToken != null && this.HouseholdToken.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HouseholdToken, length must be greater than 0.", new [] { "HouseholdToken" });
            }

            // AccountFirstFour (string) maxLength
            if(this.AccountFirstFour != null && this.AccountFirstFour.Length > 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountFirstFour, length must be less than 4.", new [] { "AccountFirstFour" });
            }

            // AccountFirstFour (string) minLength
            if(this.AccountFirstFour != null && this.AccountFirstFour.Length < 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountFirstFour, length must be greater than 4.", new [] { "AccountFirstFour" });
            }

            // AccountLastFour (string) maxLength
            if(this.AccountLastFour != null && this.AccountLastFour.Length > 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountLastFour, length must be less than 4.", new [] { "AccountLastFour" });
            }

            // AccountLastFour (string) minLength
            if(this.AccountLastFour != null && this.AccountLastFour.Length < 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountLastFour, length must be greater than 4.", new [] { "AccountLastFour" });
            }

            // UserDefined1 (string) maxLength
            if(this.UserDefined1 != null && this.UserDefined1.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserDefined1, length must be less than 40.", new [] { "UserDefined1" });
            }

            // UserDefined1 (string) minLength
            if(this.UserDefined1 != null && this.UserDefined1.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserDefined1, length must be greater than 0.", new [] { "UserDefined1" });
            }

            // UserDefined2 (string) maxLength
            if(this.UserDefined2 != null && this.UserDefined2.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserDefined2, length must be less than 40.", new [] { "UserDefined2" });
            }

            // UserDefined2 (string) minLength
            if(this.UserDefined2 != null && this.UserDefined2.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserDefined2, length must be greater than 0.", new [] { "UserDefined2" });
            }

            // UserDefined3 (string) maxLength
            if(this.UserDefined3 != null && this.UserDefined3.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserDefined3, length must be less than 40.", new [] { "UserDefined3" });
            }

            // UserDefined3 (string) minLength
            if(this.UserDefined3 != null && this.UserDefined3.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserDefined3, length must be greater than 0.", new [] { "UserDefined3" });
            }

            // UserDefined4 (string) maxLength
            if(this.UserDefined4 != null && this.UserDefined4.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserDefined4, length must be less than 40.", new [] { "UserDefined4" });
            }

            // UserDefined4 (string) minLength
            if(this.UserDefined4 != null && this.UserDefined4.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserDefined4, length must be greater than 0.", new [] { "UserDefined4" });
            }

            // UserDefined5 (string) maxLength
            if(this.UserDefined5 != null && this.UserDefined5.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserDefined5, length must be less than 20.", new [] { "UserDefined5" });
            }

            // UserDefined5 (string) minLength
            if(this.UserDefined5 != null && this.UserDefined5.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserDefined5, length must be greater than 0.", new [] { "UserDefined5" });
            }

            // UserDefined6 (string) maxLength
            if(this.UserDefined6 != null && this.UserDefined6.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserDefined6, length must be less than 20.", new [] { "UserDefined6" });
            }

            // UserDefined6 (string) minLength
            if(this.UserDefined6 != null && this.UserDefined6.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserDefined6, length must be greater than 0.", new [] { "UserDefined6" });
            }

            // UserDefined7 (string) maxLength
            if(this.UserDefined7 != null && this.UserDefined7.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserDefined7, length must be less than 20.", new [] { "UserDefined7" });
            }

            // UserDefined7 (string) minLength
            if(this.UserDefined7 != null && this.UserDefined7.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserDefined7, length must be greater than 0.", new [] { "UserDefined7" });
            }

            // UserDefined8 (string) maxLength
            if(this.UserDefined8 != null && this.UserDefined8.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserDefined8, length must be less than 20.", new [] { "UserDefined8" });
            }

            // UserDefined8 (string) minLength
            if(this.UserDefined8 != null && this.UserDefined8.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserDefined8, length must be greater than 0.", new [] { "UserDefined8" });
            }

            yield break;
        }
    }

}
