/*
 * Pay with Rewards APIs
 *
 * Pay with Rewards allows cardholders to redeem points for purchases made with an enrolled Mastercard card. The following APIs create the Pay with Rewards user experience, and can be used inside a banking app or other mobile apps.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: paywithrewards@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Pbo.App.MastercardApi.Client.Client.OpenAPIDateConverter;

namespace Pbo.App.MastercardApi.Client.Model
{
    /// <summary>
    /// AccountEnrollResponse
    /// </summary>
    [DataContract(Name = "AccountEnrollResponse")]
    public partial class AccountEnrollResponse : IEquatable<AccountEnrollResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountEnrollResponse" /> class.
        /// </summary>
        /// <param name="accountIdType">account identifier type such as RANAC.</param>
        /// <param name="accountId">The unique identifier for the given account..</param>
        public AccountEnrollResponse(string accountIdType = default(string), string accountId = default(string))
        {
            this.AccountIdType = accountIdType;
            this.AccountId = accountId;
        }

        /// <summary>
        /// account identifier type such as RANAC
        /// </summary>
        /// <value>account identifier type such as RANAC</value>
        [DataMember(Name = "accountIdType", EmitDefaultValue = false)]
        public string AccountIdType { get; set; }

        /// <summary>
        /// The unique identifier for the given account.
        /// </summary>
        /// <value>The unique identifier for the given account.</value>
        [DataMember(Name = "accountId", EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountEnrollResponse {\n");
            sb.Append("  AccountIdType: ").Append(AccountIdType).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountEnrollResponse);
        }

        /// <summary>
        /// Returns true if AccountEnrollResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountEnrollResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountEnrollResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountIdType == input.AccountIdType ||
                    (this.AccountIdType != null &&
                    this.AccountIdType.Equals(input.AccountIdType))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountIdType != null)
                    hashCode = hashCode * 59 + this.AccountIdType.GetHashCode();
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AccountIdType (string) maxLength
            if(this.AccountIdType != null && this.AccountIdType.Length > 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountIdType, length must be less than 5.", new [] { "AccountIdType" });
            }

            // AccountIdType (string) minLength
            if(this.AccountIdType != null && this.AccountIdType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountIdType, length must be greater than 1.", new [] { "AccountIdType" });
            }

            // AccountId (string) maxLength
            if(this.AccountId != null && this.AccountId.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountId, length must be less than 30.", new [] { "AccountId" });
            }

            // AccountId (string) minLength
            if(this.AccountId != null && this.AccountId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountId, length must be greater than 1.", new [] { "AccountId" });
            }

            yield break;
        }
    }

}
