/*
 * Pay with Rewards APIs
 *
 * Pay with Rewards allows cardholders to redeem points for purchases made with an enrolled Mastercard card. The following APIs create the Pay with Rewards user experience, and can be used inside a banking app or other mobile apps.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: paywithrewards@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Pbo.App.MastercardApi.Client.Client.OpenAPIDateConverter;

namespace Pbo.App.MastercardApi.Client.Model
{
    /// <summary>
    /// Holds account level details such as accountStatus, minimum and maximum purchase threshold and other parameters.
    /// </summary>
    [DataContract(Name = "AccountInfo")]
    public partial class AccountInfo : IEquatable<AccountInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountInfo" /> class.
        /// </summary>
        /// <param name="accountStatus">Status of the consumer&#39;s account. Valid values are GOODSTANDING(1), REDEEMONLY(0), NEW(2), ONHOLD(4), CANCELLED(3), INACTIVE(5)..</param>
        /// <param name="lastFourDigitsOfCard">Last four digits of cardholder&#39;s account number..</param>
        /// <param name="minProgramPurchaseThreshold">Minimum purchase amount eligible for Pay with Rewards..</param>
        /// <param name="maxProgramPurchaseThreshold">Maximum purchase amount eligible for Pay With Rewards..</param>
        /// <param name="programId">Program identifier for the program in which the cardholder is enrolled. Program Id is created by Mastercard Rewards System..</param>
        /// <param name="redemptionEnrollStatus">Status of the cardholder&#39;s account where cardholder has selected for the rebate to be processed on an account other than the transacting card account. Possible values are \&quot;I\&quot;, \&quot;A\&quot;. \&quot;I\&quot; indicates inactive, \&quot;A\&quot; indicates active. This field is not applicable if the cardholder rebate account is same as their card account..</param>
        public AccountInfo(string accountStatus = default(string), string lastFourDigitsOfCard = default(string), string minProgramPurchaseThreshold = default(string), string maxProgramPurchaseThreshold = default(string), string programId = default(string), string redemptionEnrollStatus = default(string))
        {
            this.AccountStatus = accountStatus;
            this.LastFourDigitsOfCard = lastFourDigitsOfCard;
            this.MinProgramPurchaseThreshold = minProgramPurchaseThreshold;
            this.MaxProgramPurchaseThreshold = maxProgramPurchaseThreshold;
            this.ProgramId = programId;
            this.RedemptionEnrollStatus = redemptionEnrollStatus;
        }

        /// <summary>
        /// Status of the consumer&#39;s account. Valid values are GOODSTANDING(1), REDEEMONLY(0), NEW(2), ONHOLD(4), CANCELLED(3), INACTIVE(5).
        /// </summary>
        /// <value>Status of the consumer&#39;s account. Valid values are GOODSTANDING(1), REDEEMONLY(0), NEW(2), ONHOLD(4), CANCELLED(3), INACTIVE(5).</value>
        [DataMember(Name = "accountStatus", EmitDefaultValue = false)]
        public string AccountStatus { get; set; }

        /// <summary>
        /// Last four digits of cardholder&#39;s account number.
        /// </summary>
        /// <value>Last four digits of cardholder&#39;s account number.</value>
        [DataMember(Name = "lastFourDigitsOfCard", EmitDefaultValue = false)]
        public string LastFourDigitsOfCard { get; set; }

        /// <summary>
        /// Minimum purchase amount eligible for Pay with Rewards.
        /// </summary>
        /// <value>Minimum purchase amount eligible for Pay with Rewards.</value>
        [DataMember(Name = "minProgramPurchaseThreshold", EmitDefaultValue = false)]
        public string MinProgramPurchaseThreshold { get; set; }

        /// <summary>
        /// Maximum purchase amount eligible for Pay With Rewards.
        /// </summary>
        /// <value>Maximum purchase amount eligible for Pay With Rewards.</value>
        [DataMember(Name = "maxProgramPurchaseThreshold", EmitDefaultValue = false)]
        public string MaxProgramPurchaseThreshold { get; set; }

        /// <summary>
        /// Program identifier for the program in which the cardholder is enrolled. Program Id is created by Mastercard Rewards System.
        /// </summary>
        /// <value>Program identifier for the program in which the cardholder is enrolled. Program Id is created by Mastercard Rewards System.</value>
        [DataMember(Name = "programId", EmitDefaultValue = false)]
        public string ProgramId { get; set; }

        /// <summary>
        /// Status of the cardholder&#39;s account where cardholder has selected for the rebate to be processed on an account other than the transacting card account. Possible values are \&quot;I\&quot;, \&quot;A\&quot;. \&quot;I\&quot; indicates inactive, \&quot;A\&quot; indicates active. This field is not applicable if the cardholder rebate account is same as their card account.
        /// </summary>
        /// <value>Status of the cardholder&#39;s account where cardholder has selected for the rebate to be processed on an account other than the transacting card account. Possible values are \&quot;I\&quot;, \&quot;A\&quot;. \&quot;I\&quot; indicates inactive, \&quot;A\&quot; indicates active. This field is not applicable if the cardholder rebate account is same as their card account.</value>
        [DataMember(Name = "redemptionEnrollStatus", EmitDefaultValue = false)]
        public string RedemptionEnrollStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountInfo {\n");
            sb.Append("  AccountStatus: ").Append(AccountStatus).Append("\n");
            sb.Append("  LastFourDigitsOfCard: ").Append(LastFourDigitsOfCard).Append("\n");
            sb.Append("  MinProgramPurchaseThreshold: ").Append(MinProgramPurchaseThreshold).Append("\n");
            sb.Append("  MaxProgramPurchaseThreshold: ").Append(MaxProgramPurchaseThreshold).Append("\n");
            sb.Append("  ProgramId: ").Append(ProgramId).Append("\n");
            sb.Append("  RedemptionEnrollStatus: ").Append(RedemptionEnrollStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountInfo);
        }

        /// <summary>
        /// Returns true if AccountInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountStatus == input.AccountStatus ||
                    (this.AccountStatus != null &&
                    this.AccountStatus.Equals(input.AccountStatus))
                ) && 
                (
                    this.LastFourDigitsOfCard == input.LastFourDigitsOfCard ||
                    (this.LastFourDigitsOfCard != null &&
                    this.LastFourDigitsOfCard.Equals(input.LastFourDigitsOfCard))
                ) && 
                (
                    this.MinProgramPurchaseThreshold == input.MinProgramPurchaseThreshold ||
                    (this.MinProgramPurchaseThreshold != null &&
                    this.MinProgramPurchaseThreshold.Equals(input.MinProgramPurchaseThreshold))
                ) && 
                (
                    this.MaxProgramPurchaseThreshold == input.MaxProgramPurchaseThreshold ||
                    (this.MaxProgramPurchaseThreshold != null &&
                    this.MaxProgramPurchaseThreshold.Equals(input.MaxProgramPurchaseThreshold))
                ) && 
                (
                    this.ProgramId == input.ProgramId ||
                    (this.ProgramId != null &&
                    this.ProgramId.Equals(input.ProgramId))
                ) && 
                (
                    this.RedemptionEnrollStatus == input.RedemptionEnrollStatus ||
                    (this.RedemptionEnrollStatus != null &&
                    this.RedemptionEnrollStatus.Equals(input.RedemptionEnrollStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountStatus != null)
                    hashCode = hashCode * 59 + this.AccountStatus.GetHashCode();
                if (this.LastFourDigitsOfCard != null)
                    hashCode = hashCode * 59 + this.LastFourDigitsOfCard.GetHashCode();
                if (this.MinProgramPurchaseThreshold != null)
                    hashCode = hashCode * 59 + this.MinProgramPurchaseThreshold.GetHashCode();
                if (this.MaxProgramPurchaseThreshold != null)
                    hashCode = hashCode * 59 + this.MaxProgramPurchaseThreshold.GetHashCode();
                if (this.ProgramId != null)
                    hashCode = hashCode * 59 + this.ProgramId.GetHashCode();
                if (this.RedemptionEnrollStatus != null)
                    hashCode = hashCode * 59 + this.RedemptionEnrollStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AccountStatus (string) maxLength
            if(this.AccountStatus != null && this.AccountStatus.Length > 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountStatus, length must be less than 1.", new [] { "AccountStatus" });
            }

            // AccountStatus (string) minLength
            if(this.AccountStatus != null && this.AccountStatus.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountStatus, length must be greater than 1.", new [] { "AccountStatus" });
            }

            // LastFourDigitsOfCard (string) maxLength
            if(this.LastFourDigitsOfCard != null && this.LastFourDigitsOfCard.Length > 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastFourDigitsOfCard, length must be less than 4.", new [] { "LastFourDigitsOfCard" });
            }

            // LastFourDigitsOfCard (string) minLength
            if(this.LastFourDigitsOfCard != null && this.LastFourDigitsOfCard.Length < 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastFourDigitsOfCard, length must be greater than 4.", new [] { "LastFourDigitsOfCard" });
            }

            // ProgramId (string) maxLength
            if(this.ProgramId != null && this.ProgramId.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProgramId, length must be less than 10.", new [] { "ProgramId" });
            }

            // ProgramId (string) minLength
            if(this.ProgramId != null && this.ProgramId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProgramId, length must be greater than 1.", new [] { "ProgramId" });
            }

            // RedemptionEnrollStatus (string) maxLength
            if(this.RedemptionEnrollStatus != null && this.RedemptionEnrollStatus.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RedemptionEnrollStatus, length must be less than 3.", new [] { "RedemptionEnrollStatus" });
            }

            yield break;
        }
    }

}
