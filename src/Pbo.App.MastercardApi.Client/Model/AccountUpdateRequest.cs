/*
 * Pay with Rewards APIs
 *
 * Pay with Rewards allows cardholders to redeem points for purchases made with an enrolled Mastercard card. The following APIs create the Pay with Rewards user experience, and can be used inside a banking app or other mobile apps.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: paywithrewards@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Pbo.App.MastercardApi.Client.Client.OpenAPIDateConverter;

namespace Pbo.App.MastercardApi.Client.Model
{
    /// <summary>
    /// AccountUpdateRequest
    /// </summary>
    [DataContract(Name = "AccountUpdateRequest")]
    public partial class AccountUpdateRequest : IEquatable<AccountUpdateRequest>, IValidatableObject
    {
        /// <summary>
        /// Status of the user&#39;s account. Valid values are GOOD_STANDING, REDEEM_ONLY, NEW, ON_HOLD, CANCELLED, INACTIVE.
        /// </summary>
        /// <value>Status of the user&#39;s account. Valid values are GOOD_STANDING, REDEEM_ONLY, NEW, ON_HOLD, CANCELLED, INACTIVE.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PcloAccountStatusCodeEnum
        {
            /// <summary>
            /// Enum NEW for value: NEW
            /// </summary>
            [EnumMember(Value = "NEW")]
            NEW = 1,

            /// <summary>
            /// Enum GOODSTANDING for value: GOOD_STANDING
            /// </summary>
            [EnumMember(Value = "GOOD_STANDING")]
            GOODSTANDING = 2,

            /// <summary>
            /// Enum REDEEMONLY for value: REDEEM_ONLY
            /// </summary>
            [EnumMember(Value = "REDEEM_ONLY")]
            REDEEMONLY = 3,

            /// <summary>
            /// Enum CANCELLED for value: CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLED = 4,

            /// <summary>
            /// Enum ONHOLD for value: ON_HOLD
            /// </summary>
            [EnumMember(Value = "ON_HOLD")]
            ONHOLD = 5,

            /// <summary>
            /// Enum INACTIVE for value: INACTIVE
            /// </summary>
            [EnumMember(Value = "INACTIVE")]
            INACTIVE = 6

        }

        /// <summary>
        /// Status of the user&#39;s account. Valid values are GOOD_STANDING, REDEEM_ONLY, NEW, ON_HOLD, CANCELLED, INACTIVE.
        /// </summary>
        /// <value>Status of the user&#39;s account. Valid values are GOOD_STANDING, REDEEM_ONLY, NEW, ON_HOLD, CANCELLED, INACTIVE.</value>
        [DataMember(Name = "pcloAccountStatusCode", EmitDefaultValue = false)]
        public PcloAccountStatusCodeEnum? PcloAccountStatusCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountUpdateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccountUpdateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountUpdateRequest" /> class.
        /// </summary>
        /// <param name="status">Status of the user&#39;s account. Valid values are GOOD_STANDING, REDEEM_ONLY, NEW, ON_HOLD, CANCELLED, INACTIVE. (required).</param>
        /// <param name="accountId">The unique identifier for the given account. (required).</param>
        /// <param name="accountIdType">Identifier type for the given account (required).</param>
        /// <param name="pcloAccountStatusCode">Status of the user&#39;s account. Valid values are GOOD_STANDING, REDEEM_ONLY, NEW, ON_HOLD, CANCELLED, INACTIVE..</param>
        /// <param name="userDefined1">Custom field defined by the user.</param>
        /// <param name="userDefined2">Custom field defined by the user.</param>
        /// <param name="userDefined3">Custom field defined by the user.</param>
        /// <param name="userDefined4">Custom field defined by the user.</param>
        /// <param name="userDefined5">Custom field defined by the user.</param>
        /// <param name="userDefined6">Custom field defined by the user.</param>
        /// <param name="userDefined7">Custom field defined by the user.</param>
        /// <param name="userDefined8">Custom field defined by the user.</param>
        public AccountUpdateRequest(string status = default(string), string accountId = default(string), string accountIdType = default(string), PcloAccountStatusCodeEnum? pcloAccountStatusCode = default(PcloAccountStatusCodeEnum?), string userDefined1 = default(string), string userDefined2 = default(string), string userDefined3 = default(string), string userDefined4 = default(string), string userDefined5 = default(string), string userDefined6 = default(string), string userDefined7 = default(string), string userDefined8 = default(string))
        {
            // to ensure "status" is required (not null)
            this.Status = status ?? throw new ArgumentNullException("status is a required property for AccountUpdateRequest and cannot be null");
            // to ensure "accountId" is required (not null)
            this.AccountId = accountId ?? throw new ArgumentNullException("accountId is a required property for AccountUpdateRequest and cannot be null");
            // to ensure "accountIdType" is required (not null)
            this.AccountIdType = accountIdType ?? throw new ArgumentNullException("accountIdType is a required property for AccountUpdateRequest and cannot be null");
            this.PcloAccountStatusCode = pcloAccountStatusCode;
            this.UserDefined1 = userDefined1;
            this.UserDefined2 = userDefined2;
            this.UserDefined3 = userDefined3;
            this.UserDefined4 = userDefined4;
            this.UserDefined5 = userDefined5;
            this.UserDefined6 = userDefined6;
            this.UserDefined7 = userDefined7;
            this.UserDefined8 = userDefined8;
        }

        /// <summary>
        /// Status of the user&#39;s account. Valid values are GOOD_STANDING, REDEEM_ONLY, NEW, ON_HOLD, CANCELLED, INACTIVE.
        /// </summary>
        /// <value>Status of the user&#39;s account. Valid values are GOOD_STANDING, REDEEM_ONLY, NEW, ON_HOLD, CANCELLED, INACTIVE.</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// The unique identifier for the given account.
        /// </summary>
        /// <value>The unique identifier for the given account.</value>
        [DataMember(Name = "accountId", IsRequired = true, EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Identifier type for the given account
        /// </summary>
        /// <value>Identifier type for the given account</value>
        [DataMember(Name = "accountIdType", IsRequired = true, EmitDefaultValue = false)]
        public string AccountIdType { get; set; }

        /// <summary>
        /// Custom field defined by the user
        /// </summary>
        /// <value>Custom field defined by the user</value>
        [DataMember(Name = "userDefined1", EmitDefaultValue = false)]
        public string UserDefined1 { get; set; }

        /// <summary>
        /// Custom field defined by the user
        /// </summary>
        /// <value>Custom field defined by the user</value>
        [DataMember(Name = "userDefined2", EmitDefaultValue = false)]
        public string UserDefined2 { get; set; }

        /// <summary>
        /// Custom field defined by the user
        /// </summary>
        /// <value>Custom field defined by the user</value>
        [DataMember(Name = "userDefined3", EmitDefaultValue = false)]
        public string UserDefined3 { get; set; }

        /// <summary>
        /// Custom field defined by the user
        /// </summary>
        /// <value>Custom field defined by the user</value>
        [DataMember(Name = "userDefined4", EmitDefaultValue = false)]
        public string UserDefined4 { get; set; }

        /// <summary>
        /// Custom field defined by the user
        /// </summary>
        /// <value>Custom field defined by the user</value>
        [DataMember(Name = "userDefined5", EmitDefaultValue = false)]
        public string UserDefined5 { get; set; }

        /// <summary>
        /// Custom field defined by the user
        /// </summary>
        /// <value>Custom field defined by the user</value>
        [DataMember(Name = "userDefined6", EmitDefaultValue = false)]
        public string UserDefined6 { get; set; }

        /// <summary>
        /// Custom field defined by the user
        /// </summary>
        /// <value>Custom field defined by the user</value>
        [DataMember(Name = "userDefined7", EmitDefaultValue = false)]
        public string UserDefined7 { get; set; }

        /// <summary>
        /// Custom field defined by the user
        /// </summary>
        /// <value>Custom field defined by the user</value>
        [DataMember(Name = "userDefined8", EmitDefaultValue = false)]
        public string UserDefined8 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountUpdateRequest {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountIdType: ").Append(AccountIdType).Append("\n");
            sb.Append("  PcloAccountStatusCode: ").Append(PcloAccountStatusCode).Append("\n");
            sb.Append("  UserDefined1: ").Append(UserDefined1).Append("\n");
            sb.Append("  UserDefined2: ").Append(UserDefined2).Append("\n");
            sb.Append("  UserDefined3: ").Append(UserDefined3).Append("\n");
            sb.Append("  UserDefined4: ").Append(UserDefined4).Append("\n");
            sb.Append("  UserDefined5: ").Append(UserDefined5).Append("\n");
            sb.Append("  UserDefined6: ").Append(UserDefined6).Append("\n");
            sb.Append("  UserDefined7: ").Append(UserDefined7).Append("\n");
            sb.Append("  UserDefined8: ").Append(UserDefined8).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountUpdateRequest);
        }

        /// <summary>
        /// Returns true if AccountUpdateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountUpdateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountUpdateRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.AccountIdType == input.AccountIdType ||
                    (this.AccountIdType != null &&
                    this.AccountIdType.Equals(input.AccountIdType))
                ) && 
                (
                    this.PcloAccountStatusCode == input.PcloAccountStatusCode ||
                    this.PcloAccountStatusCode.Equals(input.PcloAccountStatusCode)
                ) && 
                (
                    this.UserDefined1 == input.UserDefined1 ||
                    (this.UserDefined1 != null &&
                    this.UserDefined1.Equals(input.UserDefined1))
                ) && 
                (
                    this.UserDefined2 == input.UserDefined2 ||
                    (this.UserDefined2 != null &&
                    this.UserDefined2.Equals(input.UserDefined2))
                ) && 
                (
                    this.UserDefined3 == input.UserDefined3 ||
                    (this.UserDefined3 != null &&
                    this.UserDefined3.Equals(input.UserDefined3))
                ) && 
                (
                    this.UserDefined4 == input.UserDefined4 ||
                    (this.UserDefined4 != null &&
                    this.UserDefined4.Equals(input.UserDefined4))
                ) && 
                (
                    this.UserDefined5 == input.UserDefined5 ||
                    (this.UserDefined5 != null &&
                    this.UserDefined5.Equals(input.UserDefined5))
                ) && 
                (
                    this.UserDefined6 == input.UserDefined6 ||
                    (this.UserDefined6 != null &&
                    this.UserDefined6.Equals(input.UserDefined6))
                ) && 
                (
                    this.UserDefined7 == input.UserDefined7 ||
                    (this.UserDefined7 != null &&
                    this.UserDefined7.Equals(input.UserDefined7))
                ) && 
                (
                    this.UserDefined8 == input.UserDefined8 ||
                    (this.UserDefined8 != null &&
                    this.UserDefined8.Equals(input.UserDefined8))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.AccountIdType != null)
                    hashCode = hashCode * 59 + this.AccountIdType.GetHashCode();
                hashCode = hashCode * 59 + this.PcloAccountStatusCode.GetHashCode();
                if (this.UserDefined1 != null)
                    hashCode = hashCode * 59 + this.UserDefined1.GetHashCode();
                if (this.UserDefined2 != null)
                    hashCode = hashCode * 59 + this.UserDefined2.GetHashCode();
                if (this.UserDefined3 != null)
                    hashCode = hashCode * 59 + this.UserDefined3.GetHashCode();
                if (this.UserDefined4 != null)
                    hashCode = hashCode * 59 + this.UserDefined4.GetHashCode();
                if (this.UserDefined5 != null)
                    hashCode = hashCode * 59 + this.UserDefined5.GetHashCode();
                if (this.UserDefined6 != null)
                    hashCode = hashCode * 59 + this.UserDefined6.GetHashCode();
                if (this.UserDefined7 != null)
                    hashCode = hashCode * 59 + this.UserDefined7.GetHashCode();
                if (this.UserDefined8 != null)
                    hashCode = hashCode * 59 + this.UserDefined8.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Status (string) maxLength
            if(this.Status != null && this.Status.Length > 13)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Status, length must be less than 13.", new [] { "Status" });
            }

            // Status (string) minLength
            if(this.Status != null && this.Status.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Status, length must be greater than 3.", new [] { "Status" });
            }

            // AccountId (string) maxLength
            if(this.AccountId != null && this.AccountId.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountId, length must be less than 30.", new [] { "AccountId" });
            }

            // AccountId (string) minLength
            if(this.AccountId != null && this.AccountId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountId, length must be greater than 1.", new [] { "AccountId" });
            }

            // AccountIdType (string) maxLength
            if(this.AccountIdType != null && this.AccountIdType.Length > 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountIdType, length must be less than 5.", new [] { "AccountIdType" });
            }

            // AccountIdType (string) minLength
            if(this.AccountIdType != null && this.AccountIdType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountIdType, length must be greater than 1.", new [] { "AccountIdType" });
            }

            // UserDefined1 (string) maxLength
            if(this.UserDefined1 != null && this.UserDefined1.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserDefined1, length must be less than 40.", new [] { "UserDefined1" });
            }

            // UserDefined1 (string) minLength
            if(this.UserDefined1 != null && this.UserDefined1.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserDefined1, length must be greater than 0.", new [] { "UserDefined1" });
            }

            // UserDefined2 (string) maxLength
            if(this.UserDefined2 != null && this.UserDefined2.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserDefined2, length must be less than 40.", new [] { "UserDefined2" });
            }

            // UserDefined2 (string) minLength
            if(this.UserDefined2 != null && this.UserDefined2.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserDefined2, length must be greater than 0.", new [] { "UserDefined2" });
            }

            // UserDefined3 (string) maxLength
            if(this.UserDefined3 != null && this.UserDefined3.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserDefined3, length must be less than 40.", new [] { "UserDefined3" });
            }

            // UserDefined3 (string) minLength
            if(this.UserDefined3 != null && this.UserDefined3.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserDefined3, length must be greater than 0.", new [] { "UserDefined3" });
            }

            // UserDefined4 (string) maxLength
            if(this.UserDefined4 != null && this.UserDefined4.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserDefined4, length must be less than 40.", new [] { "UserDefined4" });
            }

            // UserDefined4 (string) minLength
            if(this.UserDefined4 != null && this.UserDefined4.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserDefined4, length must be greater than 0.", new [] { "UserDefined4" });
            }

            // UserDefined5 (string) maxLength
            if(this.UserDefined5 != null && this.UserDefined5.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserDefined5, length must be less than 20.", new [] { "UserDefined5" });
            }

            // UserDefined5 (string) minLength
            if(this.UserDefined5 != null && this.UserDefined5.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserDefined5, length must be greater than 0.", new [] { "UserDefined5" });
            }

            // UserDefined6 (string) maxLength
            if(this.UserDefined6 != null && this.UserDefined6.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserDefined6, length must be less than 20.", new [] { "UserDefined6" });
            }

            // UserDefined6 (string) minLength
            if(this.UserDefined6 != null && this.UserDefined6.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserDefined6, length must be greater than 0.", new [] { "UserDefined6" });
            }

            // UserDefined7 (string) maxLength
            if(this.UserDefined7 != null && this.UserDefined7.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserDefined7, length must be less than 20.", new [] { "UserDefined7" });
            }

            // UserDefined7 (string) minLength
            if(this.UserDefined7 != null && this.UserDefined7.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserDefined7, length must be greater than 0.", new [] { "UserDefined7" });
            }

            // UserDefined8 (string) maxLength
            if(this.UserDefined8 != null && this.UserDefined8.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserDefined8, length must be less than 20.", new [] { "UserDefined8" });
            }

            // UserDefined8 (string) minLength
            if(this.UserDefined8 != null && this.UserDefined8.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserDefined8, length must be greater than 0.", new [] { "UserDefined8" });
            }

            yield break;
        }
    }

}
