/*
 * Pay with Rewards APIs
 *
 * Pay with Rewards allows cardholders to redeem points for purchases made with an enrolled Mastercard card. The following APIs create the Pay with Rewards user experience, and can be used inside a banking app or other mobile apps.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: paywithrewards@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Pbo.App.MastercardApi.Client.Client.OpenAPIDateConverter;

namespace Pbo.App.MastercardApi.Client.Model
{
    /// <summary>
    /// Authorization
    /// </summary>
    [DataContract(Name = "Authorization")]
    public partial class Authorization : IEquatable<Authorization>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Authorization" /> class.
        /// </summary>
        /// <param name="id">Unique transaction identifier created by Mastercard Rewards System..</param>
        /// <param name="reprocessId">Unique identifier created by Mastercard Rewards System, for reprocessed transactions only..</param>
        /// <param name="responseReasonId">Response reason code provided by MRS for the authorization..</param>
        /// <param name="responseReasonDesc">Description of MRS response reason code..</param>
        /// <param name="merchantCategoryName">The category name of the merchant..</param>
        /// <param name="externalId">Reference number provided by processing network (Mastercard or other).</param>
        /// <param name="reprocessedBy">User or system submitted the reprocess request. This is valid only for reprocessed transactions..</param>
        /// <param name="reprocessedDateTime">Date and time on when the reprocess happened. This is valid only for reprocessed transactions..</param>
        /// <param name="de004TransactionAmount">Transaction amount..</param>
        /// <param name="de005IssuerCurrencySettlementAmount">Issuer settlement amount..</param>
        /// <param name="de006CardholderBillingAmount">Transaction amount in the cardholder’s billing currency- this is the amount used by Pay with Rewards in processing a transaction..</param>
        /// <param name="de012TransactionTime">Transaction time in HH24miss format..</param>
        /// <param name="de013TransactionDate">Transaction date in MMdd format..</param>
        /// <param name="de018MerchantCode">Merchant Type (MCC).</param>
        /// <param name="de032AcquiringInstitutionIdCode">Acquiring Institution ID Code.</param>
        /// <param name="de039ResponseCode">Authorization response code(approve/decline). Pay with Rewards considers only approved authorizations..</param>
        /// <param name="de042CardAcceptorIdCode">Identifies the card acceptor. Also, used as a merchant ID to uniquely identify the merchant in a POS transaction..</param>
        /// <param name="de043CardAcceptorNameLocation">Card Acceptor Name and Location.</param>
        /// <param name="de048TCC">TCC (Additional Data – Private Use)..</param>
        /// <param name="de049TransactionCurrencyCode">Currency code of the transaction amount..</param>
        /// <param name="de050SettlementCurrencyCode">(Currency Code, Reconciliation) defines the DE 5 (Amount, Reconciliation) currency.</param>
        /// <param name="de051CardholderBillingCurrencyCode">(Currency Code, Cardholder Billing) defines the DE 6 (Amount, Cardholder Billing) currency, and DE 111 (Amount, Currency Conversion Assessment) currency.</param>
        /// <param name="pointsRedeemed">Points redeemed for a given transaction. Populated only for successfully redeemed purchases and assigned value \&quot;0\&quot; to eligible and ineligible purchases..</param>
        /// <param name="merchantCountry">Country code for the merchant (ex. FRA). DE61 subfield 13..</param>
        /// <param name="pointConversionCurrency">Currency of the conversion rule that was applied by Pay with Rewards engine (ex. EUR). If the applied conversion rule does not have a currency associated, the cardholder billing currency is returned. May not be returned for “ineligible” purchases..</param>
        /// <param name="pointConversionFactor">Conversion rate (cash to points ratio) applied to the transaction by Pay with Rewards. May not be returned for “Ineligible” purchases..</param>
        /// <param name="cashBackAmount">The amount of the statement credit associated with the redemption  (ex. 10.75) A value is returned only if the transaction is in “Redeem” status (response reason 60). For “Eligible” or “Ineligible” purchases a value of “0” is returned..</param>
        /// <param name="totalPointsRequired">Total points required for a redemption irrespective of available  point balance, partial redemption, and other thresholds. (ex. 1000) May not be returned for “Ineligible” purchases..</param>
        /// <param name="partiallyRedeemed">Returns TRUE if the cardholder has redeemed fewer points than the total points required. This is only applicable for authorizations in “Redeem” status (response reason 60). For “Eligible” or “Ineligible” purchases, the default value of FALSE is returned..</param>
        public Authorization(string id = default(string), string reprocessId = default(string), string responseReasonId = default(string), string responseReasonDesc = default(string), string merchantCategoryName = default(string), string externalId = default(string), string reprocessedBy = default(string), string reprocessedDateTime = default(string), string de004TransactionAmount = default(string), string de005IssuerCurrencySettlementAmount = default(string), string de006CardholderBillingAmount = default(string), string de012TransactionTime = default(string), string de013TransactionDate = default(string), string de018MerchantCode = default(string), string de032AcquiringInstitutionIdCode = default(string), string de039ResponseCode = default(string), string de042CardAcceptorIdCode = default(string), string de043CardAcceptorNameLocation = default(string), string de048TCC = default(string), string de049TransactionCurrencyCode = default(string), string de050SettlementCurrencyCode = default(string), string de051CardholderBillingCurrencyCode = default(string), string pointsRedeemed = default(string), string merchantCountry = default(string), string pointConversionCurrency = default(string), decimal pointConversionFactor = default(decimal), int cashBackAmount = default(int), decimal totalPointsRequired = default(decimal), bool partiallyRedeemed = default(bool))
        {
            this.Id = id;
            this.ReprocessId = reprocessId;
            this.ResponseReasonId = responseReasonId;
            this.ResponseReasonDesc = responseReasonDesc;
            this.MerchantCategoryName = merchantCategoryName;
            this.ExternalId = externalId;
            this.ReprocessedBy = reprocessedBy;
            this.ReprocessedDateTime = reprocessedDateTime;
            this.De004TransactionAmount = de004TransactionAmount;
            this.De005IssuerCurrencySettlementAmount = de005IssuerCurrencySettlementAmount;
            this.De006CardholderBillingAmount = de006CardholderBillingAmount;
            this.De012TransactionTime = de012TransactionTime;
            this.De013TransactionDate = de013TransactionDate;
            this.De018MerchantCode = de018MerchantCode;
            this.De032AcquiringInstitutionIdCode = de032AcquiringInstitutionIdCode;
            this.De039ResponseCode = de039ResponseCode;
            this.De042CardAcceptorIdCode = de042CardAcceptorIdCode;
            this.De043CardAcceptorNameLocation = de043CardAcceptorNameLocation;
            this.De048TCC = de048TCC;
            this.De049TransactionCurrencyCode = de049TransactionCurrencyCode;
            this.De050SettlementCurrencyCode = de050SettlementCurrencyCode;
            this.De051CardholderBillingCurrencyCode = de051CardholderBillingCurrencyCode;
            this.PointsRedeemed = pointsRedeemed;
            this.MerchantCountry = merchantCountry;
            this.PointConversionCurrency = pointConversionCurrency;
            this.PointConversionFactor = pointConversionFactor;
            this.CashBackAmount = cashBackAmount;
            this.TotalPointsRequired = totalPointsRequired;
            this.PartiallyRedeemed = partiallyRedeemed;
        }

        /// <summary>
        /// Unique transaction identifier created by Mastercard Rewards System.
        /// </summary>
        /// <value>Unique transaction identifier created by Mastercard Rewards System.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Unique identifier created by Mastercard Rewards System, for reprocessed transactions only.
        /// </summary>
        /// <value>Unique identifier created by Mastercard Rewards System, for reprocessed transactions only.</value>
        [DataMember(Name = "reprocessId", EmitDefaultValue = false)]
        public string ReprocessId { get; set; }

        /// <summary>
        /// Response reason code provided by MRS for the authorization.
        /// </summary>
        /// <value>Response reason code provided by MRS for the authorization.</value>
        [DataMember(Name = "responseReasonId", EmitDefaultValue = false)]
        public string ResponseReasonId { get; set; }

        /// <summary>
        /// Description of MRS response reason code.
        /// </summary>
        /// <value>Description of MRS response reason code.</value>
        [DataMember(Name = "responseReasonDesc", EmitDefaultValue = false)]
        public string ResponseReasonDesc { get; set; }

        /// <summary>
        /// The category name of the merchant.
        /// </summary>
        /// <value>The category name of the merchant.</value>
        [DataMember(Name = "merchantCategoryName", EmitDefaultValue = false)]
        public string MerchantCategoryName { get; set; }

        /// <summary>
        /// Reference number provided by processing network (Mastercard or other)
        /// </summary>
        /// <value>Reference number provided by processing network (Mastercard or other)</value>
        [DataMember(Name = "externalId", EmitDefaultValue = false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// User or system submitted the reprocess request. This is valid only for reprocessed transactions.
        /// </summary>
        /// <value>User or system submitted the reprocess request. This is valid only for reprocessed transactions.</value>
        [DataMember(Name = "reprocessedBy", EmitDefaultValue = false)]
        public string ReprocessedBy { get; set; }

        /// <summary>
        /// Date and time on when the reprocess happened. This is valid only for reprocessed transactions.
        /// </summary>
        /// <value>Date and time on when the reprocess happened. This is valid only for reprocessed transactions.</value>
        [DataMember(Name = "reprocessedDateTime", EmitDefaultValue = false)]
        public string ReprocessedDateTime { get; set; }

        /// <summary>
        /// Transaction amount.
        /// </summary>
        /// <value>Transaction amount.</value>
        [DataMember(Name = "de004TransactionAmount", EmitDefaultValue = false)]
        public string De004TransactionAmount { get; set; }

        /// <summary>
        /// Issuer settlement amount.
        /// </summary>
        /// <value>Issuer settlement amount.</value>
        [DataMember(Name = "de005IssuerCurrencySettlementAmount", EmitDefaultValue = false)]
        public string De005IssuerCurrencySettlementAmount { get; set; }

        /// <summary>
        /// Transaction amount in the cardholder’s billing currency- this is the amount used by Pay with Rewards in processing a transaction.
        /// </summary>
        /// <value>Transaction amount in the cardholder’s billing currency- this is the amount used by Pay with Rewards in processing a transaction.</value>
        [DataMember(Name = "de006CardholderBillingAmount", EmitDefaultValue = false)]
        public string De006CardholderBillingAmount { get; set; }

        /// <summary>
        /// Transaction time in HH24miss format.
        /// </summary>
        /// <value>Transaction time in HH24miss format.</value>
        [DataMember(Name = "de012TransactionTime", EmitDefaultValue = false)]
        public string De012TransactionTime { get; set; }

        /// <summary>
        /// Transaction date in MMdd format.
        /// </summary>
        /// <value>Transaction date in MMdd format.</value>
        [DataMember(Name = "de013TransactionDate", EmitDefaultValue = false)]
        public string De013TransactionDate { get; set; }

        /// <summary>
        /// Merchant Type (MCC)
        /// </summary>
        /// <value>Merchant Type (MCC)</value>
        [DataMember(Name = "de018MerchantCode", EmitDefaultValue = false)]
        public string De018MerchantCode { get; set; }

        /// <summary>
        /// Acquiring Institution ID Code
        /// </summary>
        /// <value>Acquiring Institution ID Code</value>
        [DataMember(Name = "de032AcquiringInstitutionIdCode", EmitDefaultValue = false)]
        public string De032AcquiringInstitutionIdCode { get; set; }

        /// <summary>
        /// Authorization response code(approve/decline). Pay with Rewards considers only approved authorizations.
        /// </summary>
        /// <value>Authorization response code(approve/decline). Pay with Rewards considers only approved authorizations.</value>
        [DataMember(Name = "de039ResponseCode", EmitDefaultValue = false)]
        public string De039ResponseCode { get; set; }

        /// <summary>
        /// Identifies the card acceptor. Also, used as a merchant ID to uniquely identify the merchant in a POS transaction.
        /// </summary>
        /// <value>Identifies the card acceptor. Also, used as a merchant ID to uniquely identify the merchant in a POS transaction.</value>
        [DataMember(Name = "de042CardAcceptorIdCode", EmitDefaultValue = false)]
        public string De042CardAcceptorIdCode { get; set; }

        /// <summary>
        /// Card Acceptor Name and Location
        /// </summary>
        /// <value>Card Acceptor Name and Location</value>
        [DataMember(Name = "de043CardAcceptorNameLocation", EmitDefaultValue = false)]
        public string De043CardAcceptorNameLocation { get; set; }

        /// <summary>
        /// TCC (Additional Data – Private Use).
        /// </summary>
        /// <value>TCC (Additional Data – Private Use).</value>
        [DataMember(Name = "de048TCC", EmitDefaultValue = false)]
        public string De048TCC { get; set; }

        /// <summary>
        /// Currency code of the transaction amount.
        /// </summary>
        /// <value>Currency code of the transaction amount.</value>
        [DataMember(Name = "de049TransactionCurrencyCode", EmitDefaultValue = false)]
        public string De049TransactionCurrencyCode { get; set; }

        /// <summary>
        /// (Currency Code, Reconciliation) defines the DE 5 (Amount, Reconciliation) currency
        /// </summary>
        /// <value>(Currency Code, Reconciliation) defines the DE 5 (Amount, Reconciliation) currency</value>
        [DataMember(Name = "de050SettlementCurrencyCode", EmitDefaultValue = false)]
        public string De050SettlementCurrencyCode { get; set; }

        /// <summary>
        /// (Currency Code, Cardholder Billing) defines the DE 6 (Amount, Cardholder Billing) currency, and DE 111 (Amount, Currency Conversion Assessment) currency
        /// </summary>
        /// <value>(Currency Code, Cardholder Billing) defines the DE 6 (Amount, Cardholder Billing) currency, and DE 111 (Amount, Currency Conversion Assessment) currency</value>
        [DataMember(Name = "de051CardholderBillingCurrencyCode", EmitDefaultValue = false)]
        public string De051CardholderBillingCurrencyCode { get; set; }

        /// <summary>
        /// Points redeemed for a given transaction. Populated only for successfully redeemed purchases and assigned value \&quot;0\&quot; to eligible and ineligible purchases.
        /// </summary>
        /// <value>Points redeemed for a given transaction. Populated only for successfully redeemed purchases and assigned value \&quot;0\&quot; to eligible and ineligible purchases.</value>
        [DataMember(Name = "pointsRedeemed", EmitDefaultValue = false)]
        public string PointsRedeemed { get; set; }

        /// <summary>
        /// Country code for the merchant (ex. FRA). DE61 subfield 13.
        /// </summary>
        /// <value>Country code for the merchant (ex. FRA). DE61 subfield 13.</value>
        [DataMember(Name = "merchantCountry", EmitDefaultValue = false)]
        public string MerchantCountry { get; set; }

        /// <summary>
        /// Currency of the conversion rule that was applied by Pay with Rewards engine (ex. EUR). If the applied conversion rule does not have a currency associated, the cardholder billing currency is returned. May not be returned for “ineligible” purchases.
        /// </summary>
        /// <value>Currency of the conversion rule that was applied by Pay with Rewards engine (ex. EUR). If the applied conversion rule does not have a currency associated, the cardholder billing currency is returned. May not be returned for “ineligible” purchases.</value>
        [DataMember(Name = "pointConversionCurrency", EmitDefaultValue = false)]
        public string PointConversionCurrency { get; set; }

        /// <summary>
        /// Conversion rate (cash to points ratio) applied to the transaction by Pay with Rewards. May not be returned for “Ineligible” purchases.
        /// </summary>
        /// <value>Conversion rate (cash to points ratio) applied to the transaction by Pay with Rewards. May not be returned for “Ineligible” purchases.</value>
        [DataMember(Name = "pointConversionFactor", EmitDefaultValue = false)]
        public decimal PointConversionFactor { get; set; }

        /// <summary>
        /// The amount of the statement credit associated with the redemption  (ex. 10.75) A value is returned only if the transaction is in “Redeem” status (response reason 60). For “Eligible” or “Ineligible” purchases a value of “0” is returned.
        /// </summary>
        /// <value>The amount of the statement credit associated with the redemption  (ex. 10.75) A value is returned only if the transaction is in “Redeem” status (response reason 60). For “Eligible” or “Ineligible” purchases a value of “0” is returned.</value>
        [DataMember(Name = "cashBackAmount", EmitDefaultValue = false)]
        public int CashBackAmount { get; set; }

        /// <summary>
        /// Total points required for a redemption irrespective of available  point balance, partial redemption, and other thresholds. (ex. 1000) May not be returned for “Ineligible” purchases.
        /// </summary>
        /// <value>Total points required for a redemption irrespective of available  point balance, partial redemption, and other thresholds. (ex. 1000) May not be returned for “Ineligible” purchases.</value>
        [DataMember(Name = "totalPointsRequired", EmitDefaultValue = false)]
        public decimal TotalPointsRequired { get; set; }

        /// <summary>
        /// Returns TRUE if the cardholder has redeemed fewer points than the total points required. This is only applicable for authorizations in “Redeem” status (response reason 60). For “Eligible” or “Ineligible” purchases, the default value of FALSE is returned.
        /// </summary>
        /// <value>Returns TRUE if the cardholder has redeemed fewer points than the total points required. This is only applicable for authorizations in “Redeem” status (response reason 60). For “Eligible” or “Ineligible” purchases, the default value of FALSE is returned.</value>
        [DataMember(Name = "partiallyRedeemed", EmitDefaultValue = false)]
        public bool PartiallyRedeemed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Authorization {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ReprocessId: ").Append(ReprocessId).Append("\n");
            sb.Append("  ResponseReasonId: ").Append(ResponseReasonId).Append("\n");
            sb.Append("  ResponseReasonDesc: ").Append(ResponseReasonDesc).Append("\n");
            sb.Append("  MerchantCategoryName: ").Append(MerchantCategoryName).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  ReprocessedBy: ").Append(ReprocessedBy).Append("\n");
            sb.Append("  ReprocessedDateTime: ").Append(ReprocessedDateTime).Append("\n");
            sb.Append("  De004TransactionAmount: ").Append(De004TransactionAmount).Append("\n");
            sb.Append("  De005IssuerCurrencySettlementAmount: ").Append(De005IssuerCurrencySettlementAmount).Append("\n");
            sb.Append("  De006CardholderBillingAmount: ").Append(De006CardholderBillingAmount).Append("\n");
            sb.Append("  De012TransactionTime: ").Append(De012TransactionTime).Append("\n");
            sb.Append("  De013TransactionDate: ").Append(De013TransactionDate).Append("\n");
            sb.Append("  De018MerchantCode: ").Append(De018MerchantCode).Append("\n");
            sb.Append("  De032AcquiringInstitutionIdCode: ").Append(De032AcquiringInstitutionIdCode).Append("\n");
            sb.Append("  De039ResponseCode: ").Append(De039ResponseCode).Append("\n");
            sb.Append("  De042CardAcceptorIdCode: ").Append(De042CardAcceptorIdCode).Append("\n");
            sb.Append("  De043CardAcceptorNameLocation: ").Append(De043CardAcceptorNameLocation).Append("\n");
            sb.Append("  De048TCC: ").Append(De048TCC).Append("\n");
            sb.Append("  De049TransactionCurrencyCode: ").Append(De049TransactionCurrencyCode).Append("\n");
            sb.Append("  De050SettlementCurrencyCode: ").Append(De050SettlementCurrencyCode).Append("\n");
            sb.Append("  De051CardholderBillingCurrencyCode: ").Append(De051CardholderBillingCurrencyCode).Append("\n");
            sb.Append("  PointsRedeemed: ").Append(PointsRedeemed).Append("\n");
            sb.Append("  MerchantCountry: ").Append(MerchantCountry).Append("\n");
            sb.Append("  PointConversionCurrency: ").Append(PointConversionCurrency).Append("\n");
            sb.Append("  PointConversionFactor: ").Append(PointConversionFactor).Append("\n");
            sb.Append("  CashBackAmount: ").Append(CashBackAmount).Append("\n");
            sb.Append("  TotalPointsRequired: ").Append(TotalPointsRequired).Append("\n");
            sb.Append("  PartiallyRedeemed: ").Append(PartiallyRedeemed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Authorization);
        }

        /// <summary>
        /// Returns true if Authorization instances are equal
        /// </summary>
        /// <param name="input">Instance of Authorization to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Authorization input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ReprocessId == input.ReprocessId ||
                    (this.ReprocessId != null &&
                    this.ReprocessId.Equals(input.ReprocessId))
                ) && 
                (
                    this.ResponseReasonId == input.ResponseReasonId ||
                    (this.ResponseReasonId != null &&
                    this.ResponseReasonId.Equals(input.ResponseReasonId))
                ) && 
                (
                    this.ResponseReasonDesc == input.ResponseReasonDesc ||
                    (this.ResponseReasonDesc != null &&
                    this.ResponseReasonDesc.Equals(input.ResponseReasonDesc))
                ) && 
                (
                    this.MerchantCategoryName == input.MerchantCategoryName ||
                    (this.MerchantCategoryName != null &&
                    this.MerchantCategoryName.Equals(input.MerchantCategoryName))
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.ReprocessedBy == input.ReprocessedBy ||
                    (this.ReprocessedBy != null &&
                    this.ReprocessedBy.Equals(input.ReprocessedBy))
                ) && 
                (
                    this.ReprocessedDateTime == input.ReprocessedDateTime ||
                    (this.ReprocessedDateTime != null &&
                    this.ReprocessedDateTime.Equals(input.ReprocessedDateTime))
                ) && 
                (
                    this.De004TransactionAmount == input.De004TransactionAmount ||
                    (this.De004TransactionAmount != null &&
                    this.De004TransactionAmount.Equals(input.De004TransactionAmount))
                ) && 
                (
                    this.De005IssuerCurrencySettlementAmount == input.De005IssuerCurrencySettlementAmount ||
                    (this.De005IssuerCurrencySettlementAmount != null &&
                    this.De005IssuerCurrencySettlementAmount.Equals(input.De005IssuerCurrencySettlementAmount))
                ) && 
                (
                    this.De006CardholderBillingAmount == input.De006CardholderBillingAmount ||
                    (this.De006CardholderBillingAmount != null &&
                    this.De006CardholderBillingAmount.Equals(input.De006CardholderBillingAmount))
                ) && 
                (
                    this.De012TransactionTime == input.De012TransactionTime ||
                    (this.De012TransactionTime != null &&
                    this.De012TransactionTime.Equals(input.De012TransactionTime))
                ) && 
                (
                    this.De013TransactionDate == input.De013TransactionDate ||
                    (this.De013TransactionDate != null &&
                    this.De013TransactionDate.Equals(input.De013TransactionDate))
                ) && 
                (
                    this.De018MerchantCode == input.De018MerchantCode ||
                    (this.De018MerchantCode != null &&
                    this.De018MerchantCode.Equals(input.De018MerchantCode))
                ) && 
                (
                    this.De032AcquiringInstitutionIdCode == input.De032AcquiringInstitutionIdCode ||
                    (this.De032AcquiringInstitutionIdCode != null &&
                    this.De032AcquiringInstitutionIdCode.Equals(input.De032AcquiringInstitutionIdCode))
                ) && 
                (
                    this.De039ResponseCode == input.De039ResponseCode ||
                    (this.De039ResponseCode != null &&
                    this.De039ResponseCode.Equals(input.De039ResponseCode))
                ) && 
                (
                    this.De042CardAcceptorIdCode == input.De042CardAcceptorIdCode ||
                    (this.De042CardAcceptorIdCode != null &&
                    this.De042CardAcceptorIdCode.Equals(input.De042CardAcceptorIdCode))
                ) && 
                (
                    this.De043CardAcceptorNameLocation == input.De043CardAcceptorNameLocation ||
                    (this.De043CardAcceptorNameLocation != null &&
                    this.De043CardAcceptorNameLocation.Equals(input.De043CardAcceptorNameLocation))
                ) && 
                (
                    this.De048TCC == input.De048TCC ||
                    (this.De048TCC != null &&
                    this.De048TCC.Equals(input.De048TCC))
                ) && 
                (
                    this.De049TransactionCurrencyCode == input.De049TransactionCurrencyCode ||
                    (this.De049TransactionCurrencyCode != null &&
                    this.De049TransactionCurrencyCode.Equals(input.De049TransactionCurrencyCode))
                ) && 
                (
                    this.De050SettlementCurrencyCode == input.De050SettlementCurrencyCode ||
                    (this.De050SettlementCurrencyCode != null &&
                    this.De050SettlementCurrencyCode.Equals(input.De050SettlementCurrencyCode))
                ) && 
                (
                    this.De051CardholderBillingCurrencyCode == input.De051CardholderBillingCurrencyCode ||
                    (this.De051CardholderBillingCurrencyCode != null &&
                    this.De051CardholderBillingCurrencyCode.Equals(input.De051CardholderBillingCurrencyCode))
                ) && 
                (
                    this.PointsRedeemed == input.PointsRedeemed ||
                    (this.PointsRedeemed != null &&
                    this.PointsRedeemed.Equals(input.PointsRedeemed))
                ) && 
                (
                    this.MerchantCountry == input.MerchantCountry ||
                    (this.MerchantCountry != null &&
                    this.MerchantCountry.Equals(input.MerchantCountry))
                ) && 
                (
                    this.PointConversionCurrency == input.PointConversionCurrency ||
                    (this.PointConversionCurrency != null &&
                    this.PointConversionCurrency.Equals(input.PointConversionCurrency))
                ) && 
                (
                    this.PointConversionFactor == input.PointConversionFactor ||
                    this.PointConversionFactor.Equals(input.PointConversionFactor)
                ) && 
                (
                    this.CashBackAmount == input.CashBackAmount ||
                    this.CashBackAmount.Equals(input.CashBackAmount)
                ) && 
                (
                    this.TotalPointsRequired == input.TotalPointsRequired ||
                    this.TotalPointsRequired.Equals(input.TotalPointsRequired)
                ) && 
                (
                    this.PartiallyRedeemed == input.PartiallyRedeemed ||
                    this.PartiallyRedeemed.Equals(input.PartiallyRedeemed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ReprocessId != null)
                    hashCode = hashCode * 59 + this.ReprocessId.GetHashCode();
                if (this.ResponseReasonId != null)
                    hashCode = hashCode * 59 + this.ResponseReasonId.GetHashCode();
                if (this.ResponseReasonDesc != null)
                    hashCode = hashCode * 59 + this.ResponseReasonDesc.GetHashCode();
                if (this.MerchantCategoryName != null)
                    hashCode = hashCode * 59 + this.MerchantCategoryName.GetHashCode();
                if (this.ExternalId != null)
                    hashCode = hashCode * 59 + this.ExternalId.GetHashCode();
                if (this.ReprocessedBy != null)
                    hashCode = hashCode * 59 + this.ReprocessedBy.GetHashCode();
                if (this.ReprocessedDateTime != null)
                    hashCode = hashCode * 59 + this.ReprocessedDateTime.GetHashCode();
                if (this.De004TransactionAmount != null)
                    hashCode = hashCode * 59 + this.De004TransactionAmount.GetHashCode();
                if (this.De005IssuerCurrencySettlementAmount != null)
                    hashCode = hashCode * 59 + this.De005IssuerCurrencySettlementAmount.GetHashCode();
                if (this.De006CardholderBillingAmount != null)
                    hashCode = hashCode * 59 + this.De006CardholderBillingAmount.GetHashCode();
                if (this.De012TransactionTime != null)
                    hashCode = hashCode * 59 + this.De012TransactionTime.GetHashCode();
                if (this.De013TransactionDate != null)
                    hashCode = hashCode * 59 + this.De013TransactionDate.GetHashCode();
                if (this.De018MerchantCode != null)
                    hashCode = hashCode * 59 + this.De018MerchantCode.GetHashCode();
                if (this.De032AcquiringInstitutionIdCode != null)
                    hashCode = hashCode * 59 + this.De032AcquiringInstitutionIdCode.GetHashCode();
                if (this.De039ResponseCode != null)
                    hashCode = hashCode * 59 + this.De039ResponseCode.GetHashCode();
                if (this.De042CardAcceptorIdCode != null)
                    hashCode = hashCode * 59 + this.De042CardAcceptorIdCode.GetHashCode();
                if (this.De043CardAcceptorNameLocation != null)
                    hashCode = hashCode * 59 + this.De043CardAcceptorNameLocation.GetHashCode();
                if (this.De048TCC != null)
                    hashCode = hashCode * 59 + this.De048TCC.GetHashCode();
                if (this.De049TransactionCurrencyCode != null)
                    hashCode = hashCode * 59 + this.De049TransactionCurrencyCode.GetHashCode();
                if (this.De050SettlementCurrencyCode != null)
                    hashCode = hashCode * 59 + this.De050SettlementCurrencyCode.GetHashCode();
                if (this.De051CardholderBillingCurrencyCode != null)
                    hashCode = hashCode * 59 + this.De051CardholderBillingCurrencyCode.GetHashCode();
                if (this.PointsRedeemed != null)
                    hashCode = hashCode * 59 + this.PointsRedeemed.GetHashCode();
                if (this.MerchantCountry != null)
                    hashCode = hashCode * 59 + this.MerchantCountry.GetHashCode();
                if (this.PointConversionCurrency != null)
                    hashCode = hashCode * 59 + this.PointConversionCurrency.GetHashCode();
                hashCode = hashCode * 59 + this.PointConversionFactor.GetHashCode();
                hashCode = hashCode * 59 + this.CashBackAmount.GetHashCode();
                hashCode = hashCode * 59 + this.TotalPointsRequired.GetHashCode();
                hashCode = hashCode * 59 + this.PartiallyRedeemed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Id (string) maxLength
            if(this.Id != null && this.Id.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, length must be less than 10.", new [] { "Id" });
            }

            // Id (string) minLength
            if(this.Id != null && this.Id.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, length must be greater than 1.", new [] { "Id" });
            }

            // ResponseReasonId (string) maxLength
            if(this.ResponseReasonId != null && this.ResponseReasonId.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ResponseReasonId, length must be less than 10.", new [] { "ResponseReasonId" });
            }

            // ResponseReasonId (string) minLength
            if(this.ResponseReasonId != null && this.ResponseReasonId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ResponseReasonId, length must be greater than 1.", new [] { "ResponseReasonId" });
            }

            // ResponseReasonDesc (string) maxLength
            if(this.ResponseReasonDesc != null && this.ResponseReasonDesc.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ResponseReasonDesc, length must be less than 255.", new [] { "ResponseReasonDesc" });
            }

            // ResponseReasonDesc (string) minLength
            if(this.ResponseReasonDesc != null && this.ResponseReasonDesc.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ResponseReasonDesc, length must be greater than 1.", new [] { "ResponseReasonDesc" });
            }

            // MerchantCategoryName (string) maxLength
            if(this.MerchantCategoryName != null && this.MerchantCategoryName.Length > 70)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantCategoryName, length must be less than 70.", new [] { "MerchantCategoryName" });
            }

            // MerchantCategoryName (string) minLength
            if(this.MerchantCategoryName != null && this.MerchantCategoryName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantCategoryName, length must be greater than 1.", new [] { "MerchantCategoryName" });
            }

            // ExternalId (string) maxLength
            if(this.ExternalId != null && this.ExternalId.Length > 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExternalId, length must be less than 15.", new [] { "ExternalId" });
            }

            // ExternalId (string) minLength
            if(this.ExternalId != null && this.ExternalId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExternalId, length must be greater than 1.", new [] { "ExternalId" });
            }

            // ReprocessedBy (string) maxLength
            if(this.ReprocessedBy != null && this.ReprocessedBy.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReprocessedBy, length must be less than 10.", new [] { "ReprocessedBy" });
            }

            // ReprocessedBy (string) minLength
            if(this.ReprocessedBy != null && this.ReprocessedBy.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReprocessedBy, length must be greater than 1.", new [] { "ReprocessedBy" });
            }

            // ReprocessedDateTime (string) minLength
            if(this.ReprocessedDateTime != null && this.ReprocessedDateTime.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReprocessedDateTime, length must be greater than 1.", new [] { "ReprocessedDateTime" });
            }

            // De004TransactionAmount (string) maxLength
            if(this.De004TransactionAmount != null && this.De004TransactionAmount.Length > 12)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for De004TransactionAmount, length must be less than 12.", new [] { "De004TransactionAmount" });
            }

            // De004TransactionAmount (string) minLength
            if(this.De004TransactionAmount != null && this.De004TransactionAmount.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for De004TransactionAmount, length must be greater than 0.", new [] { "De004TransactionAmount" });
            }

            // De005IssuerCurrencySettlementAmount (string) maxLength
            if(this.De005IssuerCurrencySettlementAmount != null && this.De005IssuerCurrencySettlementAmount.Length > 12)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for De005IssuerCurrencySettlementAmount, length must be less than 12.", new [] { "De005IssuerCurrencySettlementAmount" });
            }

            // De005IssuerCurrencySettlementAmount (string) minLength
            if(this.De005IssuerCurrencySettlementAmount != null && this.De005IssuerCurrencySettlementAmount.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for De005IssuerCurrencySettlementAmount, length must be greater than 0.", new [] { "De005IssuerCurrencySettlementAmount" });
            }

            // De006CardholderBillingAmount (string) maxLength
            if(this.De006CardholderBillingAmount != null && this.De006CardholderBillingAmount.Length > 12)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for De006CardholderBillingAmount, length must be less than 12.", new [] { "De006CardholderBillingAmount" });
            }

            // De006CardholderBillingAmount (string) minLength
            if(this.De006CardholderBillingAmount != null && this.De006CardholderBillingAmount.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for De006CardholderBillingAmount, length must be greater than 0.", new [] { "De006CardholderBillingAmount" });
            }

            // De012TransactionTime (string) maxLength
            if(this.De012TransactionTime != null && this.De012TransactionTime.Length > 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for De012TransactionTime, length must be less than 6.", new [] { "De012TransactionTime" });
            }

            // De012TransactionTime (string) minLength
            if(this.De012TransactionTime != null && this.De012TransactionTime.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for De012TransactionTime, length must be greater than 0.", new [] { "De012TransactionTime" });
            }

            // De013TransactionDate (string) maxLength
            if(this.De013TransactionDate != null && this.De013TransactionDate.Length > 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for De013TransactionDate, length must be less than 4.", new [] { "De013TransactionDate" });
            }

            // De013TransactionDate (string) minLength
            if(this.De013TransactionDate != null && this.De013TransactionDate.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for De013TransactionDate, length must be greater than 0.", new [] { "De013TransactionDate" });
            }

            // De018MerchantCode (string) maxLength
            if(this.De018MerchantCode != null && this.De018MerchantCode.Length > 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for De018MerchantCode, length must be less than 4.", new [] { "De018MerchantCode" });
            }

            // De018MerchantCode (string) minLength
            if(this.De018MerchantCode != null && this.De018MerchantCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for De018MerchantCode, length must be greater than 0.", new [] { "De018MerchantCode" });
            }

            // De032AcquiringInstitutionIdCode (string) maxLength
            if(this.De032AcquiringInstitutionIdCode != null && this.De032AcquiringInstitutionIdCode.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for De032AcquiringInstitutionIdCode, length must be less than 30.", new [] { "De032AcquiringInstitutionIdCode" });
            }

            // De032AcquiringInstitutionIdCode (string) minLength
            if(this.De032AcquiringInstitutionIdCode != null && this.De032AcquiringInstitutionIdCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for De032AcquiringInstitutionIdCode, length must be greater than 0.", new [] { "De032AcquiringInstitutionIdCode" });
            }

            // De039ResponseCode (string) maxLength
            if(this.De039ResponseCode != null && this.De039ResponseCode.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for De039ResponseCode, length must be less than 2.", new [] { "De039ResponseCode" });
            }

            // De039ResponseCode (string) minLength
            if(this.De039ResponseCode != null && this.De039ResponseCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for De039ResponseCode, length must be greater than 0.", new [] { "De039ResponseCode" });
            }

            // De042CardAcceptorIdCode (string) maxLength
            if(this.De042CardAcceptorIdCode != null && this.De042CardAcceptorIdCode.Length > 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for De042CardAcceptorIdCode, length must be less than 15.", new [] { "De042CardAcceptorIdCode" });
            }

            // De042CardAcceptorIdCode (string) minLength
            if(this.De042CardAcceptorIdCode != null && this.De042CardAcceptorIdCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for De042CardAcceptorIdCode, length must be greater than 0.", new [] { "De042CardAcceptorIdCode" });
            }

            // De043CardAcceptorNameLocation (string) maxLength
            if(this.De043CardAcceptorNameLocation != null && this.De043CardAcceptorNameLocation.Length > 160)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for De043CardAcceptorNameLocation, length must be less than 160.", new [] { "De043CardAcceptorNameLocation" });
            }

            // De043CardAcceptorNameLocation (string) minLength
            if(this.De043CardAcceptorNameLocation != null && this.De043CardAcceptorNameLocation.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for De043CardAcceptorNameLocation, length must be greater than 0.", new [] { "De043CardAcceptorNameLocation" });
            }

            // De048TCC (string) maxLength
            if(this.De048TCC != null && this.De048TCC.Length > 1002)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for De048TCC, length must be less than 1002.", new [] { "De048TCC" });
            }

            // De048TCC (string) minLength
            if(this.De048TCC != null && this.De048TCC.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for De048TCC, length must be greater than 0.", new [] { "De048TCC" });
            }

            // De049TransactionCurrencyCode (string) maxLength
            if(this.De049TransactionCurrencyCode != null && this.De049TransactionCurrencyCode.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for De049TransactionCurrencyCode, length must be less than 3.", new [] { "De049TransactionCurrencyCode" });
            }

            // De049TransactionCurrencyCode (string) minLength
            if(this.De049TransactionCurrencyCode != null && this.De049TransactionCurrencyCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for De049TransactionCurrencyCode, length must be greater than 0.", new [] { "De049TransactionCurrencyCode" });
            }

            // De050SettlementCurrencyCode (string) maxLength
            if(this.De050SettlementCurrencyCode != null && this.De050SettlementCurrencyCode.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for De050SettlementCurrencyCode, length must be less than 3.", new [] { "De050SettlementCurrencyCode" });
            }

            // De050SettlementCurrencyCode (string) minLength
            if(this.De050SettlementCurrencyCode != null && this.De050SettlementCurrencyCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for De050SettlementCurrencyCode, length must be greater than 0.", new [] { "De050SettlementCurrencyCode" });
            }

            // De051CardholderBillingCurrencyCode (string) maxLength
            if(this.De051CardholderBillingCurrencyCode != null && this.De051CardholderBillingCurrencyCode.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for De051CardholderBillingCurrencyCode, length must be less than 3.", new [] { "De051CardholderBillingCurrencyCode" });
            }

            // De051CardholderBillingCurrencyCode (string) minLength
            if(this.De051CardholderBillingCurrencyCode != null && this.De051CardholderBillingCurrencyCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for De051CardholderBillingCurrencyCode, length must be greater than 0.", new [] { "De051CardholderBillingCurrencyCode" });
            }

            // PointsRedeemed (string) minLength
            if(this.PointsRedeemed != null && this.PointsRedeemed.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PointsRedeemed, length must be greater than 0.", new [] { "PointsRedeemed" });
            }

            // MerchantCountry (string) maxLength
            if(this.MerchantCountry != null && this.MerchantCountry.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantCountry, length must be less than 3.", new [] { "MerchantCountry" });
            }

            // MerchantCountry (string) minLength
            if(this.MerchantCountry != null && this.MerchantCountry.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantCountry, length must be greater than 0.", new [] { "MerchantCountry" });
            }

            // PointConversionCurrency (string) maxLength
            if(this.PointConversionCurrency != null && this.PointConversionCurrency.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PointConversionCurrency, length must be less than 3.", new [] { "PointConversionCurrency" });
            }

            // PointConversionCurrency (string) minLength
            if(this.PointConversionCurrency != null && this.PointConversionCurrency.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PointConversionCurrency, length must be greater than 0.", new [] { "PointConversionCurrency" });
            }

            yield break;
        }
    }

}
