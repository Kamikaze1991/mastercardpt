/*
 * Pay with Rewards APIs
 *
 * Pay with Rewards allows cardholders to redeem points for purchases made with an enrolled Mastercard card. The following APIs create the Pay with Rewards user experience, and can be used inside a banking app or other mobile apps.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: paywithrewards@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Pbo.App.MastercardApi.Client.Client.OpenAPIDateConverter;

namespace Pbo.App.MastercardApi.Client.Model
{
    /// <summary>
    /// AuthorizationPostResponse
    /// </summary>
    [DataContract(Name = "AuthorizationPostResponse")]
    public partial class AuthorizationPostResponse : IEquatable<AuthorizationPostResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizationPostResponse" /> class.
        /// </summary>
        /// <param name="authRewardsServiceType">Rewards service type configured for the program. For example- Auth Based Messaging..</param>
        /// <param name="id">Unique transaction identifier created by Mastercard Rewards System..</param>
        /// <param name="programId">Program identifier for the program in which the cardholder is enrolled. Program id is created by Mastercard Rewards System..</param>
        /// <param name="responseReasonDesc">Response reason description assigned by Mastercard Rewards System for the transaction..</param>
        /// <param name="responseReasonId">Response reason code provided by Mastercard Rewards System for the transaction..</param>
        public AuthorizationPostResponse(string authRewardsServiceType = default(string), string id = default(string), string programId = default(string), string responseReasonDesc = default(string), string responseReasonId = default(string))
        {
            this.AuthRewardsServiceType = authRewardsServiceType;
            this.Id = id;
            this.ProgramId = programId;
            this.ResponseReasonDesc = responseReasonDesc;
            this.ResponseReasonId = responseReasonId;
        }

        /// <summary>
        /// Rewards service type configured for the program. For example- Auth Based Messaging.
        /// </summary>
        /// <value>Rewards service type configured for the program. For example- Auth Based Messaging.</value>
        [DataMember(Name = "authRewardsServiceType", EmitDefaultValue = false)]
        public string AuthRewardsServiceType { get; set; }

        /// <summary>
        /// Unique transaction identifier created by Mastercard Rewards System.
        /// </summary>
        /// <value>Unique transaction identifier created by Mastercard Rewards System.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Program identifier for the program in which the cardholder is enrolled. Program id is created by Mastercard Rewards System.
        /// </summary>
        /// <value>Program identifier for the program in which the cardholder is enrolled. Program id is created by Mastercard Rewards System.</value>
        [DataMember(Name = "programId", EmitDefaultValue = false)]
        public string ProgramId { get; set; }

        /// <summary>
        /// Response reason description assigned by Mastercard Rewards System for the transaction.
        /// </summary>
        /// <value>Response reason description assigned by Mastercard Rewards System for the transaction.</value>
        [DataMember(Name = "responseReasonDesc", EmitDefaultValue = false)]
        public string ResponseReasonDesc { get; set; }

        /// <summary>
        /// Response reason code provided by Mastercard Rewards System for the transaction.
        /// </summary>
        /// <value>Response reason code provided by Mastercard Rewards System for the transaction.</value>
        [DataMember(Name = "responseReasonId", EmitDefaultValue = false)]
        public string ResponseReasonId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuthorizationPostResponse {\n");
            sb.Append("  AuthRewardsServiceType: ").Append(AuthRewardsServiceType).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProgramId: ").Append(ProgramId).Append("\n");
            sb.Append("  ResponseReasonDesc: ").Append(ResponseReasonDesc).Append("\n");
            sb.Append("  ResponseReasonId: ").Append(ResponseReasonId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthorizationPostResponse);
        }

        /// <summary>
        /// Returns true if AuthorizationPostResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthorizationPostResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthorizationPostResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AuthRewardsServiceType == input.AuthRewardsServiceType ||
                    (this.AuthRewardsServiceType != null &&
                    this.AuthRewardsServiceType.Equals(input.AuthRewardsServiceType))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ProgramId == input.ProgramId ||
                    (this.ProgramId != null &&
                    this.ProgramId.Equals(input.ProgramId))
                ) && 
                (
                    this.ResponseReasonDesc == input.ResponseReasonDesc ||
                    (this.ResponseReasonDesc != null &&
                    this.ResponseReasonDesc.Equals(input.ResponseReasonDesc))
                ) && 
                (
                    this.ResponseReasonId == input.ResponseReasonId ||
                    (this.ResponseReasonId != null &&
                    this.ResponseReasonId.Equals(input.ResponseReasonId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthRewardsServiceType != null)
                    hashCode = hashCode * 59 + this.AuthRewardsServiceType.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ProgramId != null)
                    hashCode = hashCode * 59 + this.ProgramId.GetHashCode();
                if (this.ResponseReasonDesc != null)
                    hashCode = hashCode * 59 + this.ResponseReasonDesc.GetHashCode();
                if (this.ResponseReasonId != null)
                    hashCode = hashCode * 59 + this.ResponseReasonId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AuthRewardsServiceType (string) maxLength
            if(this.AuthRewardsServiceType != null && this.AuthRewardsServiceType.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AuthRewardsServiceType, length must be less than 10.", new [] { "AuthRewardsServiceType" });
            }

            // AuthRewardsServiceType (string) minLength
            if(this.AuthRewardsServiceType != null && this.AuthRewardsServiceType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AuthRewardsServiceType, length must be greater than 1.", new [] { "AuthRewardsServiceType" });
            }

            // Id (string) maxLength
            if(this.Id != null && this.Id.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, length must be less than 10.", new [] { "Id" });
            }

            // Id (string) minLength
            if(this.Id != null && this.Id.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, length must be greater than 1.", new [] { "Id" });
            }

            // ProgramId (string) maxLength
            if(this.ProgramId != null && this.ProgramId.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProgramId, length must be less than 10.", new [] { "ProgramId" });
            }

            // ProgramId (string) minLength
            if(this.ProgramId != null && this.ProgramId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProgramId, length must be greater than 1.", new [] { "ProgramId" });
            }

            // ResponseReasonDesc (string) maxLength
            if(this.ResponseReasonDesc != null && this.ResponseReasonDesc.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ResponseReasonDesc, length must be less than 255.", new [] { "ResponseReasonDesc" });
            }

            // ResponseReasonDesc (string) minLength
            if(this.ResponseReasonDesc != null && this.ResponseReasonDesc.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ResponseReasonDesc, length must be greater than 1.", new [] { "ResponseReasonDesc" });
            }

            // ResponseReasonId (string) maxLength
            if(this.ResponseReasonId != null && this.ResponseReasonId.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ResponseReasonId, length must be less than 10.", new [] { "ResponseReasonId" });
            }

            // ResponseReasonId (string) minLength
            if(this.ResponseReasonId != null && this.ResponseReasonId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ResponseReasonId, length must be greater than 1.", new [] { "ResponseReasonId" });
            }

            yield break;
        }
    }

}
