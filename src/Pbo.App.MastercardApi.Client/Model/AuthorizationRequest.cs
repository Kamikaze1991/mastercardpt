/*
 * Pay with Rewards APIs
 *
 * Pay with Rewards allows cardholders to redeem points for purchases made with an enrolled Mastercard card. The following APIs create the Pay with Rewards user experience, and can be used inside a banking app or other mobile apps.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: paywithrewards@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Pbo.App.MastercardApi.Client.Client.OpenAPIDateConverter;

namespace Pbo.App.MastercardApi.Client.Model
{
    /// <summary>
    /// AuthorizationRequest
    /// </summary>
    [DataContract(Name = "AuthorizationRequest")]
    public partial class AuthorizationRequest : IEquatable<AuthorizationRequest>, IValidatableObject
    {
        /// <summary>
        /// DE 3, subfield 1. Required.
        /// </summary>
        /// <value>DE 3, subfield 1. Required.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProcessingCodeEnum
        {
            /// <summary>
            /// Enum PURCHASE for value: PURCHASE
            /// </summary>
            [EnumMember(Value = "PURCHASE")]
            PURCHASE = 1,

            /// <summary>
            /// Enum PURCHASEWITHCASHBACK for value: PURCHASE_WITH_CASHBACK
            /// </summary>
            [EnumMember(Value = "PURCHASE_WITH_CASHBACK")]
            PURCHASEWITHCASHBACK = 2

        }

        /// <summary>
        /// DE 3, subfield 1. Required.
        /// </summary>
        /// <value>DE 3, subfield 1. Required.</value>
        [DataMember(Name = "processingCode", IsRequired = true, EmitDefaultValue = false)]
        public ProcessingCodeEnum ProcessingCode { get; set; }
        /// <summary>
        /// Set to &#39;Y&#39; to queue the authorization for processing without receiving a response. If queueTransaction&#x3D;&#39;Y&#39; the only field populated in the response will be responseMessage. Required.
        /// </summary>
        /// <value>Set to &#39;Y&#39; to queue the authorization for processing without receiving a response. If queueTransaction&#x3D;&#39;Y&#39; the only field populated in the response will be responseMessage. Required.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum QueueTransactionEnum
        {
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,

            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2

        }

        /// <summary>
        /// Set to &#39;Y&#39; to queue the authorization for processing without receiving a response. If queueTransaction&#x3D;&#39;Y&#39; the only field populated in the response will be responseMessage. Required.
        /// </summary>
        /// <value>Set to &#39;Y&#39; to queue the authorization for processing without receiving a response. If queueTransaction&#x3D;&#39;Y&#39; the only field populated in the response will be responseMessage. Required.</value>
        [DataMember(Name = "queueTransaction", IsRequired = true, EmitDefaultValue = false)]
        public QueueTransactionEnum QueueTransaction { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizationRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuthorizationRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizationRequest" /> class.
        /// </summary>
        /// <param name="accountId1">DE102. Optional..</param>
        /// <param name="accountId2">DE103. Optional..</param>
        /// <param name="accountNumber">DE 48, subelement 33, subfield 2. Optional..</param>
        /// <param name="accountNumberIndicator">DE 48, subelement 33, subfield 1. Optional..</param>
        /// <param name="acquiringInstitutionIdCode">Acquiring Institution ID Code - DE 32. This field is numeric. Required. (required).</param>
        /// <param name="additionalAmount">DE 54. Optional..</param>
        /// <param name="amountCardholderBillingFee">DE 8. Optional..</param>
        /// <param name="authorizationIdResponse">DE 38. Optional..</param>
        /// <param name="cardAcceptorIdCode">Merchant ID code to uniquely identify the merchant in a POS transaction - DE 42. Required. (required).</param>
        /// <param name="cardAcceptorNameAndLocation">Name and location of the card acceptor - DE 43. Required. (required).</param>
        /// <param name="cardholderAccountTerminalLevel">Type of cardholder activated terminal used by the cardholder to initiate the transaction - (DE 61, subfield 10). This field should be numeric. Optional..</param>
        /// <param name="cardholderBillingAmount">Transaction amount in the issuer&#39;s currency. This is the amount billed to the cardholder in the cardholder account currency, excluding billing fees - DE 6. Required. (required).</param>
        /// <param name="cardholderBillingCurrencyCode">Currency code of card holder billing amount. Code is accepted in alpha-3 format of ISO 4217 currency codes - DE 51. Required. (required).</param>
        /// <param name="conversionRateCardholderBilling">DE 10. Optional..</param>
        /// <param name="conversionRateSettled">DE 9. Optional..</param>
        /// <param name="expirationDate">DE 48, subelement 33, subfield 3. Should be in YYMM format. Optional..</param>
        /// <param name="externalId">Client reference number for the authorization. Should be a unique identifier. Required. (required).</param>
        /// <param name="forwardingInstitutionIdCode">DE 33. Optional..</param>
        /// <param name="issuerSettlementAmount">DE 5. Optional..</param>
        /// <param name="merchantCategoryCode">Card acceptor business code/merchant category code [MCC] - DE 18. Required. (required).</param>
        /// <param name="onBehalfService">DE 48, subelement 71, subfield 1. Optional..</param>
        /// <param name="onBehalfServiceResult1">DE 48, subelement 71, subfield 2. Optional..</param>
        /// <param name="onBehalfServiceResult2">DE 48, subelement 71, subfield 3. Optional..</param>
        /// <param name="originalDataElement">DE 90. Optional..</param>
        /// <param name="panMappingFileInformation">DE 48, subelement 33. Optional..</param>
        /// <param name="pointOfSaleCaptureCapabilities">DE 61, subfield 6. Optional..</param>
        /// <param name="pointOfSaleCardPresence">DE 61, subfield 5. Optional..</param>
        /// <param name="pointOfSaleCardTerminalInputCapability">DE 61, subfield 10. Optional..</param>
        /// <param name="pointOfSaleCardholderPresence">DE 61, subfield 4. Optional..</param>
        /// <param name="pointOfSaleCountryCode">DE 61, subfield 13. Optional..</param>
        /// <param name="pointOfSaleData">DE 61, subfield 13. Optional..</param>
        /// <param name="pointOfSaleEntryMode">DE 22. Optional..</param>
        /// <param name="pointOfSalePostalCode">DE 61, subfield 14. Optional..</param>
        /// <param name="primaryAccountNumber">DE 48, subelement 33, subfield 7. Optional..</param>
        /// <param name="processingCode">DE 3, subfield 1. Required. (required).</param>
        /// <param name="productCode">DE 48, subelement 33, subfield 4. Optional..</param>
        /// <param name="reconciliationCurrencyCode">DE 50. Optional..</param>
        /// <param name="replacementAmount">DE 95. Optional..</param>
        /// <param name="reserved">DE 60. Optional..</param>
        /// <param name="responseCode">DE 39. Optional..</param>
        /// <param name="systemTraceAuditNumber">DE 11. Optional..</param>
        /// <param name="tokenAssuranceLevel">DE 48, subelement 33, subfield 5. Optional..</param>
        /// <param name="tokenRequestorId">DE 48, subelement 33, subfield 6. Optional..</param>
        /// <param name="transactionAmount">DE 4. Optional..</param>
        /// <param name="transactionCategoryCode">DE 48. Optional..</param>
        /// <param name="transactionCurrencyCode">DE 49. Optional..</param>
        /// <param name="transactionDateAndTime">Authorization date and time in \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssXXX\&quot; format. Required. (required).</param>
        /// <param name="accountId">Unique identifier of the account. Required. (required).</param>
        /// <param name="accountIdType">Identifier type for the given account such as BAN. Required. (required).</param>
        /// <param name="walletIdentifier">DE 48, subelement 26, subfield 1. Optional..</param>
        /// <param name="issuerCountryCode">DE 20. Required. (required).</param>
        /// <param name="queueTransaction">Set to &#39;Y&#39; to queue the authorization for processing without receiving a response. If queueTransaction&#x3D;&#39;Y&#39; the only field populated in the response will be responseMessage. Required. (required).</param>
        public AuthorizationRequest(string accountId1 = default(string), string accountId2 = default(string), string accountNumber = default(string), string accountNumberIndicator = default(string), string acquiringInstitutionIdCode = default(string), string additionalAmount = default(string), string amountCardholderBillingFee = default(string), string authorizationIdResponse = default(string), string cardAcceptorIdCode = default(string), string cardAcceptorNameAndLocation = default(string), string cardholderAccountTerminalLevel = default(string), string cardholderBillingAmount = default(string), string cardholderBillingCurrencyCode = default(string), string conversionRateCardholderBilling = default(string), string conversionRateSettled = default(string), string expirationDate = default(string), string externalId = default(string), string forwardingInstitutionIdCode = default(string), string issuerSettlementAmount = default(string), string merchantCategoryCode = default(string), string onBehalfService = default(string), string onBehalfServiceResult1 = default(string), string onBehalfServiceResult2 = default(string), string originalDataElement = default(string), string panMappingFileInformation = default(string), string pointOfSaleCaptureCapabilities = default(string), string pointOfSaleCardPresence = default(string), string pointOfSaleCardTerminalInputCapability = default(string), string pointOfSaleCardholderPresence = default(string), string pointOfSaleCountryCode = default(string), string pointOfSaleData = default(string), string pointOfSaleEntryMode = default(string), string pointOfSalePostalCode = default(string), string primaryAccountNumber = default(string), ProcessingCodeEnum processingCode = default(ProcessingCodeEnum), string productCode = default(string), string reconciliationCurrencyCode = default(string), string replacementAmount = default(string), string reserved = default(string), string responseCode = default(string), string systemTraceAuditNumber = default(string), string tokenAssuranceLevel = default(string), string tokenRequestorId = default(string), string transactionAmount = default(string), string transactionCategoryCode = default(string), string transactionCurrencyCode = default(string), string transactionDateAndTime = default(string), string accountId = default(string), string accountIdType = default(string), string walletIdentifier = default(string), string issuerCountryCode = default(string), QueueTransactionEnum queueTransaction = default(QueueTransactionEnum))
        {
            // to ensure "acquiringInstitutionIdCode" is required (not null)
            this.AcquiringInstitutionIdCode = acquiringInstitutionIdCode ?? throw new ArgumentNullException("acquiringInstitutionIdCode is a required property for AuthorizationRequest and cannot be null");
            // to ensure "cardAcceptorIdCode" is required (not null)
            this.CardAcceptorIdCode = cardAcceptorIdCode ?? throw new ArgumentNullException("cardAcceptorIdCode is a required property for AuthorizationRequest and cannot be null");
            // to ensure "cardAcceptorNameAndLocation" is required (not null)
            this.CardAcceptorNameAndLocation = cardAcceptorNameAndLocation ?? throw new ArgumentNullException("cardAcceptorNameAndLocation is a required property for AuthorizationRequest and cannot be null");
            // to ensure "cardholderBillingAmount" is required (not null)
            this.CardholderBillingAmount = cardholderBillingAmount ?? throw new ArgumentNullException("cardholderBillingAmount is a required property for AuthorizationRequest and cannot be null");
            // to ensure "cardholderBillingCurrencyCode" is required (not null)
            this.CardholderBillingCurrencyCode = cardholderBillingCurrencyCode ?? throw new ArgumentNullException("cardholderBillingCurrencyCode is a required property for AuthorizationRequest and cannot be null");
            // to ensure "externalId" is required (not null)
            this.ExternalId = externalId ?? throw new ArgumentNullException("externalId is a required property for AuthorizationRequest and cannot be null");
            // to ensure "merchantCategoryCode" is required (not null)
            this.MerchantCategoryCode = merchantCategoryCode ?? throw new ArgumentNullException("merchantCategoryCode is a required property for AuthorizationRequest and cannot be null");
            this.ProcessingCode = processingCode;
            // to ensure "transactionDateAndTime" is required (not null)
            this.TransactionDateAndTime = transactionDateAndTime ?? throw new ArgumentNullException("transactionDateAndTime is a required property for AuthorizationRequest and cannot be null");
            // to ensure "accountId" is required (not null)
            this.AccountId = accountId ?? throw new ArgumentNullException("accountId is a required property for AuthorizationRequest and cannot be null");
            // to ensure "accountIdType" is required (not null)
            this.AccountIdType = accountIdType ?? throw new ArgumentNullException("accountIdType is a required property for AuthorizationRequest and cannot be null");
            // to ensure "issuerCountryCode" is required (not null)
            this.IssuerCountryCode = issuerCountryCode ?? throw new ArgumentNullException("issuerCountryCode is a required property for AuthorizationRequest and cannot be null");
            this.QueueTransaction = queueTransaction;
            this.AccountId1 = accountId1;
            this.AccountId2 = accountId2;
            this.AccountNumber = accountNumber;
            this.AccountNumberIndicator = accountNumberIndicator;
            this.AdditionalAmount = additionalAmount;
            this.AmountCardholderBillingFee = amountCardholderBillingFee;
            this.AuthorizationIdResponse = authorizationIdResponse;
            this.CardholderAccountTerminalLevel = cardholderAccountTerminalLevel;
            this.ConversionRateCardholderBilling = conversionRateCardholderBilling;
            this.ConversionRateSettled = conversionRateSettled;
            this.ExpirationDate = expirationDate;
            this.ForwardingInstitutionIdCode = forwardingInstitutionIdCode;
            this.IssuerSettlementAmount = issuerSettlementAmount;
            this.OnBehalfService = onBehalfService;
            this.OnBehalfServiceResult1 = onBehalfServiceResult1;
            this.OnBehalfServiceResult2 = onBehalfServiceResult2;
            this.OriginalDataElement = originalDataElement;
            this.PanMappingFileInformation = panMappingFileInformation;
            this.PointOfSaleCaptureCapabilities = pointOfSaleCaptureCapabilities;
            this.PointOfSaleCardPresence = pointOfSaleCardPresence;
            this.PointOfSaleCardTerminalInputCapability = pointOfSaleCardTerminalInputCapability;
            this.PointOfSaleCardholderPresence = pointOfSaleCardholderPresence;
            this.PointOfSaleCountryCode = pointOfSaleCountryCode;
            this.PointOfSaleData = pointOfSaleData;
            this.PointOfSaleEntryMode = pointOfSaleEntryMode;
            this.PointOfSalePostalCode = pointOfSalePostalCode;
            this.PrimaryAccountNumber = primaryAccountNumber;
            this.ProductCode = productCode;
            this.ReconciliationCurrencyCode = reconciliationCurrencyCode;
            this.ReplacementAmount = replacementAmount;
            this.Reserved = reserved;
            this.ResponseCode = responseCode;
            this.SystemTraceAuditNumber = systemTraceAuditNumber;
            this.TokenAssuranceLevel = tokenAssuranceLevel;
            this.TokenRequestorId = tokenRequestorId;
            this.TransactionAmount = transactionAmount;
            this.TransactionCategoryCode = transactionCategoryCode;
            this.TransactionCurrencyCode = transactionCurrencyCode;
            this.WalletIdentifier = walletIdentifier;
        }

        /// <summary>
        /// DE102. Optional.
        /// </summary>
        /// <value>DE102. Optional.</value>
        [DataMember(Name = "accountId1", EmitDefaultValue = false)]
        public string AccountId1 { get; set; }

        /// <summary>
        /// DE103. Optional.
        /// </summary>
        /// <value>DE103. Optional.</value>
        [DataMember(Name = "accountId2", EmitDefaultValue = false)]
        public string AccountId2 { get; set; }

        /// <summary>
        /// DE 48, subelement 33, subfield 2. Optional.
        /// </summary>
        /// <value>DE 48, subelement 33, subfield 2. Optional.</value>
        [DataMember(Name = "accountNumber", EmitDefaultValue = false)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// DE 48, subelement 33, subfield 1. Optional.
        /// </summary>
        /// <value>DE 48, subelement 33, subfield 1. Optional.</value>
        [DataMember(Name = "accountNumberIndicator", EmitDefaultValue = false)]
        public string AccountNumberIndicator { get; set; }

        /// <summary>
        /// Acquiring Institution ID Code - DE 32. This field is numeric. Required.
        /// </summary>
        /// <value>Acquiring Institution ID Code - DE 32. This field is numeric. Required.</value>
        [DataMember(Name = "acquiringInstitutionIdCode", IsRequired = true, EmitDefaultValue = false)]
        public string AcquiringInstitutionIdCode { get; set; }

        /// <summary>
        /// DE 54. Optional.
        /// </summary>
        /// <value>DE 54. Optional.</value>
        [DataMember(Name = "additionalAmount", EmitDefaultValue = false)]
        public string AdditionalAmount { get; set; }

        /// <summary>
        /// DE 8. Optional.
        /// </summary>
        /// <value>DE 8. Optional.</value>
        [DataMember(Name = "amountCardholderBillingFee", EmitDefaultValue = false)]
        public string AmountCardholderBillingFee { get; set; }

        /// <summary>
        /// DE 38. Optional.
        /// </summary>
        /// <value>DE 38. Optional.</value>
        [DataMember(Name = "authorizationIdResponse", EmitDefaultValue = false)]
        public string AuthorizationIdResponse { get; set; }

        /// <summary>
        /// Merchant ID code to uniquely identify the merchant in a POS transaction - DE 42. Required.
        /// </summary>
        /// <value>Merchant ID code to uniquely identify the merchant in a POS transaction - DE 42. Required.</value>
        [DataMember(Name = "cardAcceptorIdCode", IsRequired = true, EmitDefaultValue = false)]
        public string CardAcceptorIdCode { get; set; }

        /// <summary>
        /// Name and location of the card acceptor - DE 43. Required.
        /// </summary>
        /// <value>Name and location of the card acceptor - DE 43. Required.</value>
        [DataMember(Name = "cardAcceptorNameAndLocation", IsRequired = true, EmitDefaultValue = false)]
        public string CardAcceptorNameAndLocation { get; set; }

        /// <summary>
        /// Type of cardholder activated terminal used by the cardholder to initiate the transaction - (DE 61, subfield 10). This field should be numeric. Optional.
        /// </summary>
        /// <value>Type of cardholder activated terminal used by the cardholder to initiate the transaction - (DE 61, subfield 10). This field should be numeric. Optional.</value>
        [DataMember(Name = "cardholderAccountTerminalLevel", EmitDefaultValue = false)]
        public string CardholderAccountTerminalLevel { get; set; }

        /// <summary>
        /// Transaction amount in the issuer&#39;s currency. This is the amount billed to the cardholder in the cardholder account currency, excluding billing fees - DE 6. Required.
        /// </summary>
        /// <value>Transaction amount in the issuer&#39;s currency. This is the amount billed to the cardholder in the cardholder account currency, excluding billing fees - DE 6. Required.</value>
        [DataMember(Name = "cardholderBillingAmount", IsRequired = true, EmitDefaultValue = false)]
        public string CardholderBillingAmount { get; set; }

        /// <summary>
        /// Currency code of card holder billing amount. Code is accepted in alpha-3 format of ISO 4217 currency codes - DE 51. Required.
        /// </summary>
        /// <value>Currency code of card holder billing amount. Code is accepted in alpha-3 format of ISO 4217 currency codes - DE 51. Required.</value>
        [DataMember(Name = "cardholderBillingCurrencyCode", IsRequired = true, EmitDefaultValue = false)]
        public string CardholderBillingCurrencyCode { get; set; }

        /// <summary>
        /// DE 10. Optional.
        /// </summary>
        /// <value>DE 10. Optional.</value>
        [DataMember(Name = "conversionRateCardholderBilling", EmitDefaultValue = false)]
        public string ConversionRateCardholderBilling { get; set; }

        /// <summary>
        /// DE 9. Optional.
        /// </summary>
        /// <value>DE 9. Optional.</value>
        [DataMember(Name = "conversionRateSettled", EmitDefaultValue = false)]
        public string ConversionRateSettled { get; set; }

        /// <summary>
        /// DE 48, subelement 33, subfield 3. Should be in YYMM format. Optional.
        /// </summary>
        /// <value>DE 48, subelement 33, subfield 3. Should be in YYMM format. Optional.</value>
        [DataMember(Name = "expirationDate", EmitDefaultValue = false)]
        public string ExpirationDate { get; set; }

        /// <summary>
        /// Client reference number for the authorization. Should be a unique identifier. Required.
        /// </summary>
        /// <value>Client reference number for the authorization. Should be a unique identifier. Required.</value>
        [DataMember(Name = "externalId", IsRequired = true, EmitDefaultValue = false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// DE 33. Optional.
        /// </summary>
        /// <value>DE 33. Optional.</value>
        [DataMember(Name = "forwardingInstitutionIdCode", EmitDefaultValue = false)]
        public string ForwardingInstitutionIdCode { get; set; }

        /// <summary>
        /// DE 5. Optional.
        /// </summary>
        /// <value>DE 5. Optional.</value>
        [DataMember(Name = "issuerSettlementAmount", EmitDefaultValue = false)]
        public string IssuerSettlementAmount { get; set; }

        /// <summary>
        /// Card acceptor business code/merchant category code [MCC] - DE 18. Required.
        /// </summary>
        /// <value>Card acceptor business code/merchant category code [MCC] - DE 18. Required.</value>
        [DataMember(Name = "merchantCategoryCode", IsRequired = true, EmitDefaultValue = false)]
        public string MerchantCategoryCode { get; set; }

        /// <summary>
        /// DE 48, subelement 71, subfield 1. Optional.
        /// </summary>
        /// <value>DE 48, subelement 71, subfield 1. Optional.</value>
        [DataMember(Name = "onBehalfService", EmitDefaultValue = false)]
        public string OnBehalfService { get; set; }

        /// <summary>
        /// DE 48, subelement 71, subfield 2. Optional.
        /// </summary>
        /// <value>DE 48, subelement 71, subfield 2. Optional.</value>
        [DataMember(Name = "onBehalfServiceResult1", EmitDefaultValue = false)]
        public string OnBehalfServiceResult1 { get; set; }

        /// <summary>
        /// DE 48, subelement 71, subfield 3. Optional.
        /// </summary>
        /// <value>DE 48, subelement 71, subfield 3. Optional.</value>
        [DataMember(Name = "onBehalfServiceResult2", EmitDefaultValue = false)]
        public string OnBehalfServiceResult2 { get; set; }

        /// <summary>
        /// DE 90. Optional.
        /// </summary>
        /// <value>DE 90. Optional.</value>
        [DataMember(Name = "originalDataElement", EmitDefaultValue = false)]
        public string OriginalDataElement { get; set; }

        /// <summary>
        /// DE 48, subelement 33. Optional.
        /// </summary>
        /// <value>DE 48, subelement 33. Optional.</value>
        [DataMember(Name = "panMappingFileInformation", EmitDefaultValue = false)]
        public string PanMappingFileInformation { get; set; }

        /// <summary>
        /// DE 61, subfield 6. Optional.
        /// </summary>
        /// <value>DE 61, subfield 6. Optional.</value>
        [DataMember(Name = "pointOfSaleCaptureCapabilities", EmitDefaultValue = false)]
        public string PointOfSaleCaptureCapabilities { get; set; }

        /// <summary>
        /// DE 61, subfield 5. Optional.
        /// </summary>
        /// <value>DE 61, subfield 5. Optional.</value>
        [DataMember(Name = "pointOfSaleCardPresence", EmitDefaultValue = false)]
        public string PointOfSaleCardPresence { get; set; }

        /// <summary>
        /// DE 61, subfield 10. Optional.
        /// </summary>
        /// <value>DE 61, subfield 10. Optional.</value>
        [DataMember(Name = "pointOfSaleCardTerminalInputCapability", EmitDefaultValue = false)]
        public string PointOfSaleCardTerminalInputCapability { get; set; }

        /// <summary>
        /// DE 61, subfield 4. Optional.
        /// </summary>
        /// <value>DE 61, subfield 4. Optional.</value>
        [DataMember(Name = "pointOfSaleCardholderPresence", EmitDefaultValue = false)]
        public string PointOfSaleCardholderPresence { get; set; }

        /// <summary>
        /// DE 61, subfield 13. Optional.
        /// </summary>
        /// <value>DE 61, subfield 13. Optional.</value>
        [DataMember(Name = "pointOfSaleCountryCode", EmitDefaultValue = false)]
        public string PointOfSaleCountryCode { get; set; }

        /// <summary>
        /// DE 61, subfield 13. Optional.
        /// </summary>
        /// <value>DE 61, subfield 13. Optional.</value>
        [DataMember(Name = "pointOfSaleData", EmitDefaultValue = false)]
        public string PointOfSaleData { get; set; }

        /// <summary>
        /// DE 22. Optional.
        /// </summary>
        /// <value>DE 22. Optional.</value>
        [DataMember(Name = "pointOfSaleEntryMode", EmitDefaultValue = false)]
        public string PointOfSaleEntryMode { get; set; }

        /// <summary>
        /// DE 61, subfield 14. Optional.
        /// </summary>
        /// <value>DE 61, subfield 14. Optional.</value>
        [DataMember(Name = "pointOfSalePostalCode", EmitDefaultValue = false)]
        public string PointOfSalePostalCode { get; set; }

        /// <summary>
        /// DE 48, subelement 33, subfield 7. Optional.
        /// </summary>
        /// <value>DE 48, subelement 33, subfield 7. Optional.</value>
        [DataMember(Name = "primaryAccountNumber", EmitDefaultValue = false)]
        public string PrimaryAccountNumber { get; set; }

        /// <summary>
        /// DE 48, subelement 33, subfield 4. Optional.
        /// </summary>
        /// <value>DE 48, subelement 33, subfield 4. Optional.</value>
        [DataMember(Name = "productCode", EmitDefaultValue = false)]
        public string ProductCode { get; set; }

        /// <summary>
        /// DE 50. Optional.
        /// </summary>
        /// <value>DE 50. Optional.</value>
        [DataMember(Name = "reconciliationCurrencyCode", EmitDefaultValue = false)]
        public string ReconciliationCurrencyCode { get; set; }

        /// <summary>
        /// DE 95. Optional.
        /// </summary>
        /// <value>DE 95. Optional.</value>
        [DataMember(Name = "replacementAmount", EmitDefaultValue = false)]
        public string ReplacementAmount { get; set; }

        /// <summary>
        /// DE 60. Optional.
        /// </summary>
        /// <value>DE 60. Optional.</value>
        [DataMember(Name = "reserved", EmitDefaultValue = false)]
        public string Reserved { get; set; }

        /// <summary>
        /// DE 39. Optional.
        /// </summary>
        /// <value>DE 39. Optional.</value>
        [DataMember(Name = "responseCode", EmitDefaultValue = false)]
        public string ResponseCode { get; set; }

        /// <summary>
        /// DE 11. Optional.
        /// </summary>
        /// <value>DE 11. Optional.</value>
        [DataMember(Name = "systemTraceAuditNumber", EmitDefaultValue = false)]
        public string SystemTraceAuditNumber { get; set; }

        /// <summary>
        /// DE 48, subelement 33, subfield 5. Optional.
        /// </summary>
        /// <value>DE 48, subelement 33, subfield 5. Optional.</value>
        [DataMember(Name = "tokenAssuranceLevel", EmitDefaultValue = false)]
        public string TokenAssuranceLevel { get; set; }

        /// <summary>
        /// DE 48, subelement 33, subfield 6. Optional.
        /// </summary>
        /// <value>DE 48, subelement 33, subfield 6. Optional.</value>
        [DataMember(Name = "tokenRequestorId", EmitDefaultValue = false)]
        public string TokenRequestorId { get; set; }

        /// <summary>
        /// DE 4. Optional.
        /// </summary>
        /// <value>DE 4. Optional.</value>
        [DataMember(Name = "transactionAmount", EmitDefaultValue = false)]
        public string TransactionAmount { get; set; }

        /// <summary>
        /// DE 48. Optional.
        /// </summary>
        /// <value>DE 48. Optional.</value>
        [DataMember(Name = "transactionCategoryCode", EmitDefaultValue = false)]
        public string TransactionCategoryCode { get; set; }

        /// <summary>
        /// DE 49. Optional.
        /// </summary>
        /// <value>DE 49. Optional.</value>
        [DataMember(Name = "transactionCurrencyCode", EmitDefaultValue = false)]
        public string TransactionCurrencyCode { get; set; }

        /// <summary>
        /// Authorization date and time in \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssXXX\&quot; format. Required.
        /// </summary>
        /// <value>Authorization date and time in \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssXXX\&quot; format. Required.</value>
        [DataMember(Name = "transactionDateAndTime", IsRequired = true, EmitDefaultValue = false)]
        public string TransactionDateAndTime { get; set; }

        /// <summary>
        /// Unique identifier of the account. Required.
        /// </summary>
        /// <value>Unique identifier of the account. Required.</value>
        [DataMember(Name = "accountId", IsRequired = true, EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Identifier type for the given account such as BAN. Required.
        /// </summary>
        /// <value>Identifier type for the given account such as BAN. Required.</value>
        [DataMember(Name = "accountIdType", IsRequired = true, EmitDefaultValue = false)]
        public string AccountIdType { get; set; }

        /// <summary>
        /// DE 48, subelement 26, subfield 1. Optional.
        /// </summary>
        /// <value>DE 48, subelement 26, subfield 1. Optional.</value>
        [DataMember(Name = "walletIdentifier", EmitDefaultValue = false)]
        public string WalletIdentifier { get; set; }

        /// <summary>
        /// DE 20. Required.
        /// </summary>
        /// <value>DE 20. Required.</value>
        [DataMember(Name = "issuerCountryCode", IsRequired = true, EmitDefaultValue = false)]
        public string IssuerCountryCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuthorizationRequest {\n");
            sb.Append("  AccountId1: ").Append(AccountId1).Append("\n");
            sb.Append("  AccountId2: ").Append(AccountId2).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  AccountNumberIndicator: ").Append(AccountNumberIndicator).Append("\n");
            sb.Append("  AcquiringInstitutionIdCode: ").Append(AcquiringInstitutionIdCode).Append("\n");
            sb.Append("  AdditionalAmount: ").Append(AdditionalAmount).Append("\n");
            sb.Append("  AmountCardholderBillingFee: ").Append(AmountCardholderBillingFee).Append("\n");
            sb.Append("  AuthorizationIdResponse: ").Append(AuthorizationIdResponse).Append("\n");
            sb.Append("  CardAcceptorIdCode: ").Append(CardAcceptorIdCode).Append("\n");
            sb.Append("  CardAcceptorNameAndLocation: ").Append(CardAcceptorNameAndLocation).Append("\n");
            sb.Append("  CardholderAccountTerminalLevel: ").Append(CardholderAccountTerminalLevel).Append("\n");
            sb.Append("  CardholderBillingAmount: ").Append(CardholderBillingAmount).Append("\n");
            sb.Append("  CardholderBillingCurrencyCode: ").Append(CardholderBillingCurrencyCode).Append("\n");
            sb.Append("  ConversionRateCardholderBilling: ").Append(ConversionRateCardholderBilling).Append("\n");
            sb.Append("  ConversionRateSettled: ").Append(ConversionRateSettled).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  ForwardingInstitutionIdCode: ").Append(ForwardingInstitutionIdCode).Append("\n");
            sb.Append("  IssuerSettlementAmount: ").Append(IssuerSettlementAmount).Append("\n");
            sb.Append("  MerchantCategoryCode: ").Append(MerchantCategoryCode).Append("\n");
            sb.Append("  OnBehalfService: ").Append(OnBehalfService).Append("\n");
            sb.Append("  OnBehalfServiceResult1: ").Append(OnBehalfServiceResult1).Append("\n");
            sb.Append("  OnBehalfServiceResult2: ").Append(OnBehalfServiceResult2).Append("\n");
            sb.Append("  OriginalDataElement: ").Append(OriginalDataElement).Append("\n");
            sb.Append("  PanMappingFileInformation: ").Append(PanMappingFileInformation).Append("\n");
            sb.Append("  PointOfSaleCaptureCapabilities: ").Append(PointOfSaleCaptureCapabilities).Append("\n");
            sb.Append("  PointOfSaleCardPresence: ").Append(PointOfSaleCardPresence).Append("\n");
            sb.Append("  PointOfSaleCardTerminalInputCapability: ").Append(PointOfSaleCardTerminalInputCapability).Append("\n");
            sb.Append("  PointOfSaleCardholderPresence: ").Append(PointOfSaleCardholderPresence).Append("\n");
            sb.Append("  PointOfSaleCountryCode: ").Append(PointOfSaleCountryCode).Append("\n");
            sb.Append("  PointOfSaleData: ").Append(PointOfSaleData).Append("\n");
            sb.Append("  PointOfSaleEntryMode: ").Append(PointOfSaleEntryMode).Append("\n");
            sb.Append("  PointOfSalePostalCode: ").Append(PointOfSalePostalCode).Append("\n");
            sb.Append("  PrimaryAccountNumber: ").Append(PrimaryAccountNumber).Append("\n");
            sb.Append("  ProcessingCode: ").Append(ProcessingCode).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  ReconciliationCurrencyCode: ").Append(ReconciliationCurrencyCode).Append("\n");
            sb.Append("  ReplacementAmount: ").Append(ReplacementAmount).Append("\n");
            sb.Append("  Reserved: ").Append(Reserved).Append("\n");
            sb.Append("  ResponseCode: ").Append(ResponseCode).Append("\n");
            sb.Append("  SystemTraceAuditNumber: ").Append(SystemTraceAuditNumber).Append("\n");
            sb.Append("  TokenAssuranceLevel: ").Append(TokenAssuranceLevel).Append("\n");
            sb.Append("  TokenRequestorId: ").Append(TokenRequestorId).Append("\n");
            sb.Append("  TransactionAmount: ").Append(TransactionAmount).Append("\n");
            sb.Append("  TransactionCategoryCode: ").Append(TransactionCategoryCode).Append("\n");
            sb.Append("  TransactionCurrencyCode: ").Append(TransactionCurrencyCode).Append("\n");
            sb.Append("  TransactionDateAndTime: ").Append(TransactionDateAndTime).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountIdType: ").Append(AccountIdType).Append("\n");
            sb.Append("  WalletIdentifier: ").Append(WalletIdentifier).Append("\n");
            sb.Append("  IssuerCountryCode: ").Append(IssuerCountryCode).Append("\n");
            sb.Append("  QueueTransaction: ").Append(QueueTransaction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthorizationRequest);
        }

        /// <summary>
        /// Returns true if AuthorizationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthorizationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthorizationRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountId1 == input.AccountId1 ||
                    (this.AccountId1 != null &&
                    this.AccountId1.Equals(input.AccountId1))
                ) && 
                (
                    this.AccountId2 == input.AccountId2 ||
                    (this.AccountId2 != null &&
                    this.AccountId2.Equals(input.AccountId2))
                ) && 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.AccountNumberIndicator == input.AccountNumberIndicator ||
                    (this.AccountNumberIndicator != null &&
                    this.AccountNumberIndicator.Equals(input.AccountNumberIndicator))
                ) && 
                (
                    this.AcquiringInstitutionIdCode == input.AcquiringInstitutionIdCode ||
                    (this.AcquiringInstitutionIdCode != null &&
                    this.AcquiringInstitutionIdCode.Equals(input.AcquiringInstitutionIdCode))
                ) && 
                (
                    this.AdditionalAmount == input.AdditionalAmount ||
                    (this.AdditionalAmount != null &&
                    this.AdditionalAmount.Equals(input.AdditionalAmount))
                ) && 
                (
                    this.AmountCardholderBillingFee == input.AmountCardholderBillingFee ||
                    (this.AmountCardholderBillingFee != null &&
                    this.AmountCardholderBillingFee.Equals(input.AmountCardholderBillingFee))
                ) && 
                (
                    this.AuthorizationIdResponse == input.AuthorizationIdResponse ||
                    (this.AuthorizationIdResponse != null &&
                    this.AuthorizationIdResponse.Equals(input.AuthorizationIdResponse))
                ) && 
                (
                    this.CardAcceptorIdCode == input.CardAcceptorIdCode ||
                    (this.CardAcceptorIdCode != null &&
                    this.CardAcceptorIdCode.Equals(input.CardAcceptorIdCode))
                ) && 
                (
                    this.CardAcceptorNameAndLocation == input.CardAcceptorNameAndLocation ||
                    (this.CardAcceptorNameAndLocation != null &&
                    this.CardAcceptorNameAndLocation.Equals(input.CardAcceptorNameAndLocation))
                ) && 
                (
                    this.CardholderAccountTerminalLevel == input.CardholderAccountTerminalLevel ||
                    (this.CardholderAccountTerminalLevel != null &&
                    this.CardholderAccountTerminalLevel.Equals(input.CardholderAccountTerminalLevel))
                ) && 
                (
                    this.CardholderBillingAmount == input.CardholderBillingAmount ||
                    (this.CardholderBillingAmount != null &&
                    this.CardholderBillingAmount.Equals(input.CardholderBillingAmount))
                ) && 
                (
                    this.CardholderBillingCurrencyCode == input.CardholderBillingCurrencyCode ||
                    (this.CardholderBillingCurrencyCode != null &&
                    this.CardholderBillingCurrencyCode.Equals(input.CardholderBillingCurrencyCode))
                ) && 
                (
                    this.ConversionRateCardholderBilling == input.ConversionRateCardholderBilling ||
                    (this.ConversionRateCardholderBilling != null &&
                    this.ConversionRateCardholderBilling.Equals(input.ConversionRateCardholderBilling))
                ) && 
                (
                    this.ConversionRateSettled == input.ConversionRateSettled ||
                    (this.ConversionRateSettled != null &&
                    this.ConversionRateSettled.Equals(input.ConversionRateSettled))
                ) && 
                (
                    this.ExpirationDate == input.ExpirationDate ||
                    (this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(input.ExpirationDate))
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.ForwardingInstitutionIdCode == input.ForwardingInstitutionIdCode ||
                    (this.ForwardingInstitutionIdCode != null &&
                    this.ForwardingInstitutionIdCode.Equals(input.ForwardingInstitutionIdCode))
                ) && 
                (
                    this.IssuerSettlementAmount == input.IssuerSettlementAmount ||
                    (this.IssuerSettlementAmount != null &&
                    this.IssuerSettlementAmount.Equals(input.IssuerSettlementAmount))
                ) && 
                (
                    this.MerchantCategoryCode == input.MerchantCategoryCode ||
                    (this.MerchantCategoryCode != null &&
                    this.MerchantCategoryCode.Equals(input.MerchantCategoryCode))
                ) && 
                (
                    this.OnBehalfService == input.OnBehalfService ||
                    (this.OnBehalfService != null &&
                    this.OnBehalfService.Equals(input.OnBehalfService))
                ) && 
                (
                    this.OnBehalfServiceResult1 == input.OnBehalfServiceResult1 ||
                    (this.OnBehalfServiceResult1 != null &&
                    this.OnBehalfServiceResult1.Equals(input.OnBehalfServiceResult1))
                ) && 
                (
                    this.OnBehalfServiceResult2 == input.OnBehalfServiceResult2 ||
                    (this.OnBehalfServiceResult2 != null &&
                    this.OnBehalfServiceResult2.Equals(input.OnBehalfServiceResult2))
                ) && 
                (
                    this.OriginalDataElement == input.OriginalDataElement ||
                    (this.OriginalDataElement != null &&
                    this.OriginalDataElement.Equals(input.OriginalDataElement))
                ) && 
                (
                    this.PanMappingFileInformation == input.PanMappingFileInformation ||
                    (this.PanMappingFileInformation != null &&
                    this.PanMappingFileInformation.Equals(input.PanMappingFileInformation))
                ) && 
                (
                    this.PointOfSaleCaptureCapabilities == input.PointOfSaleCaptureCapabilities ||
                    (this.PointOfSaleCaptureCapabilities != null &&
                    this.PointOfSaleCaptureCapabilities.Equals(input.PointOfSaleCaptureCapabilities))
                ) && 
                (
                    this.PointOfSaleCardPresence == input.PointOfSaleCardPresence ||
                    (this.PointOfSaleCardPresence != null &&
                    this.PointOfSaleCardPresence.Equals(input.PointOfSaleCardPresence))
                ) && 
                (
                    this.PointOfSaleCardTerminalInputCapability == input.PointOfSaleCardTerminalInputCapability ||
                    (this.PointOfSaleCardTerminalInputCapability != null &&
                    this.PointOfSaleCardTerminalInputCapability.Equals(input.PointOfSaleCardTerminalInputCapability))
                ) && 
                (
                    this.PointOfSaleCardholderPresence == input.PointOfSaleCardholderPresence ||
                    (this.PointOfSaleCardholderPresence != null &&
                    this.PointOfSaleCardholderPresence.Equals(input.PointOfSaleCardholderPresence))
                ) && 
                (
                    this.PointOfSaleCountryCode == input.PointOfSaleCountryCode ||
                    (this.PointOfSaleCountryCode != null &&
                    this.PointOfSaleCountryCode.Equals(input.PointOfSaleCountryCode))
                ) && 
                (
                    this.PointOfSaleData == input.PointOfSaleData ||
                    (this.PointOfSaleData != null &&
                    this.PointOfSaleData.Equals(input.PointOfSaleData))
                ) && 
                (
                    this.PointOfSaleEntryMode == input.PointOfSaleEntryMode ||
                    (this.PointOfSaleEntryMode != null &&
                    this.PointOfSaleEntryMode.Equals(input.PointOfSaleEntryMode))
                ) && 
                (
                    this.PointOfSalePostalCode == input.PointOfSalePostalCode ||
                    (this.PointOfSalePostalCode != null &&
                    this.PointOfSalePostalCode.Equals(input.PointOfSalePostalCode))
                ) && 
                (
                    this.PrimaryAccountNumber == input.PrimaryAccountNumber ||
                    (this.PrimaryAccountNumber != null &&
                    this.PrimaryAccountNumber.Equals(input.PrimaryAccountNumber))
                ) && 
                (
                    this.ProcessingCode == input.ProcessingCode ||
                    this.ProcessingCode.Equals(input.ProcessingCode)
                ) && 
                (
                    this.ProductCode == input.ProductCode ||
                    (this.ProductCode != null &&
                    this.ProductCode.Equals(input.ProductCode))
                ) && 
                (
                    this.ReconciliationCurrencyCode == input.ReconciliationCurrencyCode ||
                    (this.ReconciliationCurrencyCode != null &&
                    this.ReconciliationCurrencyCode.Equals(input.ReconciliationCurrencyCode))
                ) && 
                (
                    this.ReplacementAmount == input.ReplacementAmount ||
                    (this.ReplacementAmount != null &&
                    this.ReplacementAmount.Equals(input.ReplacementAmount))
                ) && 
                (
                    this.Reserved == input.Reserved ||
                    (this.Reserved != null &&
                    this.Reserved.Equals(input.Reserved))
                ) && 
                (
                    this.ResponseCode == input.ResponseCode ||
                    (this.ResponseCode != null &&
                    this.ResponseCode.Equals(input.ResponseCode))
                ) && 
                (
                    this.SystemTraceAuditNumber == input.SystemTraceAuditNumber ||
                    (this.SystemTraceAuditNumber != null &&
                    this.SystemTraceAuditNumber.Equals(input.SystemTraceAuditNumber))
                ) && 
                (
                    this.TokenAssuranceLevel == input.TokenAssuranceLevel ||
                    (this.TokenAssuranceLevel != null &&
                    this.TokenAssuranceLevel.Equals(input.TokenAssuranceLevel))
                ) && 
                (
                    this.TokenRequestorId == input.TokenRequestorId ||
                    (this.TokenRequestorId != null &&
                    this.TokenRequestorId.Equals(input.TokenRequestorId))
                ) && 
                (
                    this.TransactionAmount == input.TransactionAmount ||
                    (this.TransactionAmount != null &&
                    this.TransactionAmount.Equals(input.TransactionAmount))
                ) && 
                (
                    this.TransactionCategoryCode == input.TransactionCategoryCode ||
                    (this.TransactionCategoryCode != null &&
                    this.TransactionCategoryCode.Equals(input.TransactionCategoryCode))
                ) && 
                (
                    this.TransactionCurrencyCode == input.TransactionCurrencyCode ||
                    (this.TransactionCurrencyCode != null &&
                    this.TransactionCurrencyCode.Equals(input.TransactionCurrencyCode))
                ) && 
                (
                    this.TransactionDateAndTime == input.TransactionDateAndTime ||
                    (this.TransactionDateAndTime != null &&
                    this.TransactionDateAndTime.Equals(input.TransactionDateAndTime))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.AccountIdType == input.AccountIdType ||
                    (this.AccountIdType != null &&
                    this.AccountIdType.Equals(input.AccountIdType))
                ) && 
                (
                    this.WalletIdentifier == input.WalletIdentifier ||
                    (this.WalletIdentifier != null &&
                    this.WalletIdentifier.Equals(input.WalletIdentifier))
                ) && 
                (
                    this.IssuerCountryCode == input.IssuerCountryCode ||
                    (this.IssuerCountryCode != null &&
                    this.IssuerCountryCode.Equals(input.IssuerCountryCode))
                ) && 
                (
                    this.QueueTransaction == input.QueueTransaction ||
                    this.QueueTransaction.Equals(input.QueueTransaction)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId1 != null)
                    hashCode = hashCode * 59 + this.AccountId1.GetHashCode();
                if (this.AccountId2 != null)
                    hashCode = hashCode * 59 + this.AccountId2.GetHashCode();
                if (this.AccountNumber != null)
                    hashCode = hashCode * 59 + this.AccountNumber.GetHashCode();
                if (this.AccountNumberIndicator != null)
                    hashCode = hashCode * 59 + this.AccountNumberIndicator.GetHashCode();
                if (this.AcquiringInstitutionIdCode != null)
                    hashCode = hashCode * 59 + this.AcquiringInstitutionIdCode.GetHashCode();
                if (this.AdditionalAmount != null)
                    hashCode = hashCode * 59 + this.AdditionalAmount.GetHashCode();
                if (this.AmountCardholderBillingFee != null)
                    hashCode = hashCode * 59 + this.AmountCardholderBillingFee.GetHashCode();
                if (this.AuthorizationIdResponse != null)
                    hashCode = hashCode * 59 + this.AuthorizationIdResponse.GetHashCode();
                if (this.CardAcceptorIdCode != null)
                    hashCode = hashCode * 59 + this.CardAcceptorIdCode.GetHashCode();
                if (this.CardAcceptorNameAndLocation != null)
                    hashCode = hashCode * 59 + this.CardAcceptorNameAndLocation.GetHashCode();
                if (this.CardholderAccountTerminalLevel != null)
                    hashCode = hashCode * 59 + this.CardholderAccountTerminalLevel.GetHashCode();
                if (this.CardholderBillingAmount != null)
                    hashCode = hashCode * 59 + this.CardholderBillingAmount.GetHashCode();
                if (this.CardholderBillingCurrencyCode != null)
                    hashCode = hashCode * 59 + this.CardholderBillingCurrencyCode.GetHashCode();
                if (this.ConversionRateCardholderBilling != null)
                    hashCode = hashCode * 59 + this.ConversionRateCardholderBilling.GetHashCode();
                if (this.ConversionRateSettled != null)
                    hashCode = hashCode * 59 + this.ConversionRateSettled.GetHashCode();
                if (this.ExpirationDate != null)
                    hashCode = hashCode * 59 + this.ExpirationDate.GetHashCode();
                if (this.ExternalId != null)
                    hashCode = hashCode * 59 + this.ExternalId.GetHashCode();
                if (this.ForwardingInstitutionIdCode != null)
                    hashCode = hashCode * 59 + this.ForwardingInstitutionIdCode.GetHashCode();
                if (this.IssuerSettlementAmount != null)
                    hashCode = hashCode * 59 + this.IssuerSettlementAmount.GetHashCode();
                if (this.MerchantCategoryCode != null)
                    hashCode = hashCode * 59 + this.MerchantCategoryCode.GetHashCode();
                if (this.OnBehalfService != null)
                    hashCode = hashCode * 59 + this.OnBehalfService.GetHashCode();
                if (this.OnBehalfServiceResult1 != null)
                    hashCode = hashCode * 59 + this.OnBehalfServiceResult1.GetHashCode();
                if (this.OnBehalfServiceResult2 != null)
                    hashCode = hashCode * 59 + this.OnBehalfServiceResult2.GetHashCode();
                if (this.OriginalDataElement != null)
                    hashCode = hashCode * 59 + this.OriginalDataElement.GetHashCode();
                if (this.PanMappingFileInformation != null)
                    hashCode = hashCode * 59 + this.PanMappingFileInformation.GetHashCode();
                if (this.PointOfSaleCaptureCapabilities != null)
                    hashCode = hashCode * 59 + this.PointOfSaleCaptureCapabilities.GetHashCode();
                if (this.PointOfSaleCardPresence != null)
                    hashCode = hashCode * 59 + this.PointOfSaleCardPresence.GetHashCode();
                if (this.PointOfSaleCardTerminalInputCapability != null)
                    hashCode = hashCode * 59 + this.PointOfSaleCardTerminalInputCapability.GetHashCode();
                if (this.PointOfSaleCardholderPresence != null)
                    hashCode = hashCode * 59 + this.PointOfSaleCardholderPresence.GetHashCode();
                if (this.PointOfSaleCountryCode != null)
                    hashCode = hashCode * 59 + this.PointOfSaleCountryCode.GetHashCode();
                if (this.PointOfSaleData != null)
                    hashCode = hashCode * 59 + this.PointOfSaleData.GetHashCode();
                if (this.PointOfSaleEntryMode != null)
                    hashCode = hashCode * 59 + this.PointOfSaleEntryMode.GetHashCode();
                if (this.PointOfSalePostalCode != null)
                    hashCode = hashCode * 59 + this.PointOfSalePostalCode.GetHashCode();
                if (this.PrimaryAccountNumber != null)
                    hashCode = hashCode * 59 + this.PrimaryAccountNumber.GetHashCode();
                hashCode = hashCode * 59 + this.ProcessingCode.GetHashCode();
                if (this.ProductCode != null)
                    hashCode = hashCode * 59 + this.ProductCode.GetHashCode();
                if (this.ReconciliationCurrencyCode != null)
                    hashCode = hashCode * 59 + this.ReconciliationCurrencyCode.GetHashCode();
                if (this.ReplacementAmount != null)
                    hashCode = hashCode * 59 + this.ReplacementAmount.GetHashCode();
                if (this.Reserved != null)
                    hashCode = hashCode * 59 + this.Reserved.GetHashCode();
                if (this.ResponseCode != null)
                    hashCode = hashCode * 59 + this.ResponseCode.GetHashCode();
                if (this.SystemTraceAuditNumber != null)
                    hashCode = hashCode * 59 + this.SystemTraceAuditNumber.GetHashCode();
                if (this.TokenAssuranceLevel != null)
                    hashCode = hashCode * 59 + this.TokenAssuranceLevel.GetHashCode();
                if (this.TokenRequestorId != null)
                    hashCode = hashCode * 59 + this.TokenRequestorId.GetHashCode();
                if (this.TransactionAmount != null)
                    hashCode = hashCode * 59 + this.TransactionAmount.GetHashCode();
                if (this.TransactionCategoryCode != null)
                    hashCode = hashCode * 59 + this.TransactionCategoryCode.GetHashCode();
                if (this.TransactionCurrencyCode != null)
                    hashCode = hashCode * 59 + this.TransactionCurrencyCode.GetHashCode();
                if (this.TransactionDateAndTime != null)
                    hashCode = hashCode * 59 + this.TransactionDateAndTime.GetHashCode();
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.AccountIdType != null)
                    hashCode = hashCode * 59 + this.AccountIdType.GetHashCode();
                if (this.WalletIdentifier != null)
                    hashCode = hashCode * 59 + this.WalletIdentifier.GetHashCode();
                if (this.IssuerCountryCode != null)
                    hashCode = hashCode * 59 + this.IssuerCountryCode.GetHashCode();
                hashCode = hashCode * 59 + this.QueueTransaction.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AccountId1 (string) maxLength
            if(this.AccountId1 != null && this.AccountId1.Length > 28)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountId1, length must be less than 28.", new [] { "AccountId1" });
            }

            // AccountId1 (string) minLength
            if(this.AccountId1 != null && this.AccountId1.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountId1, length must be greater than 0.", new [] { "AccountId1" });
            }

            // AccountId2 (string) maxLength
            if(this.AccountId2 != null && this.AccountId2.Length > 28)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountId2, length must be less than 28.", new [] { "AccountId2" });
            }

            // AccountId2 (string) minLength
            if(this.AccountId2 != null && this.AccountId2.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountId2, length must be greater than 0.", new [] { "AccountId2" });
            }

            // AccountNumber (string) maxLength
            if(this.AccountNumber != null && this.AccountNumber.Length > 19)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountNumber, length must be less than 19.", new [] { "AccountNumber" });
            }

            // AccountNumber (string) minLength
            if(this.AccountNumber != null && this.AccountNumber.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountNumber, length must be greater than 0.", new [] { "AccountNumber" });
            }

            // AccountNumberIndicator (string) maxLength
            if(this.AccountNumberIndicator != null && this.AccountNumberIndicator.Length > 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountNumberIndicator, length must be less than 1.", new [] { "AccountNumberIndicator" });
            }

            // AccountNumberIndicator (string) minLength
            if(this.AccountNumberIndicator != null && this.AccountNumberIndicator.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountNumberIndicator, length must be greater than 0.", new [] { "AccountNumberIndicator" });
            }

            // AcquiringInstitutionIdCode (string) maxLength
            if(this.AcquiringInstitutionIdCode != null && this.AcquiringInstitutionIdCode.Length > 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AcquiringInstitutionIdCode, length must be less than 6.", new [] { "AcquiringInstitutionIdCode" });
            }

            // AcquiringInstitutionIdCode (string) minLength
            if(this.AcquiringInstitutionIdCode != null && this.AcquiringInstitutionIdCode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AcquiringInstitutionIdCode, length must be greater than 1.", new [] { "AcquiringInstitutionIdCode" });
            }

            // AdditionalAmount (string) maxLength
            if(this.AdditionalAmount != null && this.AdditionalAmount.Length > 60)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AdditionalAmount, length must be less than 60.", new [] { "AdditionalAmount" });
            }

            // AdditionalAmount (string) minLength
            if(this.AdditionalAmount != null && this.AdditionalAmount.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AdditionalAmount, length must be greater than 0.", new [] { "AdditionalAmount" });
            }

            // AmountCardholderBillingFee (string) maxLength
            if(this.AmountCardholderBillingFee != null && this.AmountCardholderBillingFee.Length > 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AmountCardholderBillingFee, length must be less than 8.", new [] { "AmountCardholderBillingFee" });
            }

            // AmountCardholderBillingFee (string) minLength
            if(this.AmountCardholderBillingFee != null && this.AmountCardholderBillingFee.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AmountCardholderBillingFee, length must be greater than 0.", new [] { "AmountCardholderBillingFee" });
            }

            // AuthorizationIdResponse (string) maxLength
            if(this.AuthorizationIdResponse != null && this.AuthorizationIdResponse.Length > 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AuthorizationIdResponse, length must be less than 6.", new [] { "AuthorizationIdResponse" });
            }

            // AuthorizationIdResponse (string) minLength
            if(this.AuthorizationIdResponse != null && this.AuthorizationIdResponse.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AuthorizationIdResponse, length must be greater than 0.", new [] { "AuthorizationIdResponse" });
            }

            // CardAcceptorIdCode (string) maxLength
            if(this.CardAcceptorIdCode != null && this.CardAcceptorIdCode.Length > 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CardAcceptorIdCode, length must be less than 15.", new [] { "CardAcceptorIdCode" });
            }

            // CardAcceptorIdCode (string) minLength
            if(this.CardAcceptorIdCode != null && this.CardAcceptorIdCode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CardAcceptorIdCode, length must be greater than 1.", new [] { "CardAcceptorIdCode" });
            }

            // CardAcceptorNameAndLocation (string) maxLength
            if(this.CardAcceptorNameAndLocation != null && this.CardAcceptorNameAndLocation.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CardAcceptorNameAndLocation, length must be less than 40.", new [] { "CardAcceptorNameAndLocation" });
            }

            // CardAcceptorNameAndLocation (string) minLength
            if(this.CardAcceptorNameAndLocation != null && this.CardAcceptorNameAndLocation.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CardAcceptorNameAndLocation, length must be greater than 1.", new [] { "CardAcceptorNameAndLocation" });
            }

            // CardholderAccountTerminalLevel (string) maxLength
            if(this.CardholderAccountTerminalLevel != null && this.CardholderAccountTerminalLevel.Length > 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CardholderAccountTerminalLevel, length must be less than 1.", new [] { "CardholderAccountTerminalLevel" });
            }

            // CardholderAccountTerminalLevel (string) minLength
            if(this.CardholderAccountTerminalLevel != null && this.CardholderAccountTerminalLevel.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CardholderAccountTerminalLevel, length must be greater than 0.", new [] { "CardholderAccountTerminalLevel" });
            }

            // CardholderBillingAmount (string) maxLength
            if(this.CardholderBillingAmount != null && this.CardholderBillingAmount.Length > 12)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CardholderBillingAmount, length must be less than 12.", new [] { "CardholderBillingAmount" });
            }

            // CardholderBillingAmount (string) minLength
            if(this.CardholderBillingAmount != null && this.CardholderBillingAmount.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CardholderBillingAmount, length must be greater than 1.", new [] { "CardholderBillingAmount" });
            }

            // CardholderBillingCurrencyCode (string) maxLength
            if(this.CardholderBillingCurrencyCode != null && this.CardholderBillingCurrencyCode.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CardholderBillingCurrencyCode, length must be less than 3.", new [] { "CardholderBillingCurrencyCode" });
            }

            // CardholderBillingCurrencyCode (string) minLength
            if(this.CardholderBillingCurrencyCode != null && this.CardholderBillingCurrencyCode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CardholderBillingCurrencyCode, length must be greater than 1.", new [] { "CardholderBillingCurrencyCode" });
            }

            // ConversionRateCardholderBilling (string) maxLength
            if(this.ConversionRateCardholderBilling != null && this.ConversionRateCardholderBilling.Length > 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ConversionRateCardholderBilling, length must be less than 8.", new [] { "ConversionRateCardholderBilling" });
            }

            // ConversionRateCardholderBilling (string) minLength
            if(this.ConversionRateCardholderBilling != null && this.ConversionRateCardholderBilling.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ConversionRateCardholderBilling, length must be greater than 0.", new [] { "ConversionRateCardholderBilling" });
            }

            // ConversionRateSettled (string) maxLength
            if(this.ConversionRateSettled != null && this.ConversionRateSettled.Length > 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ConversionRateSettled, length must be less than 8.", new [] { "ConversionRateSettled" });
            }

            // ConversionRateSettled (string) minLength
            if(this.ConversionRateSettled != null && this.ConversionRateSettled.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ConversionRateSettled, length must be greater than 0.", new [] { "ConversionRateSettled" });
            }

            // ExpirationDate (string) maxLength
            if(this.ExpirationDate != null && this.ExpirationDate.Length > 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExpirationDate, length must be less than 4.", new [] { "ExpirationDate" });
            }

            // ExpirationDate (string) minLength
            if(this.ExpirationDate != null && this.ExpirationDate.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExpirationDate, length must be greater than 0.", new [] { "ExpirationDate" });
            }

            // ExternalId (string) maxLength
            if(this.ExternalId != null && this.ExternalId.Length > 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExternalId, length must be less than 15.", new [] { "ExternalId" });
            }

            // ExternalId (string) minLength
            if(this.ExternalId != null && this.ExternalId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExternalId, length must be greater than 1.", new [] { "ExternalId" });
            }

            // ForwardingInstitutionIdCode (string) maxLength
            if(this.ForwardingInstitutionIdCode != null && this.ForwardingInstitutionIdCode.Length > 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ForwardingInstitutionIdCode, length must be less than 6.", new [] { "ForwardingInstitutionIdCode" });
            }

            // ForwardingInstitutionIdCode (string) minLength
            if(this.ForwardingInstitutionIdCode != null && this.ForwardingInstitutionIdCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ForwardingInstitutionIdCode, length must be greater than 0.", new [] { "ForwardingInstitutionIdCode" });
            }

            // IssuerSettlementAmount (string) maxLength
            if(this.IssuerSettlementAmount != null && this.IssuerSettlementAmount.Length > 12)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IssuerSettlementAmount, length must be less than 12.", new [] { "IssuerSettlementAmount" });
            }

            // IssuerSettlementAmount (string) minLength
            if(this.IssuerSettlementAmount != null && this.IssuerSettlementAmount.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IssuerSettlementAmount, length must be greater than 0.", new [] { "IssuerSettlementAmount" });
            }

            // MerchantCategoryCode (string) maxLength
            if(this.MerchantCategoryCode != null && this.MerchantCategoryCode.Length > 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantCategoryCode, length must be less than 4.", new [] { "MerchantCategoryCode" });
            }

            // MerchantCategoryCode (string) minLength
            if(this.MerchantCategoryCode != null && this.MerchantCategoryCode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantCategoryCode, length must be greater than 1.", new [] { "MerchantCategoryCode" });
            }

            // OnBehalfService (string) maxLength
            if(this.OnBehalfService != null && this.OnBehalfService.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OnBehalfService, length must be less than 2.", new [] { "OnBehalfService" });
            }

            // OnBehalfService (string) minLength
            if(this.OnBehalfService != null && this.OnBehalfService.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OnBehalfService, length must be greater than 0.", new [] { "OnBehalfService" });
            }

            // OnBehalfServiceResult1 (string) maxLength
            if(this.OnBehalfServiceResult1 != null && this.OnBehalfServiceResult1.Length > 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OnBehalfServiceResult1, length must be less than 1.", new [] { "OnBehalfServiceResult1" });
            }

            // OnBehalfServiceResult1 (string) minLength
            if(this.OnBehalfServiceResult1 != null && this.OnBehalfServiceResult1.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OnBehalfServiceResult1, length must be greater than 0.", new [] { "OnBehalfServiceResult1" });
            }

            // OnBehalfServiceResult2 (string) maxLength
            if(this.OnBehalfServiceResult2 != null && this.OnBehalfServiceResult2.Length > 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OnBehalfServiceResult2, length must be less than 1.", new [] { "OnBehalfServiceResult2" });
            }

            // OnBehalfServiceResult2 (string) minLength
            if(this.OnBehalfServiceResult2 != null && this.OnBehalfServiceResult2.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OnBehalfServiceResult2, length must be greater than 0.", new [] { "OnBehalfServiceResult2" });
            }

            // OriginalDataElement (string) maxLength
            if(this.OriginalDataElement != null && this.OriginalDataElement.Length > 42)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OriginalDataElement, length must be less than 42.", new [] { "OriginalDataElement" });
            }

            // OriginalDataElement (string) minLength
            if(this.OriginalDataElement != null && this.OriginalDataElement.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OriginalDataElement, length must be greater than 0.", new [] { "OriginalDataElement" });
            }

            // PanMappingFileInformation (string) maxLength
            if(this.PanMappingFileInformation != null && this.PanMappingFileInformation.Length > 43)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PanMappingFileInformation, length must be less than 43.", new [] { "PanMappingFileInformation" });
            }

            // PanMappingFileInformation (string) minLength
            if(this.PanMappingFileInformation != null && this.PanMappingFileInformation.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PanMappingFileInformation, length must be greater than 0.", new [] { "PanMappingFileInformation" });
            }

            // PointOfSaleCaptureCapabilities (string) maxLength
            if(this.PointOfSaleCaptureCapabilities != null && this.PointOfSaleCaptureCapabilities.Length > 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PointOfSaleCaptureCapabilities, length must be less than 1.", new [] { "PointOfSaleCaptureCapabilities" });
            }

            // PointOfSaleCaptureCapabilities (string) minLength
            if(this.PointOfSaleCaptureCapabilities != null && this.PointOfSaleCaptureCapabilities.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PointOfSaleCaptureCapabilities, length must be greater than 0.", new [] { "PointOfSaleCaptureCapabilities" });
            }

            // PointOfSaleCardPresence (string) maxLength
            if(this.PointOfSaleCardPresence != null && this.PointOfSaleCardPresence.Length > 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PointOfSaleCardPresence, length must be less than 1.", new [] { "PointOfSaleCardPresence" });
            }

            // PointOfSaleCardPresence (string) minLength
            if(this.PointOfSaleCardPresence != null && this.PointOfSaleCardPresence.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PointOfSaleCardPresence, length must be greater than 0.", new [] { "PointOfSaleCardPresence" });
            }

            // PointOfSaleCardTerminalInputCapability (string) maxLength
            if(this.PointOfSaleCardTerminalInputCapability != null && this.PointOfSaleCardTerminalInputCapability.Length > 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PointOfSaleCardTerminalInputCapability, length must be less than 1.", new [] { "PointOfSaleCardTerminalInputCapability" });
            }

            // PointOfSaleCardTerminalInputCapability (string) minLength
            if(this.PointOfSaleCardTerminalInputCapability != null && this.PointOfSaleCardTerminalInputCapability.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PointOfSaleCardTerminalInputCapability, length must be greater than 0.", new [] { "PointOfSaleCardTerminalInputCapability" });
            }

            // PointOfSaleCardholderPresence (string) maxLength
            if(this.PointOfSaleCardholderPresence != null && this.PointOfSaleCardholderPresence.Length > 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PointOfSaleCardholderPresence, length must be less than 1.", new [] { "PointOfSaleCardholderPresence" });
            }

            // PointOfSaleCardholderPresence (string) minLength
            if(this.PointOfSaleCardholderPresence != null && this.PointOfSaleCardholderPresence.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PointOfSaleCardholderPresence, length must be greater than 0.", new [] { "PointOfSaleCardholderPresence" });
            }

            // PointOfSaleCountryCode (string) maxLength
            if(this.PointOfSaleCountryCode != null && this.PointOfSaleCountryCode.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PointOfSaleCountryCode, length must be less than 3.", new [] { "PointOfSaleCountryCode" });
            }

            // PointOfSaleCountryCode (string) minLength
            if(this.PointOfSaleCountryCode != null && this.PointOfSaleCountryCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PointOfSaleCountryCode, length must be greater than 0.", new [] { "PointOfSaleCountryCode" });
            }

            // PointOfSaleData (string) maxLength
            if(this.PointOfSaleData != null && this.PointOfSaleData.Length > 26)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PointOfSaleData, length must be less than 26.", new [] { "PointOfSaleData" });
            }

            // PointOfSaleData (string) minLength
            if(this.PointOfSaleData != null && this.PointOfSaleData.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PointOfSaleData, length must be greater than 0.", new [] { "PointOfSaleData" });
            }

            // PointOfSaleEntryMode (string) maxLength
            if(this.PointOfSaleEntryMode != null && this.PointOfSaleEntryMode.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PointOfSaleEntryMode, length must be less than 3.", new [] { "PointOfSaleEntryMode" });
            }

            // PointOfSaleEntryMode (string) minLength
            if(this.PointOfSaleEntryMode != null && this.PointOfSaleEntryMode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PointOfSaleEntryMode, length must be greater than 0.", new [] { "PointOfSaleEntryMode" });
            }

            // PointOfSalePostalCode (string) maxLength
            if(this.PointOfSalePostalCode != null && this.PointOfSalePostalCode.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PointOfSalePostalCode, length must be less than 10.", new [] { "PointOfSalePostalCode" });
            }

            // PointOfSalePostalCode (string) minLength
            if(this.PointOfSalePostalCode != null && this.PointOfSalePostalCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PointOfSalePostalCode, length must be greater than 0.", new [] { "PointOfSalePostalCode" });
            }

            // PrimaryAccountNumber (string) maxLength
            if(this.PrimaryAccountNumber != null && this.PrimaryAccountNumber.Length > 19)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PrimaryAccountNumber, length must be less than 19.", new [] { "PrimaryAccountNumber" });
            }

            // PrimaryAccountNumber (string) minLength
            if(this.PrimaryAccountNumber != null && this.PrimaryAccountNumber.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PrimaryAccountNumber, length must be greater than 0.", new [] { "PrimaryAccountNumber" });
            }

            // ProcessingCode (string) maxLength
            if(this.ProcessingCode != null)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProcessingCode, length must be less than 22.", new [] { "ProcessingCode" });
            }

            // ProcessingCode (string) minLength
            if(this.ProcessingCode != null)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProcessingCode, length must be greater than 1.", new [] { "ProcessingCode" });
            }

            // ProductCode (string) maxLength
            if(this.ProductCode != null && this.ProductCode.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProductCode, length must be less than 3.", new [] { "ProductCode" });
            }

            // ProductCode (string) minLength
            if(this.ProductCode != null && this.ProductCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProductCode, length must be greater than 0.", new [] { "ProductCode" });
            }

            // ReconciliationCurrencyCode (string) maxLength
            if(this.ReconciliationCurrencyCode != null && this.ReconciliationCurrencyCode.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReconciliationCurrencyCode, length must be less than 3.", new [] { "ReconciliationCurrencyCode" });
            }

            // ReconciliationCurrencyCode (string) minLength
            if(this.ReconciliationCurrencyCode != null && this.ReconciliationCurrencyCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReconciliationCurrencyCode, length must be greater than 0.", new [] { "ReconciliationCurrencyCode" });
            }

            // ReplacementAmount (string) maxLength
            if(this.ReplacementAmount != null && this.ReplacementAmount.Length > 42)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReplacementAmount, length must be less than 42.", new [] { "ReplacementAmount" });
            }

            // ReplacementAmount (string) minLength
            if(this.ReplacementAmount != null && this.ReplacementAmount.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReplacementAmount, length must be greater than 0.", new [] { "ReplacementAmount" });
            }

            // Reserved (string) maxLength
            if(this.Reserved != null && this.Reserved.Length > 60)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Reserved, length must be less than 60.", new [] { "Reserved" });
            }

            // Reserved (string) minLength
            if(this.Reserved != null && this.Reserved.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Reserved, length must be greater than 0.", new [] { "Reserved" });
            }

            // ResponseCode (string) maxLength
            if(this.ResponseCode != null && this.ResponseCode.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ResponseCode, length must be less than 2.", new [] { "ResponseCode" });
            }

            // ResponseCode (string) minLength
            if(this.ResponseCode != null && this.ResponseCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ResponseCode, length must be greater than 0.", new [] { "ResponseCode" });
            }

            // SystemTraceAuditNumber (string) maxLength
            if(this.SystemTraceAuditNumber != null && this.SystemTraceAuditNumber.Length > 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SystemTraceAuditNumber, length must be less than 6.", new [] { "SystemTraceAuditNumber" });
            }

            // SystemTraceAuditNumber (string) minLength
            if(this.SystemTraceAuditNumber != null && this.SystemTraceAuditNumber.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SystemTraceAuditNumber, length must be greater than 0.", new [] { "SystemTraceAuditNumber" });
            }

            // TokenAssuranceLevel (string) maxLength
            if(this.TokenAssuranceLevel != null && this.TokenAssuranceLevel.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TokenAssuranceLevel, length must be less than 2.", new [] { "TokenAssuranceLevel" });
            }

            // TokenAssuranceLevel (string) minLength
            if(this.TokenAssuranceLevel != null && this.TokenAssuranceLevel.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TokenAssuranceLevel, length must be greater than 0.", new [] { "TokenAssuranceLevel" });
            }

            // TokenRequestorId (string) maxLength
            if(this.TokenRequestorId != null && this.TokenRequestorId.Length > 11)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TokenRequestorId, length must be less than 11.", new [] { "TokenRequestorId" });
            }

            // TokenRequestorId (string) minLength
            if(this.TokenRequestorId != null && this.TokenRequestorId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TokenRequestorId, length must be greater than 0.", new [] { "TokenRequestorId" });
            }

            // TransactionAmount (string) maxLength
            if(this.TransactionAmount != null && this.TransactionAmount.Length > 12)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionAmount, length must be less than 12.", new [] { "TransactionAmount" });
            }

            // TransactionAmount (string) minLength
            if(this.TransactionAmount != null && this.TransactionAmount.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionAmount, length must be greater than 0.", new [] { "TransactionAmount" });
            }

            // TransactionCategoryCode (string) maxLength
            if(this.TransactionCategoryCode != null && this.TransactionCategoryCode.Length > 250)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionCategoryCode, length must be less than 250.", new [] { "TransactionCategoryCode" });
            }

            // TransactionCategoryCode (string) minLength
            if(this.TransactionCategoryCode != null && this.TransactionCategoryCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionCategoryCode, length must be greater than 0.", new [] { "TransactionCategoryCode" });
            }

            // TransactionCurrencyCode (string) maxLength
            if(this.TransactionCurrencyCode != null && this.TransactionCurrencyCode.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionCurrencyCode, length must be less than 3.", new [] { "TransactionCurrencyCode" });
            }

            // TransactionCurrencyCode (string) minLength
            if(this.TransactionCurrencyCode != null && this.TransactionCurrencyCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionCurrencyCode, length must be greater than 0.", new [] { "TransactionCurrencyCode" });
            }

            // TransactionDateAndTime (string) maxLength
            if(this.TransactionDateAndTime != null && this.TransactionDateAndTime.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionDateAndTime, length must be less than 10.", new [] { "TransactionDateAndTime" });
            }

            // TransactionDateAndTime (string) minLength
            if(this.TransactionDateAndTime != null && this.TransactionDateAndTime.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionDateAndTime, length must be greater than 1.", new [] { "TransactionDateAndTime" });
            }

            // AccountId (string) maxLength
            if(this.AccountId != null && this.AccountId.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountId, length must be less than 30.", new [] { "AccountId" });
            }

            // AccountId (string) minLength
            if(this.AccountId != null && this.AccountId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountId, length must be greater than 1.", new [] { "AccountId" });
            }

            // AccountIdType (string) maxLength
            if(this.AccountIdType != null && this.AccountIdType.Length > 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountIdType, length must be less than 5.", new [] { "AccountIdType" });
            }

            // AccountIdType (string) minLength
            if(this.AccountIdType != null && this.AccountIdType.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountIdType, length must be greater than 0.", new [] { "AccountIdType" });
            }

            // WalletIdentifier (string) maxLength
            if(this.WalletIdentifier != null && this.WalletIdentifier.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WalletIdentifier, length must be less than 3.", new [] { "WalletIdentifier" });
            }

            // WalletIdentifier (string) minLength
            if(this.WalletIdentifier != null && this.WalletIdentifier.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WalletIdentifier, length must be greater than 0.", new [] { "WalletIdentifier" });
            }

            // IssuerCountryCode (string) maxLength
            if(this.IssuerCountryCode != null && this.IssuerCountryCode.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IssuerCountryCode, length must be less than 3.", new [] { "IssuerCountryCode" });
            }

            // IssuerCountryCode (string) minLength
            if(this.IssuerCountryCode != null && this.IssuerCountryCode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IssuerCountryCode, length must be greater than 1.", new [] { "IssuerCountryCode" });
            }

            // QueueTransaction (string) maxLength
            if(this.QueueTransaction != null)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for QueueTransaction, length must be less than 1.", new [] { "QueueTransaction" });
            }

            // QueueTransaction (string) minLength
            if(this.QueueTransaction != null)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for QueueTransaction, length must be greater than 1.", new [] { "QueueTransaction" });
            }

            yield break;
        }
    }

}
