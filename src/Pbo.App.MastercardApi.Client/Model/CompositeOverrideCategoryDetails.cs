/*
 * Pay with Rewards APIs
 *
 * Pay with Rewards allows cardholders to redeem points for purchases made with an enrolled Mastercard card. The following APIs create the Pay with Rewards user experience, and can be used inside a banking app or other mobile apps.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: paywithrewards@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Pbo.App.MastercardApi.Client.Client.OpenAPIDateConverter;

namespace Pbo.App.MastercardApi.Client.Model
{
    /// <summary>
    /// CompositeOverrideCategoryDetails
    /// </summary>
    [DataContract(Name = "CompositeOverrideCategoryDetails")]
    public partial class CompositeOverrideCategoryDetails : IEquatable<CompositeOverrideCategoryDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompositeOverrideCategoryDetails" /> class.
        /// </summary>
        /// <param name="cardHolderNumFrom">Card Holder Number Range From.</param>
        /// <param name="cardHolderNumTo">Card Holder Number Range To.</param>
        /// <param name="merchantCategoryName">Merchant Category Code.</param>
        /// <param name="merchantCategoryValue">Merchant Category Value.</param>
        /// <param name="merchantGroupName">Merchant Group Name.</param>
        /// <param name="merchantGroupValue">Merchant Group Value.</param>
        /// <param name="merchantSetName">Merchant Set Name.</param>
        /// <param name="merchantSetValue">Merchant Set Value.</param>
        /// <param name="bankProductName">Bank Product Name.</param>
        /// <param name="bankProductValue">Bank Product Value.</param>
        /// <param name="attributes">attributes.</param>
        public CompositeOverrideCategoryDetails(string cardHolderNumFrom = default(string), string cardHolderNumTo = default(string), string merchantCategoryName = default(string), string merchantCategoryValue = default(string), string merchantGroupName = default(string), string merchantGroupValue = default(string), string merchantSetName = default(string), string merchantSetValue = default(string), string bankProductName = default(string), string bankProductValue = default(string), List<Attribute> attributes = default(List<Attribute>))
        {
            this.CardHolderNumFrom = cardHolderNumFrom;
            this.CardHolderNumTo = cardHolderNumTo;
            this.MerchantCategoryName = merchantCategoryName;
            this.MerchantCategoryValue = merchantCategoryValue;
            this.MerchantGroupName = merchantGroupName;
            this.MerchantGroupValue = merchantGroupValue;
            this.MerchantSetName = merchantSetName;
            this.MerchantSetValue = merchantSetValue;
            this.BankProductName = bankProductName;
            this.BankProductValue = bankProductValue;
            this.Attributes = attributes;
        }

        /// <summary>
        /// Card Holder Number Range From
        /// </summary>
        /// <value>Card Holder Number Range From</value>
        [DataMember(Name = "cardHolderNumFrom", EmitDefaultValue = false)]
        public string CardHolderNumFrom { get; set; }

        /// <summary>
        /// Card Holder Number Range To
        /// </summary>
        /// <value>Card Holder Number Range To</value>
        [DataMember(Name = "cardHolderNumTo", EmitDefaultValue = false)]
        public string CardHolderNumTo { get; set; }

        /// <summary>
        /// Merchant Category Code
        /// </summary>
        /// <value>Merchant Category Code</value>
        [DataMember(Name = "merchantCategoryName", EmitDefaultValue = false)]
        public string MerchantCategoryName { get; set; }

        /// <summary>
        /// Merchant Category Value
        /// </summary>
        /// <value>Merchant Category Value</value>
        [DataMember(Name = "merchantCategoryValue", EmitDefaultValue = false)]
        public string MerchantCategoryValue { get; set; }

        /// <summary>
        /// Merchant Group Name
        /// </summary>
        /// <value>Merchant Group Name</value>
        [DataMember(Name = "merchantGroupName", EmitDefaultValue = false)]
        public string MerchantGroupName { get; set; }

        /// <summary>
        /// Merchant Group Value
        /// </summary>
        /// <value>Merchant Group Value</value>
        [DataMember(Name = "merchantGroupValue", EmitDefaultValue = false)]
        public string MerchantGroupValue { get; set; }

        /// <summary>
        /// Merchant Set Name
        /// </summary>
        /// <value>Merchant Set Name</value>
        [DataMember(Name = "merchantSetName", EmitDefaultValue = false)]
        public string MerchantSetName { get; set; }

        /// <summary>
        /// Merchant Set Value
        /// </summary>
        /// <value>Merchant Set Value</value>
        [DataMember(Name = "merchantSetValue", EmitDefaultValue = false)]
        public string MerchantSetValue { get; set; }

        /// <summary>
        /// Bank Product Name
        /// </summary>
        /// <value>Bank Product Name</value>
        [DataMember(Name = "bankProductName", EmitDefaultValue = false)]
        public string BankProductName { get; set; }

        /// <summary>
        /// Bank Product Value
        /// </summary>
        /// <value>Bank Product Value</value>
        [DataMember(Name = "bankProductValue", EmitDefaultValue = false)]
        public string BankProductValue { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name = "attributes", EmitDefaultValue = false)]
        public List<Attribute> Attributes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompositeOverrideCategoryDetails {\n");
            sb.Append("  CardHolderNumFrom: ").Append(CardHolderNumFrom).Append("\n");
            sb.Append("  CardHolderNumTo: ").Append(CardHolderNumTo).Append("\n");
            sb.Append("  MerchantCategoryName: ").Append(MerchantCategoryName).Append("\n");
            sb.Append("  MerchantCategoryValue: ").Append(MerchantCategoryValue).Append("\n");
            sb.Append("  MerchantGroupName: ").Append(MerchantGroupName).Append("\n");
            sb.Append("  MerchantGroupValue: ").Append(MerchantGroupValue).Append("\n");
            sb.Append("  MerchantSetName: ").Append(MerchantSetName).Append("\n");
            sb.Append("  MerchantSetValue: ").Append(MerchantSetValue).Append("\n");
            sb.Append("  BankProductName: ").Append(BankProductName).Append("\n");
            sb.Append("  BankProductValue: ").Append(BankProductValue).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompositeOverrideCategoryDetails);
        }

        /// <summary>
        /// Returns true if CompositeOverrideCategoryDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of CompositeOverrideCategoryDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompositeOverrideCategoryDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CardHolderNumFrom == input.CardHolderNumFrom ||
                    (this.CardHolderNumFrom != null &&
                    this.CardHolderNumFrom.Equals(input.CardHolderNumFrom))
                ) && 
                (
                    this.CardHolderNumTo == input.CardHolderNumTo ||
                    (this.CardHolderNumTo != null &&
                    this.CardHolderNumTo.Equals(input.CardHolderNumTo))
                ) && 
                (
                    this.MerchantCategoryName == input.MerchantCategoryName ||
                    (this.MerchantCategoryName != null &&
                    this.MerchantCategoryName.Equals(input.MerchantCategoryName))
                ) && 
                (
                    this.MerchantCategoryValue == input.MerchantCategoryValue ||
                    (this.MerchantCategoryValue != null &&
                    this.MerchantCategoryValue.Equals(input.MerchantCategoryValue))
                ) && 
                (
                    this.MerchantGroupName == input.MerchantGroupName ||
                    (this.MerchantGroupName != null &&
                    this.MerchantGroupName.Equals(input.MerchantGroupName))
                ) && 
                (
                    this.MerchantGroupValue == input.MerchantGroupValue ||
                    (this.MerchantGroupValue != null &&
                    this.MerchantGroupValue.Equals(input.MerchantGroupValue))
                ) && 
                (
                    this.MerchantSetName == input.MerchantSetName ||
                    (this.MerchantSetName != null &&
                    this.MerchantSetName.Equals(input.MerchantSetName))
                ) && 
                (
                    this.MerchantSetValue == input.MerchantSetValue ||
                    (this.MerchantSetValue != null &&
                    this.MerchantSetValue.Equals(input.MerchantSetValue))
                ) && 
                (
                    this.BankProductName == input.BankProductName ||
                    (this.BankProductName != null &&
                    this.BankProductName.Equals(input.BankProductName))
                ) && 
                (
                    this.BankProductValue == input.BankProductValue ||
                    (this.BankProductValue != null &&
                    this.BankProductValue.Equals(input.BankProductValue))
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    input.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CardHolderNumFrom != null)
                    hashCode = hashCode * 59 + this.CardHolderNumFrom.GetHashCode();
                if (this.CardHolderNumTo != null)
                    hashCode = hashCode * 59 + this.CardHolderNumTo.GetHashCode();
                if (this.MerchantCategoryName != null)
                    hashCode = hashCode * 59 + this.MerchantCategoryName.GetHashCode();
                if (this.MerchantCategoryValue != null)
                    hashCode = hashCode * 59 + this.MerchantCategoryValue.GetHashCode();
                if (this.MerchantGroupName != null)
                    hashCode = hashCode * 59 + this.MerchantGroupName.GetHashCode();
                if (this.MerchantGroupValue != null)
                    hashCode = hashCode * 59 + this.MerchantGroupValue.GetHashCode();
                if (this.MerchantSetName != null)
                    hashCode = hashCode * 59 + this.MerchantSetName.GetHashCode();
                if (this.MerchantSetValue != null)
                    hashCode = hashCode * 59 + this.MerchantSetValue.GetHashCode();
                if (this.BankProductName != null)
                    hashCode = hashCode * 59 + this.BankProductName.GetHashCode();
                if (this.BankProductValue != null)
                    hashCode = hashCode * 59 + this.BankProductValue.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CardHolderNumFrom (string) maxLength
            if(this.CardHolderNumFrom != null && this.CardHolderNumFrom.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CardHolderNumFrom, length must be less than 30.", new [] { "CardHolderNumFrom" });
            }

            // CardHolderNumFrom (string) minLength
            if(this.CardHolderNumFrom != null && this.CardHolderNumFrom.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CardHolderNumFrom, length must be greater than 0.", new [] { "CardHolderNumFrom" });
            }

            // CardHolderNumTo (string) maxLength
            if(this.CardHolderNumTo != null && this.CardHolderNumTo.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CardHolderNumTo, length must be less than 30.", new [] { "CardHolderNumTo" });
            }

            // CardHolderNumTo (string) minLength
            if(this.CardHolderNumTo != null && this.CardHolderNumTo.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CardHolderNumTo, length must be greater than 0.", new [] { "CardHolderNumTo" });
            }

            // MerchantCategoryName (string) maxLength
            if(this.MerchantCategoryName != null && this.MerchantCategoryName.Length > 2000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantCategoryName, length must be less than 2000.", new [] { "MerchantCategoryName" });
            }

            // MerchantCategoryName (string) minLength
            if(this.MerchantCategoryName != null && this.MerchantCategoryName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantCategoryName, length must be greater than 0.", new [] { "MerchantCategoryName" });
            }

            // MerchantCategoryValue (string) maxLength
            if(this.MerchantCategoryValue != null && this.MerchantCategoryValue.Length > 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantCategoryValue, length must be less than 4.", new [] { "MerchantCategoryValue" });
            }

            // MerchantCategoryValue (string) minLength
            if(this.MerchantCategoryValue != null && this.MerchantCategoryValue.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantCategoryValue, length must be greater than 0.", new [] { "MerchantCategoryValue" });
            }

            // MerchantGroupName (string) maxLength
            if(this.MerchantGroupName != null && this.MerchantGroupName.Length > 2000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantGroupName, length must be less than 2000.", new [] { "MerchantGroupName" });
            }

            // MerchantGroupName (string) minLength
            if(this.MerchantGroupName != null && this.MerchantGroupName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantGroupName, length must be greater than 0.", new [] { "MerchantGroupName" });
            }

            // MerchantGroupValue (string) maxLength
            if(this.MerchantGroupValue != null && this.MerchantGroupValue.Length > 12)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantGroupValue, length must be less than 12.", new [] { "MerchantGroupValue" });
            }

            // MerchantGroupValue (string) minLength
            if(this.MerchantGroupValue != null && this.MerchantGroupValue.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantGroupValue, length must be greater than 0.", new [] { "MerchantGroupValue" });
            }

            // MerchantSetName (string) maxLength
            if(this.MerchantSetName != null && this.MerchantSetName.Length > 2000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantSetName, length must be less than 2000.", new [] { "MerchantSetName" });
            }

            // MerchantSetName (string) minLength
            if(this.MerchantSetName != null && this.MerchantSetName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantSetName, length must be greater than 0.", new [] { "MerchantSetName" });
            }

            // MerchantSetValue (string) maxLength
            if(this.MerchantSetValue != null && this.MerchantSetValue.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantSetValue, length must be less than 10.", new [] { "MerchantSetValue" });
            }

            // MerchantSetValue (string) minLength
            if(this.MerchantSetValue != null && this.MerchantSetValue.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantSetValue, length must be greater than 0.", new [] { "MerchantSetValue" });
            }

            // BankProductName (string) maxLength
            if(this.BankProductName != null && this.BankProductName.Length > 200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BankProductName, length must be less than 200.", new [] { "BankProductName" });
            }

            // BankProductName (string) minLength
            if(this.BankProductName != null && this.BankProductName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BankProductName, length must be greater than 0.", new [] { "BankProductName" });
            }

            // BankProductValue (string) maxLength
            if(this.BankProductValue != null && this.BankProductValue.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BankProductValue, length must be less than 10.", new [] { "BankProductValue" });
            }

            // BankProductValue (string) minLength
            if(this.BankProductValue != null && this.BankProductValue.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BankProductValue, length must be greater than 0.", new [] { "BankProductValue" });
            }

            yield break;
        }
    }

}
