/*
 * Pay with Rewards APIs
 *
 * Pay with Rewards allows cardholders to redeem points for purchases made with an enrolled Mastercard card. The following APIs create the Pay with Rewards user experience, and can be used inside a banking app or other mobile apps.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: paywithrewards@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Pbo.App.MastercardApi.Client.Client.OpenAPIDateConverter;

namespace Pbo.App.MastercardApi.Client.Model
{
    /// <summary>
    /// Holds information on conversion rules that determines the cost associated to rewards points.
    /// </summary>
    [DataContract(Name = "ConversionFactor")]
    public partial class ConversionFactor : IEquatable<ConversionFactor>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConversionFactor" /> class.
        /// </summary>
        /// <param name="authRewardsServiceId">Identifier assigned by Mastercard Rewards System for service type such as Real Time Rewards..</param>
        /// <param name="name">Conversion rule name..</param>
        /// <param name="type">Conversion rule type BASE|OVERRIDE..</param>
        /// <param name="currencyCode">Currency code..</param>
        /// <param name="overrideCategoryDetails">overrideCategoryDetails.</param>
        /// <param name="conversionRuleTiers">conversionRuleTiers.</param>
        public ConversionFactor(string authRewardsServiceId = default(string), string name = default(string), string type = default(string), string currencyCode = default(string), OverrideCategoryDetails overrideCategoryDetails = default(OverrideCategoryDetails), List<ConversionRuleTier> conversionRuleTiers = default(List<ConversionRuleTier>))
        {
            this.AuthRewardsServiceId = authRewardsServiceId;
            this.Name = name;
            this.Type = type;
            this.CurrencyCode = currencyCode;
            this.OverrideCategoryDetails = overrideCategoryDetails;
            this.ConversionRuleTiers = conversionRuleTiers;
        }

        /// <summary>
        /// Identifier assigned by Mastercard Rewards System for service type such as Real Time Rewards.
        /// </summary>
        /// <value>Identifier assigned by Mastercard Rewards System for service type such as Real Time Rewards.</value>
        [DataMember(Name = "authRewardsServiceId", EmitDefaultValue = false)]
        public string AuthRewardsServiceId { get; set; }

        /// <summary>
        /// Conversion rule name.
        /// </summary>
        /// <value>Conversion rule name.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Conversion rule type BASE|OVERRIDE.
        /// </summary>
        /// <value>Conversion rule type BASE|OVERRIDE.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Currency code.
        /// </summary>
        /// <value>Currency code.</value>
        [DataMember(Name = "currencyCode", EmitDefaultValue = false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets OverrideCategoryDetails
        /// </summary>
        [DataMember(Name = "overrideCategoryDetails", EmitDefaultValue = false)]
        public OverrideCategoryDetails OverrideCategoryDetails { get; set; }

        /// <summary>
        /// Gets or Sets ConversionRuleTiers
        /// </summary>
        [DataMember(Name = "conversionRuleTiers", EmitDefaultValue = false)]
        public List<ConversionRuleTier> ConversionRuleTiers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConversionFactor {\n");
            sb.Append("  AuthRewardsServiceId: ").Append(AuthRewardsServiceId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  OverrideCategoryDetails: ").Append(OverrideCategoryDetails).Append("\n");
            sb.Append("  ConversionRuleTiers: ").Append(ConversionRuleTiers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConversionFactor);
        }

        /// <summary>
        /// Returns true if ConversionFactor instances are equal
        /// </summary>
        /// <param name="input">Instance of ConversionFactor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConversionFactor input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AuthRewardsServiceId == input.AuthRewardsServiceId ||
                    (this.AuthRewardsServiceId != null &&
                    this.AuthRewardsServiceId.Equals(input.AuthRewardsServiceId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.OverrideCategoryDetails == input.OverrideCategoryDetails ||
                    (this.OverrideCategoryDetails != null &&
                    this.OverrideCategoryDetails.Equals(input.OverrideCategoryDetails))
                ) && 
                (
                    this.ConversionRuleTiers == input.ConversionRuleTiers ||
                    this.ConversionRuleTiers != null &&
                    input.ConversionRuleTiers != null &&
                    this.ConversionRuleTiers.SequenceEqual(input.ConversionRuleTiers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthRewardsServiceId != null)
                    hashCode = hashCode * 59 + this.AuthRewardsServiceId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.OverrideCategoryDetails != null)
                    hashCode = hashCode * 59 + this.OverrideCategoryDetails.GetHashCode();
                if (this.ConversionRuleTiers != null)
                    hashCode = hashCode * 59 + this.ConversionRuleTiers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AuthRewardsServiceId (string) maxLength
            if(this.AuthRewardsServiceId != null && this.AuthRewardsServiceId.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AuthRewardsServiceId, length must be less than 10.", new [] { "AuthRewardsServiceId" });
            }

            // AuthRewardsServiceId (string) minLength
            if(this.AuthRewardsServiceId != null && this.AuthRewardsServiceId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AuthRewardsServiceId, length must be greater than 1.", new [] { "AuthRewardsServiceId" });
            }

            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 100.", new [] { "Name" });
            }

            // Name (string) minLength
            if(this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            // Type (string) maxLength
            if(this.Type != null && this.Type.Length > 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, length must be less than 8.", new [] { "Type" });
            }

            // Type (string) minLength
            if(this.Type != null && this.Type.Length < 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, length must be greater than 4.", new [] { "Type" });
            }

            // CurrencyCode (string) maxLength
            if(this.CurrencyCode != null && this.CurrencyCode.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CurrencyCode, length must be less than 3.", new [] { "CurrencyCode" });
            }

            // CurrencyCode (string) minLength
            if(this.CurrencyCode != null && this.CurrencyCode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CurrencyCode, length must be greater than 1.", new [] { "CurrencyCode" });
            }

            yield break;
        }
    }

}
