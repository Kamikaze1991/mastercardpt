/*
 * Pay with Rewards APIs
 *
 * Pay with Rewards allows cardholders to redeem points for purchases made with an enrolled Mastercard card. The following APIs create the Pay with Rewards user experience, and can be used inside a banking app or other mobile apps.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: paywithrewards@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Pbo.App.MastercardApi.Client.Client.OpenAPIDateConverter;

namespace Pbo.App.MastercardApi.Client.Model
{
    /// <summary>
    /// ConversionRuleTier
    /// </summary>
    [DataContract(Name = "ConversionRuleTier")]
    public partial class ConversionRuleTier : IEquatable<ConversionRuleTier>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConversionRuleTier" /> class.
        /// </summary>
        /// <param name="fromAmount">Starting range value configured for the conversion rule tier..</param>
        /// <param name="toAmount">End range value configured for the conversion rule tier..</param>
        /// <param name="multiplier">Multiplier factor configured for the conversion rule..</param>
        /// <param name="tierNumber">Conversion Rule tier number.</param>
        public ConversionRuleTier(string fromAmount = default(string), string toAmount = default(string), string multiplier = default(string), string tierNumber = default(string))
        {
            this.FromAmount = fromAmount;
            this.ToAmount = toAmount;
            this.Multiplier = multiplier;
            this.TierNumber = tierNumber;
        }

        /// <summary>
        /// Starting range value configured for the conversion rule tier.
        /// </summary>
        /// <value>Starting range value configured for the conversion rule tier.</value>
        [DataMember(Name = "fromAmount", EmitDefaultValue = false)]
        public string FromAmount { get; set; }

        /// <summary>
        /// End range value configured for the conversion rule tier.
        /// </summary>
        /// <value>End range value configured for the conversion rule tier.</value>
        [DataMember(Name = "toAmount", EmitDefaultValue = false)]
        public string ToAmount { get; set; }

        /// <summary>
        /// Multiplier factor configured for the conversion rule.
        /// </summary>
        /// <value>Multiplier factor configured for the conversion rule.</value>
        [DataMember(Name = "multiplier", EmitDefaultValue = false)]
        public string Multiplier { get; set; }

        /// <summary>
        /// Conversion Rule tier number
        /// </summary>
        /// <value>Conversion Rule tier number</value>
        [DataMember(Name = "tierNumber", EmitDefaultValue = false)]
        public string TierNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConversionRuleTier {\n");
            sb.Append("  FromAmount: ").Append(FromAmount).Append("\n");
            sb.Append("  ToAmount: ").Append(ToAmount).Append("\n");
            sb.Append("  Multiplier: ").Append(Multiplier).Append("\n");
            sb.Append("  TierNumber: ").Append(TierNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConversionRuleTier);
        }

        /// <summary>
        /// Returns true if ConversionRuleTier instances are equal
        /// </summary>
        /// <param name="input">Instance of ConversionRuleTier to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConversionRuleTier input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FromAmount == input.FromAmount ||
                    (this.FromAmount != null &&
                    this.FromAmount.Equals(input.FromAmount))
                ) && 
                (
                    this.ToAmount == input.ToAmount ||
                    (this.ToAmount != null &&
                    this.ToAmount.Equals(input.ToAmount))
                ) && 
                (
                    this.Multiplier == input.Multiplier ||
                    (this.Multiplier != null &&
                    this.Multiplier.Equals(input.Multiplier))
                ) && 
                (
                    this.TierNumber == input.TierNumber ||
                    (this.TierNumber != null &&
                    this.TierNumber.Equals(input.TierNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FromAmount != null)
                    hashCode = hashCode * 59 + this.FromAmount.GetHashCode();
                if (this.ToAmount != null)
                    hashCode = hashCode * 59 + this.ToAmount.GetHashCode();
                if (this.Multiplier != null)
                    hashCode = hashCode * 59 + this.Multiplier.GetHashCode();
                if (this.TierNumber != null)
                    hashCode = hashCode * 59 + this.TierNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FromAmount (string) maxLength
            if(this.FromAmount != null && this.FromAmount.Length > 2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FromAmount, length must be less than 2147483647.", new [] { "FromAmount" });
            }

            // FromAmount (string) minLength
            if(this.FromAmount != null && this.FromAmount.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FromAmount, length must be greater than 1.", new [] { "FromAmount" });
            }

            // ToAmount (string) maxLength
            if(this.ToAmount != null && this.ToAmount.Length > 2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ToAmount, length must be less than 2147483647.", new [] { "ToAmount" });
            }

            // ToAmount (string) minLength
            if(this.ToAmount != null && this.ToAmount.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ToAmount, length must be greater than 1.", new [] { "ToAmount" });
            }

            // Multiplier (string) maxLength
            if(this.Multiplier != null && this.Multiplier.Length > 2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Multiplier, length must be less than 2147483647.", new [] { "Multiplier" });
            }

            // Multiplier (string) minLength
            if(this.Multiplier != null && this.Multiplier.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Multiplier, length must be greater than 1.", new [] { "Multiplier" });
            }

            // TierNumber (string) maxLength
            if(this.TierNumber != null && this.TierNumber.Length > 2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TierNumber, length must be less than 2147483647.", new [] { "TierNumber" });
            }

            // TierNumber (string) minLength
            if(this.TierNumber != null && this.TierNumber.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TierNumber, length must be greater than 1.", new [] { "TierNumber" });
            }

            yield break;
        }
    }

}
