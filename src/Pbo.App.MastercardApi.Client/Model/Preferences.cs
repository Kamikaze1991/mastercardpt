/*
 * Pay with Rewards APIs
 *
 * Pay with Rewards allows cardholders to redeem points for purchases made with an enrolled Mastercard card. The following APIs create the Pay with Rewards user experience, and can be used inside a banking app or other mobile apps.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: paywithrewards@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Pbo.App.MastercardApi.Client.Client.OpenAPIDateConverter;

namespace Pbo.App.MastercardApi.Client.Model
{
    /// <summary>
    /// Preferences
    /// </summary>
    [DataContract(Name = "Preferences")]
    public partial class Preferences : IEquatable<Preferences>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Preferences" /> class.
        /// </summary>
        /// <param name="emailAddress">Email address of the user..</param>
        /// <param name="fixedAccountRedemptionAmount">Fixed account redemption amount..</param>
        /// <param name="minAccountPurchaseThreshold">Minimum account purchase threshold.</param>
        /// <param name="receiveEmailSw">Email notification switch..</param>
        /// <param name="receiveSMSSw">SMS notification switch..</param>
        /// <param name="redemptionFrequency">Indicates the cardholder&#39;s Pay with Rewards settings. OFF means PWR is off. MULT means PWR is on for all purchases. SNGL means PWR is on for the next purchase only..</param>
        /// <param name="smsNumber">SMS number of the user.</param>
        public Preferences(string emailAddress = default(string), double fixedAccountRedemptionAmount = default(double), double minAccountPurchaseThreshold = default(double), bool receiveEmailSw = default(bool), bool receiveSMSSw = default(bool), string redemptionFrequency = default(string), string smsNumber = default(string))
        {
            this.EmailAddress = emailAddress;
            this.FixedAccountRedemptionAmount = fixedAccountRedemptionAmount;
            this.MinAccountPurchaseThreshold = minAccountPurchaseThreshold;
            this.ReceiveEmailSw = receiveEmailSw;
            this.ReceiveSMSSw = receiveSMSSw;
            this.RedemptionFrequency = redemptionFrequency;
            this.SmsNumber = smsNumber;
        }

        /// <summary>
        /// Email address of the user.
        /// </summary>
        /// <value>Email address of the user.</value>
        [DataMember(Name = "emailAddress", EmitDefaultValue = false)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Fixed account redemption amount.
        /// </summary>
        /// <value>Fixed account redemption amount.</value>
        [DataMember(Name = "fixedAccountRedemptionAmount", EmitDefaultValue = false)]
        public double FixedAccountRedemptionAmount { get; set; }

        /// <summary>
        /// Minimum account purchase threshold
        /// </summary>
        /// <value>Minimum account purchase threshold</value>
        [DataMember(Name = "minAccountPurchaseThreshold", EmitDefaultValue = false)]
        public double MinAccountPurchaseThreshold { get; set; }

        /// <summary>
        /// Email notification switch.
        /// </summary>
        /// <value>Email notification switch.</value>
        [DataMember(Name = "receiveEmailSw", EmitDefaultValue = false)]
        public bool ReceiveEmailSw { get; set; }

        /// <summary>
        /// SMS notification switch.
        /// </summary>
        /// <value>SMS notification switch.</value>
        [DataMember(Name = "receiveSMSSw", EmitDefaultValue = false)]
        public bool ReceiveSMSSw { get; set; }

        /// <summary>
        /// Indicates the cardholder&#39;s Pay with Rewards settings. OFF means PWR is off. MULT means PWR is on for all purchases. SNGL means PWR is on for the next purchase only.
        /// </summary>
        /// <value>Indicates the cardholder&#39;s Pay with Rewards settings. OFF means PWR is off. MULT means PWR is on for all purchases. SNGL means PWR is on for the next purchase only.</value>
        [DataMember(Name = "redemptionFrequency", EmitDefaultValue = false)]
        public string RedemptionFrequency { get; set; }

        /// <summary>
        /// SMS number of the user
        /// </summary>
        /// <value>SMS number of the user</value>
        [DataMember(Name = "smsNumber", EmitDefaultValue = false)]
        public string SmsNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Preferences {\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  FixedAccountRedemptionAmount: ").Append(FixedAccountRedemptionAmount).Append("\n");
            sb.Append("  MinAccountPurchaseThreshold: ").Append(MinAccountPurchaseThreshold).Append("\n");
            sb.Append("  ReceiveEmailSw: ").Append(ReceiveEmailSw).Append("\n");
            sb.Append("  ReceiveSMSSw: ").Append(ReceiveSMSSw).Append("\n");
            sb.Append("  RedemptionFrequency: ").Append(RedemptionFrequency).Append("\n");
            sb.Append("  SmsNumber: ").Append(SmsNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Preferences);
        }

        /// <summary>
        /// Returns true if Preferences instances are equal
        /// </summary>
        /// <param name="input">Instance of Preferences to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Preferences input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                ) && 
                (
                    this.FixedAccountRedemptionAmount == input.FixedAccountRedemptionAmount ||
                    this.FixedAccountRedemptionAmount.Equals(input.FixedAccountRedemptionAmount)
                ) && 
                (
                    this.MinAccountPurchaseThreshold == input.MinAccountPurchaseThreshold ||
                    this.MinAccountPurchaseThreshold.Equals(input.MinAccountPurchaseThreshold)
                ) && 
                (
                    this.ReceiveEmailSw == input.ReceiveEmailSw ||
                    this.ReceiveEmailSw.Equals(input.ReceiveEmailSw)
                ) && 
                (
                    this.ReceiveSMSSw == input.ReceiveSMSSw ||
                    this.ReceiveSMSSw.Equals(input.ReceiveSMSSw)
                ) && 
                (
                    this.RedemptionFrequency == input.RedemptionFrequency ||
                    (this.RedemptionFrequency != null &&
                    this.RedemptionFrequency.Equals(input.RedemptionFrequency))
                ) && 
                (
                    this.SmsNumber == input.SmsNumber ||
                    (this.SmsNumber != null &&
                    this.SmsNumber.Equals(input.SmsNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EmailAddress != null)
                    hashCode = hashCode * 59 + this.EmailAddress.GetHashCode();
                hashCode = hashCode * 59 + this.FixedAccountRedemptionAmount.GetHashCode();
                hashCode = hashCode * 59 + this.MinAccountPurchaseThreshold.GetHashCode();
                hashCode = hashCode * 59 + this.ReceiveEmailSw.GetHashCode();
                hashCode = hashCode * 59 + this.ReceiveSMSSw.GetHashCode();
                if (this.RedemptionFrequency != null)
                    hashCode = hashCode * 59 + this.RedemptionFrequency.GetHashCode();
                if (this.SmsNumber != null)
                    hashCode = hashCode * 59 + this.SmsNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // EmailAddress (string) maxLength
            if(this.EmailAddress != null && this.EmailAddress.Length > 120)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EmailAddress, length must be less than 120.", new [] { "EmailAddress" });
            }

            // EmailAddress (string) minLength
            if(this.EmailAddress != null && this.EmailAddress.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EmailAddress, length must be greater than 0.", new [] { "EmailAddress" });
            }

            // RedemptionFrequency (string) maxLength
            if(this.RedemptionFrequency != null && this.RedemptionFrequency.Length > 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RedemptionFrequency, length must be less than 4.", new [] { "RedemptionFrequency" });
            }

            // RedemptionFrequency (string) minLength
            if(this.RedemptionFrequency != null && this.RedemptionFrequency.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RedemptionFrequency, length must be greater than 0.", new [] { "RedemptionFrequency" });
            }

            // SmsNumber (string) maxLength
            if(this.SmsNumber != null && this.SmsNumber.Length > 25)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SmsNumber, length must be less than 25.", new [] { "SmsNumber" });
            }

            // SmsNumber (string) minLength
            if(this.SmsNumber != null && this.SmsNumber.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SmsNumber, length must be greater than 0.", new [] { "SmsNumber" });
            }

            yield break;
        }
    }

}
