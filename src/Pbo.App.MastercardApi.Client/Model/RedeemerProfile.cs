/*
 * Pay with Rewards APIs
 *
 * Pay with Rewards allows cardholders to redeem points for purchases made with an enrolled Mastercard card. The following APIs create the Pay with Rewards user experience, and can be used inside a banking app or other mobile apps.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: paywithrewards@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Pbo.App.MastercardApi.Client.Client.OpenAPIDateConverter;

namespace Pbo.App.MastercardApi.Client.Model
{
    /// <summary>
    /// RedeemerProfile
    /// </summary>
    [DataContract(Name = "RedeemerProfile")]
    public partial class RedeemerProfile : IEquatable<RedeemerProfile>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RedeemerProfile" /> class.
        /// </summary>
        /// <param name="accountInfo">accountInfo.</param>
        /// <param name="householdInfo">householdInfo.</param>
        /// <param name="conversionFactors">conversionFactors.</param>
        /// <param name="compositeConversionFactors">compositeConversionFactors.</param>
        /// <param name="preferences">preferences.</param>
        /// <param name="userId">Unique identifier for the user..</param>
        /// <param name="userIdType">Identifier type for the given user such as BAN|BCN|RANAC..</param>
        public RedeemerProfile(AccountInfo accountInfo = default(AccountInfo), HouseholdInfo householdInfo = default(HouseholdInfo), List<ConversionFactor> conversionFactors = default(List<ConversionFactor>), List<CompositeConversionFactors> compositeConversionFactors = default(List<CompositeConversionFactors>), Preferences preferences = default(Preferences), string userId = default(string), string userIdType = default(string))
        {
            this.AccountInfo = accountInfo;
            this.HouseholdInfo = householdInfo;
            this.ConversionFactors = conversionFactors;
            this.CompositeConversionFactors = compositeConversionFactors;
            this.Preferences = preferences;
            this.UserId = userId;
            this.UserIdType = userIdType;
        }

        /// <summary>
        /// Gets or Sets AccountInfo
        /// </summary>
        [DataMember(Name = "accountInfo", EmitDefaultValue = false)]
        public AccountInfo AccountInfo { get; set; }

        /// <summary>
        /// Gets or Sets HouseholdInfo
        /// </summary>
        [DataMember(Name = "householdInfo", EmitDefaultValue = false)]
        public HouseholdInfo HouseholdInfo { get; set; }

        /// <summary>
        /// Gets or Sets ConversionFactors
        /// </summary>
        [DataMember(Name = "conversionFactors", EmitDefaultValue = false)]
        public List<ConversionFactor> ConversionFactors { get; set; }

        /// <summary>
        /// Gets or Sets CompositeConversionFactors
        /// </summary>
        [DataMember(Name = "CompositeConversionFactors", EmitDefaultValue = false)]
        public List<CompositeConversionFactors> CompositeConversionFactors { get; set; }

        /// <summary>
        /// Gets or Sets Preferences
        /// </summary>
        [DataMember(Name = "preferences", EmitDefaultValue = false)]
        public Preferences Preferences { get; set; }

        /// <summary>
        /// Unique identifier for the user.
        /// </summary>
        /// <value>Unique identifier for the user.</value>
        [DataMember(Name = "userId", EmitDefaultValue = false)]
        public string UserId { get; set; }

        /// <summary>
        /// Identifier type for the given user such as BAN|BCN|RANAC.
        /// </summary>
        /// <value>Identifier type for the given user such as BAN|BCN|RANAC.</value>
        [DataMember(Name = "userIdType", EmitDefaultValue = false)]
        public string UserIdType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RedeemerProfile {\n");
            sb.Append("  AccountInfo: ").Append(AccountInfo).Append("\n");
            sb.Append("  HouseholdInfo: ").Append(HouseholdInfo).Append("\n");
            sb.Append("  ConversionFactors: ").Append(ConversionFactors).Append("\n");
            sb.Append("  CompositeConversionFactors: ").Append(CompositeConversionFactors).Append("\n");
            sb.Append("  Preferences: ").Append(Preferences).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserIdType: ").Append(UserIdType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RedeemerProfile);
        }

        /// <summary>
        /// Returns true if RedeemerProfile instances are equal
        /// </summary>
        /// <param name="input">Instance of RedeemerProfile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RedeemerProfile input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountInfo == input.AccountInfo ||
                    (this.AccountInfo != null &&
                    this.AccountInfo.Equals(input.AccountInfo))
                ) && 
                (
                    this.HouseholdInfo == input.HouseholdInfo ||
                    (this.HouseholdInfo != null &&
                    this.HouseholdInfo.Equals(input.HouseholdInfo))
                ) && 
                (
                    this.ConversionFactors == input.ConversionFactors ||
                    this.ConversionFactors != null &&
                    input.ConversionFactors != null &&
                    this.ConversionFactors.SequenceEqual(input.ConversionFactors)
                ) && 
                (
                    this.CompositeConversionFactors == input.CompositeConversionFactors ||
                    this.CompositeConversionFactors != null &&
                    input.CompositeConversionFactors != null &&
                    this.CompositeConversionFactors.SequenceEqual(input.CompositeConversionFactors)
                ) && 
                (
                    this.Preferences == input.Preferences ||
                    (this.Preferences != null &&
                    this.Preferences.Equals(input.Preferences))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.UserIdType == input.UserIdType ||
                    (this.UserIdType != null &&
                    this.UserIdType.Equals(input.UserIdType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountInfo != null)
                    hashCode = hashCode * 59 + this.AccountInfo.GetHashCode();
                if (this.HouseholdInfo != null)
                    hashCode = hashCode * 59 + this.HouseholdInfo.GetHashCode();
                if (this.ConversionFactors != null)
                    hashCode = hashCode * 59 + this.ConversionFactors.GetHashCode();
                if (this.CompositeConversionFactors != null)
                    hashCode = hashCode * 59 + this.CompositeConversionFactors.GetHashCode();
                if (this.Preferences != null)
                    hashCode = hashCode * 59 + this.Preferences.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.UserIdType != null)
                    hashCode = hashCode * 59 + this.UserIdType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // UserId (string) maxLength
            if(this.UserId != null && this.UserId.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserId, length must be less than 30.", new [] { "UserId" });
            }

            // UserId (string) minLength
            if(this.UserId != null && this.UserId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserId, length must be greater than 1.", new [] { "UserId" });
            }

            // UserIdType (string) maxLength
            if(this.UserIdType != null && this.UserIdType.Length > 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserIdType, length must be less than 5.", new [] { "UserIdType" });
            }

            // UserIdType (string) minLength
            if(this.UserIdType != null && this.UserIdType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserIdType, length must be greater than 1.", new [] { "UserIdType" });
            }

            yield break;
        }
    }

}
