/*
 * Pay with Rewards APIs
 *
 * Pay with Rewards allows cardholders to redeem points for purchases made with an enrolled Mastercard card. The following APIs create the Pay with Rewards user experience, and can be used inside a banking app or other mobile apps.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: paywithrewards@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Pbo.App.MastercardApi.Client.Client.OpenAPIDateConverter;

namespace Pbo.App.MastercardApi.Client.Model
{
    /// <summary>
    /// ReprocessResponse
    /// </summary>
    [DataContract(Name = "ReprocessResponse")]
    public partial class ReprocessResponse : IEquatable<ReprocessResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReprocessResponse" /> class.
        /// </summary>
        /// <param name="reprocessCode">Reprocessed authorization code generated by Mastercard Rewards System..</param>
        /// <param name="reprocessId">Reprocessed authorization identifier generated by Mastercard Rewards System..</param>
        public ReprocessResponse(string reprocessCode = default(string), string reprocessId = default(string))
        {
            this.ReprocessCode = reprocessCode;
            this.ReprocessId = reprocessId;
        }

        /// <summary>
        /// Reprocessed authorization code generated by Mastercard Rewards System.
        /// </summary>
        /// <value>Reprocessed authorization code generated by Mastercard Rewards System.</value>
        [DataMember(Name = "reprocessCode", EmitDefaultValue = false)]
        public string ReprocessCode { get; set; }

        /// <summary>
        /// Reprocessed authorization identifier generated by Mastercard Rewards System.
        /// </summary>
        /// <value>Reprocessed authorization identifier generated by Mastercard Rewards System.</value>
        [DataMember(Name = "reprocessId", EmitDefaultValue = false)]
        public string ReprocessId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReprocessResponse {\n");
            sb.Append("  ReprocessCode: ").Append(ReprocessCode).Append("\n");
            sb.Append("  ReprocessId: ").Append(ReprocessId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReprocessResponse);
        }

        /// <summary>
        /// Returns true if ReprocessResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ReprocessResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReprocessResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ReprocessCode == input.ReprocessCode ||
                    (this.ReprocessCode != null &&
                    this.ReprocessCode.Equals(input.ReprocessCode))
                ) && 
                (
                    this.ReprocessId == input.ReprocessId ||
                    (this.ReprocessId != null &&
                    this.ReprocessId.Equals(input.ReprocessId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReprocessCode != null)
                    hashCode = hashCode * 59 + this.ReprocessCode.GetHashCode();
                if (this.ReprocessId != null)
                    hashCode = hashCode * 59 + this.ReprocessId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ReprocessCode (string) minLength
            if(this.ReprocessCode != null && this.ReprocessCode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReprocessCode, length must be greater than 1.", new [] { "ReprocessCode" });
            }

            // ReprocessId (string) minLength
            if(this.ReprocessId != null && this.ReprocessId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReprocessId, length must be greater than 1.", new [] { "ReprocessId" });
            }

            yield break;
        }
    }

}
