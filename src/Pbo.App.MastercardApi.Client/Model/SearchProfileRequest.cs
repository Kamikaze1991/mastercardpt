/*
 * Pay with Rewards APIs
 *
 * Pay with Rewards allows cardholders to redeem points for purchases made with an enrolled Mastercard card. The following APIs create the Pay with Rewards user experience, and can be used inside a banking app or other mobile apps.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: paywithrewards@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Pbo.App.MastercardApi.Client.Client.OpenAPIDateConverter;

namespace Pbo.App.MastercardApi.Client.Model
{
    /// <summary>
    /// SearchProfileRequest
    /// </summary>
    [DataContract(Name = "SearchProfileRequest")]
    public partial class SearchProfileRequest : IEquatable<SearchProfileRequest>, IValidatableObject
    {
        /// <summary>
        /// Identifier type for the given user such as BAN|BCN.
        /// </summary>
        /// <value>Identifier type for the given user such as BAN|BCN.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UserIdTypeEnum
        {
            /// <summary>
            /// Enum BCN for value: BCN
            /// </summary>
            [EnumMember(Value = "BCN")]
            BCN = 1,

            /// <summary>
            /// Enum BAN for value: BAN
            /// </summary>
            [EnumMember(Value = "BAN")]
            BAN = 2

        }

        /// <summary>
        /// Identifier type for the given user such as BAN|BCN.
        /// </summary>
        /// <value>Identifier type for the given user such as BAN|BCN.</value>
        [DataMember(Name = "userIdType", EmitDefaultValue = false)]
        public UserIdTypeEnum? UserIdType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchProfileRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SearchProfileRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchProfileRequest" /> class.
        /// </summary>
        /// <param name="userId">Unique identifier of the user. (required).</param>
        /// <param name="userIdType">Identifier type for the given user such as BAN|BCN..</param>
        /// <param name="redemptionType">Type of redemption. Use PWR. (required).</param>
        public SearchProfileRequest(string userId = default(string), UserIdTypeEnum? userIdType = default(UserIdTypeEnum?), string redemptionType = default(string))
        {
            // to ensure "userId" is required (not null)
            this.UserId = userId ?? throw new ArgumentNullException("userId is a required property for SearchProfileRequest and cannot be null");
            // to ensure "redemptionType" is required (not null)
            this.RedemptionType = redemptionType ?? throw new ArgumentNullException("redemptionType is a required property for SearchProfileRequest and cannot be null");
            this.UserIdType = userIdType;
        }

        /// <summary>
        /// Unique identifier of the user.
        /// </summary>
        /// <value>Unique identifier of the user.</value>
        [DataMember(Name = "userId", IsRequired = true, EmitDefaultValue = false)]
        public string UserId { get; set; }

        /// <summary>
        /// Type of redemption. Use PWR.
        /// </summary>
        /// <value>Type of redemption. Use PWR.</value>
        [DataMember(Name = "redemptionType", IsRequired = true, EmitDefaultValue = false)]
        public string RedemptionType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchProfileRequest {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserIdType: ").Append(UserIdType).Append("\n");
            sb.Append("  RedemptionType: ").Append(RedemptionType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchProfileRequest);
        }

        /// <summary>
        /// Returns true if SearchProfileRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchProfileRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchProfileRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.UserIdType == input.UserIdType ||
                    this.UserIdType.Equals(input.UserIdType)
                ) && 
                (
                    this.RedemptionType == input.RedemptionType ||
                    (this.RedemptionType != null &&
                    this.RedemptionType.Equals(input.RedemptionType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                hashCode = hashCode * 59 + this.UserIdType.GetHashCode();
                if (this.RedemptionType != null)
                    hashCode = hashCode * 59 + this.RedemptionType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // UserId (string) maxLength
            if(this.UserId != null && this.UserId.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserId, length must be less than 30.", new [] { "UserId" });
            }

            // UserId (string) minLength
            if(this.UserId != null && this.UserId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserId, length must be greater than 1.", new [] { "UserId" });
            }

            // UserIdType (string) maxLength
            if(this.UserIdType != null)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserIdType, length must be less than 5.", new [] { "UserIdType" });
            }

            // UserIdType (string) minLength
            if(this.UserIdType != null)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserIdType, length must be greater than 0.", new [] { "UserIdType" });
            }

            // RedemptionType (string) maxLength
            if(this.RedemptionType != null && this.RedemptionType.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RedemptionType, length must be less than 3.", new [] { "RedemptionType" });
            }

            // RedemptionType (string) minLength
            if(this.RedemptionType != null && this.RedemptionType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RedemptionType, length must be greater than 1.", new [] { "RedemptionType" });
            }

            yield break;
        }
    }

}
