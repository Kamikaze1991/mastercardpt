/*
 * Pay with Rewards APIs
 *
 * Pay with Rewards allows cardholders to redeem points for purchases made with an enrolled Mastercard card. The following APIs create the Pay with Rewards user experience, and can be used inside a banking app or other mobile apps.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: paywithrewards@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Pbo.App.MastercardApi.Client.Client.OpenAPIDateConverter;

namespace Pbo.App.MastercardApi.Client.Model
{
    /// <summary>
    /// UserEnrollResponse
    /// </summary>
    [DataContract(Name = "UserEnrollResponse")]
    public partial class UserEnrollResponse : IEquatable<UserEnrollResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserEnrollResponse" /> class.
        /// </summary>
        /// <param name="userId">Unique identifier of the user.</param>
        /// <param name="userIdType">Identifier type for the given user.</param>
        /// <param name="accountId">The unique identifier for the given account..</param>
        /// <param name="accountIdType">Identifier type for the given account..</param>
        public UserEnrollResponse(string userId = default(string), string userIdType = default(string), string accountId = default(string), string accountIdType = default(string))
        {
            this.UserId = userId;
            this.UserIdType = userIdType;
            this.AccountId = accountId;
            this.AccountIdType = accountIdType;
        }

        /// <summary>
        /// Unique identifier of the user
        /// </summary>
        /// <value>Unique identifier of the user</value>
        [DataMember(Name = "userId", EmitDefaultValue = false)]
        public string UserId { get; set; }

        /// <summary>
        /// Identifier type for the given user
        /// </summary>
        /// <value>Identifier type for the given user</value>
        [DataMember(Name = "userIdType", EmitDefaultValue = false)]
        public string UserIdType { get; set; }

        /// <summary>
        /// The unique identifier for the given account.
        /// </summary>
        /// <value>The unique identifier for the given account.</value>
        [DataMember(Name = "accountId", EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Identifier type for the given account.
        /// </summary>
        /// <value>Identifier type for the given account.</value>
        [DataMember(Name = "accountIdType", EmitDefaultValue = false)]
        public string AccountIdType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserEnrollResponse {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserIdType: ").Append(UserIdType).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountIdType: ").Append(AccountIdType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserEnrollResponse);
        }

        /// <summary>
        /// Returns true if UserEnrollResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of UserEnrollResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserEnrollResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.UserIdType == input.UserIdType ||
                    (this.UserIdType != null &&
                    this.UserIdType.Equals(input.UserIdType))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.AccountIdType == input.AccountIdType ||
                    (this.AccountIdType != null &&
                    this.AccountIdType.Equals(input.AccountIdType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.UserIdType != null)
                    hashCode = hashCode * 59 + this.UserIdType.GetHashCode();
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.AccountIdType != null)
                    hashCode = hashCode * 59 + this.AccountIdType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // UserId (string) maxLength
            if(this.UserId != null && this.UserId.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserId, length must be less than 30.", new [] { "UserId" });
            }

            // UserId (string) minLength
            if(this.UserId != null && this.UserId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserId, length must be greater than 1.", new [] { "UserId" });
            }

            // UserIdType (string) maxLength
            if(this.UserIdType != null && this.UserIdType.Length > 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserIdType, length must be less than 5.", new [] { "UserIdType" });
            }

            // UserIdType (string) minLength
            if(this.UserIdType != null && this.UserIdType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserIdType, length must be greater than 1.", new [] { "UserIdType" });
            }

            // AccountId (string) maxLength
            if(this.AccountId != null && this.AccountId.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountId, length must be less than 30.", new [] { "AccountId" });
            }

            // AccountId (string) minLength
            if(this.AccountId != null && this.AccountId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountId, length must be greater than 1.", new [] { "AccountId" });
            }

            // AccountIdType (string) maxLength
            if(this.AccountIdType != null && this.AccountIdType.Length > 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountIdType, length must be less than 5.", new [] { "AccountIdType" });
            }

            // AccountIdType (string) minLength
            if(this.AccountIdType != null && this.AccountIdType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountIdType, length must be greater than 1.", new [] { "AccountIdType" });
            }

            yield break;
        }
    }

}
